{
    "version": "https://jsonfeed.org/version/1",
    "title": "",
    "home_page_url": "https://humanwhocodes.com/",
    "feed_url": "https://humanwhocodes.com/feeds/snippets.json",
    "description": "The Official Web Site of Nicholas C. Zakas",
    "icon": "https://humanwhocodes.com/apple-touch-icon.png",
    "favicon": "https://humanwhocodes.com/favicon.ico",
    "expired": false,
    
"items": [
    
    
        {
            "id": "https://humanwhocodes.com/snippets/2021/03/create-user-linux-ssh-key/",
            "title": "Creating a new user with an SSH key on Linux",
            "summary": "First, create a new user with useradd:",
            "content_text": "First, create a new user with useradd:\n\nsudo useradd -m -d /home/username -s /bin/bash username\n\n\nNext, set the user’s password:\n\npasswd username\n\n\nThen, copy the contents of the user’s public key into /home/username/.ssh/authorized_keys. This is a plain text file where you can paste one public key per line.\n\nAfter that, set up the correct permissions for both the .ssh directory and the authorized_keys file:\n\n# ensure the directory ir owned by the new user\nchown -R username:username /home/username/.ssh\n\n# make sure only the new user has permissions\nchmod 700 /home/username/.ssh\nchmod 600 /home/username/.ssh/authorized_keys\n\n\nLast, if you want the new user to have sudo access, be sure to add them to the sudo group:\n\nsudo usermod -a -G sudo username\n\n\nIf you don’t have a sudo group,  you can manually edit the /etc/sudoers file.\n",
            "content_html": "<p>First, create a new user with <code class=\"highlighter-rouge\">useradd</code>:</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">sudo </span>useradd <span class=\"nt\">-m</span> <span class=\"nt\">-d</span> /home/username <span class=\"nt\">-s</span> /bin/bash username\n</code></pre></div></div>\n\n<p>Next, set the user’s password:</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>passwd username\n</code></pre></div></div>\n\n<p>Then, copy the contents of the user’s public key into <code class=\"highlighter-rouge\">/home/username/.ssh/authorized_keys</code>. This is a plain text file where you can paste one public key per line.</p>\n\n<p>After that, set up the correct permissions for both the <code class=\"highlighter-rouge\">.ssh</code> directory and the <code class=\"highlighter-rouge\">authorized_keys</code> file:</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># ensure the directory ir owned by the new user</span>\n<span class=\"nb\">chown</span> <span class=\"nt\">-R</span> username:username /home/username/.ssh\n\n<span class=\"c\"># make sure only the new user has permissions</span>\n<span class=\"nb\">chmod </span>700 /home/username/.ssh\n<span class=\"nb\">chmod </span>600 /home/username/.ssh/authorized_keys\n</code></pre></div></div>\n\n<p>Last, if you want the new user to have sudo access, be sure to add them to the <code class=\"highlighter-rouge\">sudo</code> group:</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">sudo </span>usermod <span class=\"nt\">-a</span> <span class=\"nt\">-G</span> <span class=\"nb\">sudo </span>username\n</code></pre></div></div>\n\n<p>If you don’t have a <code class=\"highlighter-rouge\">sudo</code> group,  you can manually edit the <code class=\"highlighter-rouge\">/etc/sudoers</code> file.</p>\n",
            "url": "https://humanwhocodes.com/snippets/2021/03/create-user-linux-ssh-key/",
            
            
            
            "tags": ["Linux","Users"],
            
            "date_published": "2021-03-01T00:00:00+00:00",
            "date_modified": "2021-03-01T00:00:00+00:00",
            
                "author": "Nicholas C. Zakas"
            
        },
    
        {
            "id": "https://humanwhocodes.com/snippets/2021/02/how-to-setup-deploy-web-application-dokku/",
            "title": "How to setup and deploy a web application on Dokku",
            "summary": "Dokku is a lightweight, Heroku-like utility for deploying web applications. While there is a quickstart, web-based UI for getting started, there are a bunch of steps you’ll need to go through in order to get your application deployed.",
            "content_text": "Dokku is a lightweight, Heroku-like utility for deploying web applications. While there is a quickstart, web-based UI for getting started, there are a bunch of steps you’ll need to go through in order to get your application deployed.\n\nCreate the app\n\nThe first step is to SSH into the droplet and create the application. I’ll use the name appname for this post:\n\ndokku apps:create appname\n\n\nAdd a domain for the app\n\nDokku can use virtual hosts to identify which application to route a request to. You can add a hostname to your application like this:\n\ndokku domains:add appname app.example.com\n\n\nHere, the hostname is set to app.example.com, so all requests coming in to that host will route to appname.\n\nImportant: Don’t forget to setup the DNS settings for your hostname.\n\nAdd a deploy key\n\nIf you are using your Dokku application in production, you probably want to add a separate key for a deployment account.\n\ndokku ssh-keys:add KEY_NAME /path/to/key.pub\n\n\nKEY_NAME is just the name of the key so you can refer to it later.\n\nSetup SSL\n\nBy default, your Dokku application will be running over plain HTTP without any SSL certificates. To enable SSL, you’ll need to install the Let’s Encrypt Dokku plugin. To enable Let’s Encrypt on your Dokku application, follow these steps (credit: Setup Dokku on Digital Ocean):\n\n# Install the plugin\nsudo dokku plugin:install https://github.com/dokku/dokku-letsencrypt.git\n\n# Set an email address for Let's Encrypt to use\ndokku config:set --no-restart appname DOKKU_LETSENCRYPT_EMAIL=name@example.com\n\n# Install Let's Encrypt for the given app\ndokku letsencrypt appname\n\n# Set a cron job to automatically renew Let's Encrypt certificates\ndokku letsencrypt:cron-job --add\n\n\nDeploy your application\n\nWith all of that setup, you’re now ready to deploy your application. To do so, add a Git remote that points to the Dokku location:\n\ngit remote add dokku dokku@app.example.com:appname\n\n\nThen, you can deploy by pushing the code to Dokku:\n\ngit push dokku master\n\n\nDokku expects the primary branch to be master, so if your primary branch is main, then use this command:\n\ngit push dokku main:master\n\n\nEnjoy your newly deployed Dokku app!\n",
            "content_html": "<p><a href="https://humanwhocodes.com/feeds/\&quot;https://dokku.com\&quot;">Dokku</a> is a lightweight, Heroku-like utility for deploying web applications. While there is a quickstart, web-based UI for getting started, there are a bunch of steps you’ll need to go through in order to get your application deployed.</p>\n\n<h2 id=\"create-the-app\">Create the app</h2>\n\n<p>The first step is to SSH into the droplet and create the application. I’ll use the name <code class=\"highlighter-rouge\">appname</code> for this post:</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>dokku apps:create appname\n</code></pre></div></div>\n\n<h2 id=\"add-a-domain-for-the-app\">Add a domain for the app</h2>\n\n<p>Dokku can use virtual hosts to identify which application to route a request to. You can <a href="https://humanwhocodes.com/feeds/\&quot;https://dokku.com/docs/configuration/domains/\&quot;">add a hostname</a> to your application like this:</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>dokku domains:add appname app.example.com\n</code></pre></div></div>\n\n<p>Here, the hostname is set to <code class=\"highlighter-rouge\">app.example.com</code>, so all requests coming in to that host will route to <code class=\"highlighter-rouge\">appname</code>.</p>\n\n<p><strong>Important:</strong> Don’t forget to setup the DNS settings for your hostname.</p>\n\n<h2 id=\"add-a-deploy-key\">Add a deploy key</h2>\n\n<p>If you are using your Dokku application in production, you probably want to <a href="https://humanwhocodes.com/feeds/\&quot;https://dokku.com/docs/deployment/user-management/#adding-ssh-keys\"">add a separate key</a> for a deployment account.</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>dokku ssh-keys:add KEY_NAME /path/to/key.pub\n</code></pre></div></div>\n\n<p><code class=\"highlighter-rouge\">KEY_NAME</code> is just the name of the key so you can refer to it later.</p>\n\n<h2 id=\"setup-ssl\">Setup SSL</h2>\n\n<p>By default, your Dokku application will be running over plain HTTP without any SSL certificates. To enable SSL, you’ll need to install the <a href="https://humanwhocodes.com/feeds/\&quot;https://github.com/dokku/dokku-letsencrypt\&quot;">Let’s Encrypt Dokku plugin</a>. To enable Let’s Encrypt on your Dokku application, follow these steps (credit: <a href="https://humanwhocodes.com/feeds/\&quot;https://www.robertcooper.me/setup-dokku-digital-ocean\&quot;">Setup Dokku on Digital Ocean</a>):</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># Install the plugin</span>\n<span class=\"nb\">sudo </span>dokku plugin:install https://github.com/dokku/dokku-letsencrypt.git\n\n<span class=\"c\"># Set an email address for Let's Encrypt to use</span>\ndokku config:set <span class=\"nt\">--no-restart</span> appname <span class=\"nv\">DOKKU_LETSENCRYPT_EMAIL</span><span class=\"o\">=</span>name@example.com\n\n<span class=\"c\"># Install Let's Encrypt for the given app</span>\ndokku letsencrypt appname\n\n<span class=\"c\"># Set a cron job to automatically renew Let's Encrypt certificates</span>\ndokku letsencrypt:cron-job <span class=\"nt\">--add</span>\n</code></pre></div></div>\n\n<h2 id=\"deploy-your-application\">Deploy your application</h2>\n\n<p>With all of that setup, you’re now ready to deploy your application. To do so, add a Git remote that points to the Dokku location:</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>git remote add dokku dokku@app.example.com:appname\n</code></pre></div></div>\n\n<p>Then, you can deploy by pushing the code to Dokku:</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>git push dokku master\n</code></pre></div></div>\n\n<p>Dokku expects the primary branch to be <code class=\"highlighter-rouge\">master</code>, so if your primary branch is <code class=\"highlighter-rouge\">main</code>, then use this command:</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>git push dokku main:master\n</code></pre></div></div>\n\n<p>Enjoy your newly deployed Dokku app!</p>\n",
            "url": "https://humanwhocodes.com/snippets/2021/02/how-to-setup-deploy-web-application-dokku/",
            
            
            
            "tags": ["Dokku","Docker","Web Applications"],
            
            "date_published": "2021-02-25T00:00:00+00:00",
            "date_modified": "2021-02-25T00:00:00+00:00",
            
                "author": "Nicholas C. Zakas"
            
        },
    
        {
            "id": "https://humanwhocodes.com/snippets/2021/02/how-to-regain-jenkins-web-access-after-lockout/",
            "title": "How to regain Jenkins web access after being locked out",
            "summary": "Jenkins is a fantastic continuous integration tool that I’ve used on a variety of projects. One of its problems, however, is that sometimes authentication can get messed up (frequently via an authentication plugin) and you can end up locked out of the web interface. As long as you have access the Jenkins host, though, it’s easy to regain access.",
            "content_text": "Jenkins is a fantastic continuous integration tool that I’ve used on a variety of projects. One of its problems, however, is that sometimes authentication can get messed up (frequently via an authentication plugin) and you can end up locked out of the web interface. As long as you have access the Jenkins host, though, it’s easy to regain access.\n\nFirst, SSH into your host with an account that has sudo access.\n\nThen, you need to open the config.xml file in your editor of choice:\n\n$ sudo vi $JENKINS_HOME/config.xml\n\n# or\n\n$ sudo vi /var/lib/jenkins/config.xml\n\n\nLook for this code in the config.xml file:\n\n&lt;useSecurity&gt;true&lt;/useSecurity&gt;\n\n\nAnd change it to this:\n\n&lt;useSecurity&gt;false&lt;/useSecurity&gt;\n\n\nExit and save config.xml.\n\nKeep in mind that this disable all authentication for Jenkins, which means anyone who can access the URL will have complete access. Only proceed to the next step when you are certain it is safe to do so.\n\nThe last step is to restart Jenkins:\n\n$  sudo service jenkins restart\n\n# or\n\n$  sudo systemctl restart jenkins\n\n\nAt this point, your Jenkins instance is up and accessible through the web interface without any security. Go to /configureSecurity immediately to set up your security settings.\n",
            "content_html": "<p><a href="https://humanwhocodes.com/feeds/\&quot;http://jenkins.io\&quot;">Jenkins</a> is a fantastic continuous integration tool that I’ve used on a variety of projects. One of its problems, however, is that sometimes authentication can get messed up (frequently via an authentication plugin) and you can end up locked out of the web interface. As long as you have access the Jenkins host, though, it’s easy to regain access.</p>\n\n<p>First, SSH into your host with an account that has <code class=\"highlighter-rouge\">sudo</code> access.</p>\n\n<p>Then, you need to open the <code class=\"highlighter-rouge\">config.xml</code> file in your editor of choice:</p>\n\n<div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>$ sudo vi $JENKINS_HOME/config.xml\n\n# or\n\n$ sudo vi /var/lib/jenkins/config.xml\n</code></pre></div></div>\n\n<p>Look for this code in the <code class=\"highlighter-rouge\">config.xml</code> file:</p>\n\n<div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;useSecurity&gt;</span>true<span class=\"nt\">&lt;/useSecurity&gt;</span>\n</code></pre></div></div>\n\n<p>And change it to this:</p>\n\n<div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;useSecurity&gt;</span>false<span class=\"nt\">&lt;/useSecurity&gt;</span>\n</code></pre></div></div>\n\n<p>Exit and save <code class=\"highlighter-rouge\">config.xml</code>.</p>\n\n<p>Keep in mind that this disable all authentication for Jenkins, which means anyone who can access the URL will have complete access. Only proceed to the next step when you are certain it is safe to do so.</p>\n\n<p>The last step is to restart Jenkins:</p>\n\n<div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>$  sudo service jenkins restart\n\n# or\n\n$  sudo systemctl restart jenkins\n</code></pre></div></div>\n\n<p>At this point, your Jenkins instance is up and accessible through the web interface without any security. Go to <code class=\"highlighter-rouge\">/configureSecurity</code> immediately to set up your security settings.</p>\n",
            "url": "https://humanwhocodes.com/snippets/2021/02/how-to-regain-jenkins-web-access-after-lockout/",
            
            
            
            "tags": ["Jenkins","Continuous Integration","Automation"],
            
            "date_published": "2021-02-18T00:00:00+00:00",
            "date_modified": "2021-02-18T00:00:00+00:00",
            
                "author": "Nicholas C. Zakas"
            
        },
    
        {
            "id": "https://humanwhocodes.com/snippets/2020/10/create-typescript-declarations-from-javascript-jsdoc/",
            "title": "Create TypeScript declarations from JavaScript and JSDoc",
            "summary": "For a variety of reasons, I prefer to write my code in vanilla JavaScript with JSDoc comments rather than writing in TypeScript. Today’s smart code editors, like Visual Studio Code, are able to read type information from JSDoc and provide Intellisense options as you code. However, those consuming your code may not get the same benefit unless you include a TypeScript declaration file along with the source files. Fortunately, TypeScript allows you to generate type declaration files directly from JavaScript files and will use information in JSDoc comments to assign the appropriate types.",
            "content_text": "For a variety of reasons, I prefer to write my code in vanilla JavaScript with JSDoc comments rather than writing in TypeScript. Today’s smart code editors, like Visual Studio Code, are able to read type information from JSDoc and provide Intellisense options as you code. However, those consuming your code may not get the same benefit unless you include a TypeScript declaration file along with the source files. Fortunately, TypeScript allows you to generate type declaration files directly from JavaScript files and will use information in JSDoc comments to assign the appropriate types.\n\nFirst, make sure you have TypeScript installed:\n\n$ npm install typescript --save-dev\n\n\nThen, create a tsconfig.json file with the following options:\n\n{\n    \"include\": [\n        \"**/*.js\"\n    ],\n    \"compilerOptions\": {\n        \"declaration\": true,\n        \"emitDeclarationOnly\": true,\n        \"allowJs\": true\n    }\n}\n\n\nMake sure that include specifies the files you want to generate declaration files for. The compilerOptions are:\n\n\n  declaration - generate the declarations for the files specified\n  emitDeclarationOnly - only output .d.ts files and not source files\n  allowJs - expect the source files to be JavaScript\n\n\nNow you can run tsc to generate your .d.ts files:\n\n$ tsc\n\n\nOr you can omit the tsconfig.json file and just pass the corresponding flags on the command line, like this:\n\n$ tsc --allowJs -d --emitDeclarationOnly src/foo.js\n\n\nIn this example, tsc will output src/foo.d.ts.\n\nJust make sure the declaration file(s) are part of the package that you are publishing by using the types field in your package.json file.\n",
            "content_html": "<p>For a variety of reasons, I prefer to write my code in vanilla JavaScript with <a href="https://humanwhocodes.com/feeds/\&quot;https://jsdoc.app/\&quot;">JSDoc</a> comments rather than writing in TypeScript. Today’s smart code editors, like Visual Studio Code, are able to read type information from JSDoc and provide Intellisense options as you code. However, those consuming your code may not get the same benefit unless you include a TypeScript declaration file along with the source files. Fortunately, TypeScript allows you to generate type declaration files directly from JavaScript files and will use information in JSDoc comments to assign the appropriate types.</p>\n\n<p>First, make sure you have <a href="https://humanwhocodes.com/feeds/\&quot;https://typescriptlang.org\&quot;">TypeScript</a> installed:</p>\n\n<div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>$ npm install typescript --save-dev\n</code></pre></div></div>\n\n<p>Then, create a <code class=\"highlighter-rouge\">tsconfig.json</code> file with the following options:</p>\n\n<div class=\"language-json highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"p\">{</span><span class=\"w\">\n    </span><span class=\"nl\">\"include\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"w\">\n        </span><span class=\"s2\">\"**/*.js\"</span><span class=\"w\">\n    </span><span class=\"p\">],</span><span class=\"w\">\n    </span><span class=\"nl\">\"compilerOptions\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n        </span><span class=\"nl\">\"declaration\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">,</span><span class=\"w\">\n        </span><span class=\"nl\">\"emitDeclarationOnly\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">,</span><span class=\"w\">\n        </span><span class=\"nl\">\"allowJs\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"w\">\n    </span><span class=\"p\">}</span><span class=\"w\">\n</span><span class=\"p\">}</span><span class=\"w\">\n</span></code></pre></div></div>\n\n<p>Make sure that <code class=\"highlighter-rouge\">include</code> specifies the files you want to generate declaration files for. The <code class=\"highlighter-rouge\">compilerOptions</code> are:</p>\n\n<ul>\n  <li><code class=\"highlighter-rouge\">declaration</code> - generate the declarations for the files specified</li>\n  <li><code class=\"highlighter-rouge\">emitDeclarationOnly</code> - only output <code class=\"highlighter-rouge\">.d.ts</code> files and not source files</li>\n  <li><code class=\"highlighter-rouge\">allowJs</code> - expect the source files to be JavaScript</li>\n</ul>\n\n<p>Now you can run <code class=\"highlighter-rouge\">tsc</code> to generate your <code class=\"highlighter-rouge\">.d.ts</code> files:</p>\n\n<div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>$ tsc\n</code></pre></div></div>\n\n<p>Or you can omit the <code class=\"highlighter-rouge\">tsconfig.json</code> file and just pass the corresponding flags on the command line, like this:</p>\n\n<div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>$ tsc --allowJs -d --emitDeclarationOnly src/foo.js\n</code></pre></div></div>\n\n<p>In this example, <code class=\"highlighter-rouge\">tsc</code> will output <code class=\"highlighter-rouge\">src/foo.d.ts</code>.</p>\n\n<p>Just make sure the declaration file(s) are part of the package that you are publishing by using the <a href="https://humanwhocodes.com/feeds/\&quot;https://www.typescriptlang.org/docs/handbook/declaration-files/publishing.html#including-declarations-in-your-npm-package\""><code class=\"highlighter-rouge\">types</code></a> field in your <code class=\"highlighter-rouge\">package.json</code> file.</p>\n",
            "url": "https://humanwhocodes.com/snippets/2020/10/create-typescript-declarations-from-javascript-jsdoc/",
            
            
            
            "tags": ["JavaScript","TypeScript","JSDoc"],
            
            "date_published": "2020-10-15T00:00:00+00:00",
            "date_modified": "2020-10-15T00:00:00+00:00",
            
                "author": "Nicholas C. Zakas"
            
        },
    
        {
            "id": "https://humanwhocodes.com/snippets/2020/10/read-environment-variables-deno/",
            "title": "How to read environment variables in Deno using JavaScript",
            "summary": "The way to read environment variables in Deno has changed from its early incarnation. Originally, there was a Deno.env() function that returned an object containing all of the defined environment variables. For v1.0.0, Deno switched to a Deno.env object with a get() method.",
            "content_text": "The way to read environment variables in Deno has changed from its early incarnation. Originally, there was a Deno.env() function that returned an object containing all of the defined environment variables. For v1.0.0, Deno switched to a Deno.env object with a get() method.\n\nFirst, in order to read environment variables, you must run your code with the --allow-env flag, such as:\n\n$ deno run --allow-env index.js\n\n\nThen, inside your JavaScript, you can read an environment variable by passing a string to Deno.env.get(), such as:\n\nconst PORT = Deno.env.get(\"PORT\");\n\n\nYou can also retrieve an object whose properties are all of the environment variables, similar to process.env in Node.js:\n\nconst env = Deno.env.toObject();\n\nconst PORT = env.PORT:\n\n\nThe Deno.env object also has set() and delete() methods that let you change the contents of the Deno.env object. You probably don’t want to use those methods regularly, however, they can be helpful for debugging purposes.\n",
            "content_html": "<p>The way to read environment variables in <a href="https://humanwhocodes.com/feeds/\&quot;https://deno.land\&quot;">Deno</a> has changed from its early incarnation. Originally, there was a <code class=\"highlighter-rouge\">Deno.env()</code> function that returned an object containing all of the defined environment variables. For v1.0.0, Deno switched to a <code class=\"highlighter-rouge\">Deno.env</code> object with a <code class=\"highlighter-rouge\">get()</code> method.</p>\n\n<p>First, in order to read environment variables, you must run your code with the <code class=\"highlighter-rouge\">--allow-env</code> flag, such as:</p>\n\n<div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>$ deno run --allow-env index.js\n</code></pre></div></div>\n\n<p>Then, inside your JavaScript, you can read an environment variable by passing a string to <code class=\"highlighter-rouge\">Deno.env.get()</code>, such as:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">const</span> <span class=\"nx\">PORT</span> <span class=\"o\">=</span> <span class=\"nx\">Deno</span><span class=\"p\">.</span><span class=\"nx\">env</span><span class=\"p\">.</span><span class=\"kd\">get</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">PORT</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n</code></pre></div></div>\n\n<p>You can also retrieve an object whose properties are all of the environment variables, similar to <code class=\"highlighter-rouge\">process.env</code> in <a href="https://humanwhocodes.com/feeds/\&quot;https://nodejs.org\&quot;">Node.js</a>:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">const</span> <span class=\"nx\">env</span> <span class=\"o\">=</span> <span class=\"nx\">Deno</span><span class=\"p\">.</span><span class=\"nx\">env</span><span class=\"p\">.</span><span class=\"nx\">toObject</span><span class=\"p\">();</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">PORT</span> <span class=\"o\">=</span> <span class=\"nx\">env</span><span class=\"p\">.</span><span class=\"nx\">PORT</span><span class=\"p\">:</span>\n</code></pre></div></div>\n\n<p>The <code class=\"highlighter-rouge\">Deno.env</code> object also has <code class=\"highlighter-rouge\">set()</code> and <code class=\"highlighter-rouge\">delete()</code> methods that let you change the contents of the <code class=\"highlighter-rouge\">Deno.env</code> object. You probably don’t want to use those methods regularly, however, they can be helpful for debugging purposes.</p>\n",
            "url": "https://humanwhocodes.com/snippets/2020/10/read-environment-variables-deno/",
            
            
            
            "tags": ["Deno","Environment Variables","JavaScript"],
            
            "date_published": "2020-10-09T00:00:00+00:00",
            "date_modified": "2020-10-09T00:00:00+00:00",
            
                "author": "Nicholas C. Zakas"
            
        },
    
        {
            "id": "https://humanwhocodes.com/snippets/2020/08/validate-github-webhook-signature-nodejs/",
            "title": "How to validate the signature of a GitHub webhook using Node.js",
            "summary": "When you have GitHub send a webhook to your server, you can optionally specify a secret that is used to generate a signature for the webhook request. It’s highly recommend to use the secret to check the signature of the payload to ensure it’s actually coming from GitHub.",
            "content_text": "When you have GitHub send a webhook to your server, you can optionally specify a secret that is used to generate a signature for the webhook request. It’s highly recommend to use the secret to check the signature of the payload to ensure it’s actually coming from GitHub.\n\nYou’ll need to generate a signature based on the request body and the secret you gave to GitHub when configuring the webhook. For JSON-based payloads, you can can calculate and verify the signature using this JavaScript:\n\nimport crypto from \"crypto\";\n\nconst { WEBHOOK_SECRET } = process.env;\n\nfunction validateJsonWebhook(request) {\n\n    // calculate the signature\n    const expectedSignature = \"sha1=\" +\n        crypto.createHmac(\"sha1\", WEBHOOK_SECRET)\n            .update(JSON.stringify(request.body))\n            .digest(\"hex\");\n\n    // compare the signature against the one in the request\n    const signature = request.headers[\"x-hub-signature\"];\n    if (signature !== expectedSignature) {\n        throw new Error(\"Invalid signature.\");\n    }\n}\n\n\nAs long as request.body is an object (which most Node.js server frameworks will provide JSON requests), then the validateJsonWebhook() function will work.\n",
            "content_html": "<p>When you have GitHub send a <a href="https://humanwhocodes.com/feeds/\&quot;https://docs.github.com/en/developers/webhooks-and-events/about-webhooks\&quot;">webhook</a> to your server, you can optionally specify a <a href="https://humanwhocodes.com/feeds/\&quot;https://docs.github.com/en/developers/webhooks-and-events/securing-your-webhooks\&quot;">secret</a> that is used to generate a signature for the webhook request. It’s highly recommend to use the secret to check the signature of the payload to ensure it’s actually coming from GitHub.</p>\n\n<p>You’ll need to generate a signature based on the request body and the secret you gave to GitHub when configuring the webhook. For JSON-based payloads, you can can calculate and verify the signature using this JavaScript:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">import</span> <span class=\"nx\">crypto</span> <span class=\"k\">from</span> <span class=\"dl\">\"</span><span class=\"s2\">crypto</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n\n<span class=\"kd\">const</span> <span class=\"p\">{</span> <span class=\"nx\">WEBHOOK_SECRET</span> <span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"nx\">process</span><span class=\"p\">.</span><span class=\"nx\">env</span><span class=\"p\">;</span>\n\n<span class=\"kd\">function</span> <span class=\"nx\">validateJsonWebhook</span><span class=\"p\">(</span><span class=\"nx\">request</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\n    <span class=\"c1\">// calculate the signature</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">expectedSignature</span> <span class=\"o\">=</span> <span class=\"dl\">\"</span><span class=\"s2\">sha1=</span><span class=\"dl\">\"</span> <span class=\"o\">+</span>\n        <span class=\"nx\">crypto</span><span class=\"p\">.</span><span class=\"nx\">createHmac</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">sha1</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"nx\">WEBHOOK_SECRET</span><span class=\"p\">)</span>\n            <span class=\"p\">.</span><span class=\"nx\">update</span><span class=\"p\">(</span><span class=\"nx\">JSON</span><span class=\"p\">.</span><span class=\"nx\">stringify</span><span class=\"p\">(</span><span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"nx\">body</span><span class=\"p\">))</span>\n            <span class=\"p\">.</span><span class=\"nx\">digest</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">hex</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n\n    <span class=\"c1\">// compare the signature against the one in the request</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">signature</span> <span class=\"o\">=</span> <span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"nx\">headers</span><span class=\"p\">[</span><span class=\"dl\">\"</span><span class=\"s2\">x-hub-signature</span><span class=\"dl\">\"</span><span class=\"p\">];</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">signature</span> <span class=\"o\">!==</span> <span class=\"nx\">expectedSignature</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">throw</span> <span class=\"k\">new</span> <span class=\"nb\">Error</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">Invalid signature.</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>As long as <code class=\"highlighter-rouge\">request.body</code> is an object (which most Node.js server frameworks will provide JSON requests), then the <code class=\"highlighter-rouge\">validateJsonWebhook()</code> function will work.</p>\n",
            "url": "https://humanwhocodes.com/snippets/2020/08/validate-github-webhook-signature-nodejs/",
            
            
            
            "tags": ["Node.js","GitHub","Security","Webhooks","Crypto"],
            
            "date_published": "2020-08-05T00:00:00+00:00",
            "date_modified": "2020-08-05T00:00:00+00:00",
            
                "author": "Nicholas C. Zakas"
            
        },
    
        {
            "id": "https://humanwhocodes.com/snippets/2020/07/eleventy-heading-ids/",
            "title": "How to generate ID attributes in headings using Eleventy",
            "summary": "When switching from Jekyll to Eleventy, I discovered that my headings no longer had id attributes in the rendered HTML. This meant that I couldn’t link directly to headings in my (sometimes very long) pages. After searching through the Eleventy documentation, I discovered that this wasn’t supported in Eleventy and I’d need to use a plugin.",
            "content_text": "When switching from Jekyll to Eleventy, I discovered that my headings no longer had id attributes in the rendered HTML. This meant that I couldn’t link directly to headings in my (sometimes very long) pages. After searching through the Eleventy documentation, I discovered that this wasn’t supported in Eleventy and I’d need to use a plugin.\n\nEleventy uses markdown-it as its default Markdown engine, and you can install plugins to markdown-it. The one of interest for this case is markdown-it-anchor.\n\nSo to start, you’ll need to install the plugin:\n\nnpm install markdown-it-anchor --save-dev\n\n\nIn your Eleventy config file (.eleventy.js), add this inside of your default config function:\n\nmodule.exports = function(eleventyConfig) {\n\n    // other configuration goes here\n\n    // this works because Eleventy also installs markdown-it \n    const markdownIt = require(\"markdown-it\");\n    \n    // create a new markdown-it instance with the plugin\n    const markdownItAnchor = require(\"markdown-it-anchor\");\n    const markdownLib = markdownIt({ html: true }).use(markdownItAnchor);\n\n    // replace the default markdown-it instance\n    eleventyConfig.setLibrary(\"md\", markdownLib);\n\n    // optionally return config object here\n};\n\n\nNow regenerate your website and you should see that all headings will now have an auto-generated id attribute.\n",
            "content_html": "<p>When switching from <a href="https://humanwhocodes.com/feeds/\&quot;jekyllrb.com/\&quot;">Jekyll</a> to <a href="https://humanwhocodes.com/feeds/\&quot;https://www.11ty.dev/\&quot;">Eleventy</a>, I discovered that my headings no longer had <code class=\"highlighter-rouge\">id</code> attributes in the rendered HTML. This meant that I couldn’t link directly to headings in my (sometimes very long) pages. After searching through the Eleventy documentation, I discovered that this wasn’t supported in Eleventy and I’d need to use a plugin.</p>\n\n<p>Eleventy uses <a href="https://humanwhocodes.com/feeds/\&quot;https://npmjs.com/package/markdown-it\&quot;"><code class=\"highlighter-rouge\">markdown-it</code></a> as its default Markdown engine, and you can install plugins to <code class=\"highlighter-rouge\">markdown-it</code>. The one of interest for this case is <a href="https://humanwhocodes.com/feeds/\&quot;https://npmjs.com/package/markdown-it-anchor\&quot;"><code class=\"highlighter-rouge\">markdown-it-anchor</code></a>.</p>\n\n<p>So to start, you’ll need to install the plugin:</p>\n\n<div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>npm install markdown-it-anchor --save-dev\n</code></pre></div></div>\n\n<p>In your Eleventy config file (<code class=\"highlighter-rouge\">.eleventy.js</code>), add this inside of your default config function:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nx\">module</span><span class=\"p\">.</span><span class=\"nx\">exports</span> <span class=\"o\">=</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">eleventyConfig</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\n    <span class=\"c1\">// other configuration goes here</span>\n\n    <span class=\"c1\">// this works because Eleventy also installs markdown-it </span>\n    <span class=\"kd\">const</span> <span class=\"nx\">markdownIt</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">markdown-it</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n    \n    <span class=\"c1\">// create a new markdown-it instance with the plugin</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">markdownItAnchor</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">markdown-it-anchor</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">markdownLib</span> <span class=\"o\">=</span> <span class=\"nx\">markdownIt</span><span class=\"p\">({</span> <span class=\"na\">html</span><span class=\"p\">:</span> <span class=\"kc\">true</span> <span class=\"p\">}).</span><span class=\"nx\">use</span><span class=\"p\">(</span><span class=\"nx\">markdownItAnchor</span><span class=\"p\">);</span>\n\n    <span class=\"c1\">// replace the default markdown-it instance</span>\n    <span class=\"nx\">eleventyConfig</span><span class=\"p\">.</span><span class=\"nx\">setLibrary</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">md</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"nx\">markdownLib</span><span class=\"p\">);</span>\n\n    <span class=\"c1\">// optionally return config object here</span>\n<span class=\"p\">};</span>\n</code></pre></div></div>\n\n<p>Now regenerate your website and you should see that all headings will now have an auto-generated <code class=\"highlighter-rouge\">id</code> attribute.</p>\n",
            "url": "https://humanwhocodes.com/snippets/2020/07/eleventy-heading-ids/",
            
            
            
            "tags": ["Eleventy","Static Site Generators","HTML"],
            
            "date_published": "2020-07-28T00:00:00+00:00",
            "date_modified": "2020-07-28T00:00:00+00:00",
            
                "author": "Nicholas C. Zakas"
            
        },
    
        {
            "id": "https://humanwhocodes.com/snippets/2020/02/optionally-await-function-result/",
            "title": "How to optionally await a JavaScript function call",
            "summary": "Even though async functions and the await operator quickly became popular in JavaScript, many use await solely with function calls, such as:",
            "content_text": "Even though async functions and the await operator quickly became popular in JavaScript, many use await solely with function calls, such as:\n\nconst result = await readSomeFile();\n\n\nThat works fine when you know the function you’re calling returns a promise. Actually, it works fine even without the function returning a promise as await will wrap the return value in a promise if it isn’t already one. But why go through the overhead of creating and returning a promise if it’s not needed?\n\nThe key here is that await operates on promises, and those are hidden when using await in front of a function call. Therefore, if you’re unsure that a function returns a promise, you can always check using the instanceof operator and only await if a promise is returned:\n\nlet result = someFunction();\nif (result instanceof Promise) {\n    result = await result;\n}\n\n\nThe value of result is usable directly at the end of this code regardless if someFunction() returns a promise or not.\n",
            "content_html": "<p>Even though async functions and the <code class=\"highlighter-rouge\">await</code> operator quickly became popular in JavaScript, many use <code class=\"highlighter-rouge\">await</code> solely with function calls, such as:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">const</span> <span class=\"nx\">result</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"nx\">readSomeFile</span><span class=\"p\">();</span>\n</code></pre></div></div>\n\n<p>That works fine when you know the function you’re calling returns a promise. Actually, it works fine even without the function returning a promise as <code class=\"highlighter-rouge\">await</code> will wrap the return value in a promise if it isn’t already one. But why go through the overhead of creating and returning a promise if it’s not needed?</p>\n\n<p>The key here is that <code class=\"highlighter-rouge\">await</code> operates on promises, and those are hidden when using <code class=\"highlighter-rouge\">await</code> in front of a function call. Therefore, if you’re unsure that a function returns a promise, you can always check using the <code class=\"highlighter-rouge\">instanceof</code> operator and only <code class=\"highlighter-rouge\">await</code> if a promise is returned:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">let</span> <span class=\"nx\">result</span> <span class=\"o\">=</span> <span class=\"nx\">someFunction</span><span class=\"p\">();</span>\n<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">result</span> <span class=\"k\">instanceof</span> <span class=\"nb\">Promise</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nx\">result</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"nx\">result</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>The value of <code class=\"highlighter-rouge\">result</code> is usable directly at the end of this code regardless if <code class=\"highlighter-rouge\">someFunction()</code> returns a promise or not.</p>\n",
            "url": "https://humanwhocodes.com/snippets/2020/02/optionally-await-function-result/",
            
            
            
            "tags": ["JavaScript","Promises","Async Functions"],
            
            "date_published": "2020-02-22T00:00:00+00:00",
            "date_modified": "2020-02-22T00:00:00+00:00",
            
                "author": "Nicholas C. Zakas"
            
        },
    
        {
            "id": "https://humanwhocodes.com/snippets/2019/05/jest-globals-intellisense-visual-studio-code/",
            "title": "Setting up Visual Studio Code intellisense for Jest globals",
            "summary": "One of the benefits of Visual Studio Code is it’s ability to automatically detect the type of JavaScript value you’re working with and provide autocomplete (aka intellisense) for properties and methods. This works really well whenever you’re using a module system and explicitly importing values from modules. If a framework happens to add random global variables, however, Visual Studio Code has no way to determine that on its own.",
            "content_text": "One of the benefits of Visual Studio Code is it’s ability to automatically detect the type of JavaScript value you’re working with and provide autocomplete (aka intellisense) for properties and methods. This works really well whenever you’re using a module system and explicitly importing values from modules. If a framework happens to add random global variables, however, Visual Studio Code has no way to determine that on its own.\n\nJest, the JavaScript testing framework, works by injecting several variables (such as describe(), test(), and inspect()) that Visual Studio Code doesn’t know anything about by default. Fortunately, you can tell Visual Studio Code about these globals by creating a jsconfig.json file in the root directory of your project and adding the following into the file:\n\n{\n    \"typeAcquisition\": {\n        \"include\": [\n            \"jest\"\n        ]\n    }\n}\n\n\nThis instructs to look at the jest module for type definitions. With this configuration setup in jsconfig.json, Visual Studio Code will now have intellisense for all of the Jest globals. (Note: You must have the jest npm package installed for this to work.)\n",
            "content_html": "<p>One of the benefits of <a href="https://humanwhocodes.com/feeds/\&quot;https://code.visualstudio.com\&quot;">Visual Studio Code</a> is it’s ability to automatically detect the type of JavaScript value you’re working with and provide autocomplete (aka intellisense) for properties and methods. This works really well whenever you’re using a module system and explicitly importing values from modules. If a framework happens to add random global variables, however, Visual Studio Code has no way to determine that on its own.</p>\n\n<p><a href="https://humanwhocodes.com/feeds/\&quot;https://jestjs.io\&quot;">Jest</a>, the JavaScript testing framework, works by injecting several variables (such as <code class=\"highlighter-rouge\">describe()</code>, <code class=\"highlighter-rouge\">test()</code>, and <code class=\"highlighter-rouge\">inspect()</code>) that Visual Studio Code doesn’t know anything about by default. Fortunately, you can tell Visual Studio Code about these globals by creating a <code class=\"highlighter-rouge\">jsconfig.json</code> file in the root directory of your project and adding the following into the file:</p>\n\n<div class=\"language-json highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"p\">{</span><span class=\"w\">\n    </span><span class=\"nl\">\"typeAcquisition\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n        </span><span class=\"nl\">\"include\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"w\">\n            </span><span class=\"s2\">\"jest\"</span><span class=\"w\">\n        </span><span class=\"p\">]</span><span class=\"w\">\n    </span><span class=\"p\">}</span><span class=\"w\">\n</span><span class=\"p\">}</span><span class=\"w\">\n</span></code></pre></div></div>\n\n<p>This instructs to look at the <code class=\"highlighter-rouge\">jest</code> module for type definitions. With this configuration setup in <code class=\"highlighter-rouge\">jsconfig.json</code>, Visual Studio Code will now have intellisense for all of the Jest globals. (Note: You must have the <code class=\"highlighter-rouge\">jest</code> npm package installed for this to work.)</p>\n",
            "url": "https://humanwhocodes.com/snippets/2019/05/jest-globals-intellisense-visual-studio-code/",
            
            
            
            "tags": ["JavaScript","Testing","Jest","Visual Studio Code"],
            
            "date_published": "2019-05-28T00:00:00+00:00",
            "date_modified": "2019-05-28T00:00:00+00:00",
            
                "author": "Nicholas C. Zakas"
            
        },
    
        {
            "id": "https://humanwhocodes.com/snippets/2019/05/nodejs-read-stream-promise/",
            "title": "Reading streams with promises in Node.js",
            "summary": "If you’ve tried to use the Node.js fs.promises API, you might have noticed that there doesn’t appear to be a cross-platform way of using fs.readFile() to read from process.stdin (such as process.stdin). Using the old, callback-based API, you could pass in a numeric file descriptor, such as:",
            "content_text": "If you’ve tried to use the Node.js fs.promises API, you might have noticed that there doesn’t appear to be a cross-platform way of using fs.readFile() to read from process.stdin (such as process.stdin). Using the old, callback-based API, you could pass in a numeric file descriptor, such as:\n\nimport fs from \"fs\";\n\nconst text = fs.readFileSync(0, \"utf8\");\n\n\nHowever, when using the fs.promises version of readFile(), you can no longer use numeric file descriptors (an error is thrown). While you can use the string \"/dev/stdin\" on Linux machines, but that doesn’t work on Windows machines.\n\nThe easiest way to read stream using promises is to write your own function do so. Here’s what mine looks like:\n\nfunction readStream(stream, encoding = \"utf8\") {\n    \n    stream.setEncoding(encoding);\n\n    return new Promise((resolve, reject) =&gt; {\n        let data = \"\";\n        \n        stream.on(\"data\", chunk =&gt; data += chunk);\n        stream.on(\"end\", () =&gt; resolve(data));\n        stream.on(\"error\", error =&gt; reject(error));\n    });\n}\n\nconst text = await readStream(process.stdin);\n\n\nThe key is to listen to three events:\n\n\n  data for the pieces of data being read\n  end to resolve the promise with the accumulated data\n  error to reject the promise if there’s an error\n\n\nBecause readStream() returns a promise, you can use await to call it, making it fit in with the rest of the fs.promises API.\n",
            "content_html": "<p>If you’ve tried to use the Node.js <a href="https://humanwhocodes.com/feeds/\&quot;https://nodejs.org/api/fs.html#fs_fs_promises_api\""><code class=\"highlighter-rouge\">fs.promises</code> API</a>, you might have noticed that there doesn’t appear to be a cross-platform way of using <code class=\"highlighter-rouge\">fs.readFile()</code> to read from <code class=\"highlighter-rouge\">process.stdin</code> (such as <code class=\"highlighter-rouge\">process.stdin</code>). Using the old, callback-based API, you could pass in a numeric file descriptor, such as:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">import</span> <span class=\"nx\">fs</span> <span class=\"k\">from</span> <span class=\"dl\">\"</span><span class=\"s2\">fs</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">text</span> <span class=\"o\">=</span> <span class=\"nx\">fs</span><span class=\"p\">.</span><span class=\"nx\">readFileSync</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">utf8</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n</code></pre></div></div>\n\n<p>However, when using the <code class=\"highlighter-rouge\">fs.promises</code> version of <code class=\"highlighter-rouge\">readFile()</code>, you can no longer use numeric file descriptors (an error is thrown). While you can use the string <code class=\"highlighter-rouge\">\"/dev/stdin\"</code> on Linux machines, but that doesn’t work on Windows machines.</p>\n\n<p>The easiest way to read stream using promises is to write your own function do so. Here’s what mine looks like:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">function</span> <span class=\"nx\">readStream</span><span class=\"p\">(</span><span class=\"nx\">stream</span><span class=\"p\">,</span> <span class=\"nx\">encoding</span> <span class=\"o\">=</span> <span class=\"dl\">\"</span><span class=\"s2\">utf8</span><span class=\"dl\">\"</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    \n    <span class=\"nx\">stream</span><span class=\"p\">.</span><span class=\"nx\">setEncoding</span><span class=\"p\">(</span><span class=\"nx\">encoding</span><span class=\"p\">);</span>\n\n    <span class=\"k\">return</span> <span class=\"k\">new</span> <span class=\"nb\">Promise</span><span class=\"p\">((</span><span class=\"nx\">resolve</span><span class=\"p\">,</span> <span class=\"nx\">reject</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n        <span class=\"kd\">let</span> <span class=\"nx\">data</span> <span class=\"o\">=</span> <span class=\"dl\">\"\"</span><span class=\"p\">;</span>\n        \n        <span class=\"nx\">stream</span><span class=\"p\">.</span><span class=\"nx\">on</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">data</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"nx\">chunk</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">data</span> <span class=\"o\">+=</span> <span class=\"nx\">chunk</span><span class=\"p\">);</span>\n        <span class=\"nx\">stream</span><span class=\"p\">.</span><span class=\"nx\">on</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">end</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">resolve</span><span class=\"p\">(</span><span class=\"nx\">data</span><span class=\"p\">));</span>\n        <span class=\"nx\">stream</span><span class=\"p\">.</span><span class=\"nx\">on</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">error</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"nx\">error</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">reject</span><span class=\"p\">(</span><span class=\"nx\">error</span><span class=\"p\">));</span>\n    <span class=\"p\">});</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">text</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"nx\">readStream</span><span class=\"p\">(</span><span class=\"nx\">process</span><span class=\"p\">.</span><span class=\"nx\">stdin</span><span class=\"p\">);</span>\n</code></pre></div></div>\n\n<p>The key is to listen to three events:</p>\n\n<ol>\n  <li><code class=\"highlighter-rouge\">data</code> for the pieces of data being read</li>\n  <li><code class=\"highlighter-rouge\">end</code> to resolve the promise with the accumulated data</li>\n  <li><code class=\"highlighter-rouge\">error</code> to reject the promise if there’s an error</li>\n</ol>\n\n<p>Because <code class=\"highlighter-rouge\">readStream()</code> returns a promise, you can use <code class=\"highlighter-rouge\">await</code> to call it, making it fit in with the rest of the <code class=\"highlighter-rouge\">fs.promises</code> API.</p>\n",
            "url": "https://humanwhocodes.com/snippets/2019/05/nodejs-read-stream-promise/",
            
            
            
            "tags": ["JavaScript","Node.js","Promises","Streams"],
            
            "date_published": "2019-05-13T00:00:00+00:00",
            "date_modified": "2019-05-13T00:00:00+00:00",
            
                "author": "Nicholas C. Zakas"
            
        },
    
        {
            "id": "https://humanwhocodes.com/snippets/2019/02/flatten-array-javascript-generator/",
            "title": "Flattening a JavaScript array with a generator",
            "summary": "ECMAScript 2019 will introduce the Array.prototype.flat() method to aid in flattening out multidimensional arrays in JavaScript. However, flattening arrays has been easy in JavaScript every since ECMAScript 6 (2015) introduced generators. Because generators can yield values in any order, not just linearly, it’s possible to use a recursive generator to easily flatten an array. Here’s the code:",
            "content_text": "ECMAScript 2019 will introduce the Array.prototype.flat() method to aid in flattening out multidimensional arrays in JavaScript. However, flattening arrays has been easy in JavaScript every since ECMAScript 6 (2015) introduced generators. Because generators can yield values in any order, not just linearly, it’s possible to use a recursive generator to easily flatten an array. Here’s the code:\n\nfunction* traverse(array) {\n    for (const item of array) {\n        if (Array.isArray(item)) {\n            yield* traverse(item);\n        } else {\n            yield item;\n        }\n    }\n}\n\nconst data = [\n    1, 2,\n    [\n        3, 4,\n        [5, 6]    \n    ],\n    7, 8\n];\n\nconst flattened = [...traverse(data)];\nconsole.log(flattened);         // 1,2,3,4,5,6,7,8\n\n\nThe generator just checks each item to see if it’s an array, and if it is, then it delegates the yield operation to a recursive traverse() call. In the simple case, when the array item isn’t an array, the item is yielded. This ouputs each item linearly, which means using a spread operator with the returned iterator results in a flattened array.\n",
            "content_html": "<p>ECMAScript 2019 will introduce the <code class=\"highlighter-rouge\">Array.prototype.flat()</code> method to aid in flattening out multidimensional arrays in JavaScript. However, flattening arrays has been easy in JavaScript every since ECMAScript 6 (2015) introduced generators. Because generators can <code class=\"highlighter-rouge\">yield</code> values in any order, not just linearly, it’s possible to use a recursive generator to easily flatten an array. Here’s the code:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">function</span><span class=\"o\">*</span> <span class=\"nx\">traverse</span><span class=\"p\">(</span><span class=\"nx\">array</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kd\">const</span> <span class=\"nx\">item</span> <span class=\"k\">of</span> <span class=\"nx\">array</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nb\">Array</span><span class=\"p\">.</span><span class=\"nx\">isArray</span><span class=\"p\">(</span><span class=\"nx\">item</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n            <span class=\"k\">yield</span><span class=\"o\">*</span> <span class=\"nx\">traverse</span><span class=\"p\">(</span><span class=\"nx\">item</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n            <span class=\"k\">yield</span> <span class=\"nx\">item</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">data</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span>\n    <span class=\"p\">[</span>\n        <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span>\n        <span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">]</span>    \n    <span class=\"p\">],</span>\n    <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">8</span>\n<span class=\"p\">];</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">flattened</span> <span class=\"o\">=</span> <span class=\"p\">[...</span><span class=\"nx\">traverse</span><span class=\"p\">(</span><span class=\"nx\">data</span><span class=\"p\">)];</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">flattened</span><span class=\"p\">);</span>         <span class=\"c1\">// 1,2,3,4,5,6,7,8</span>\n</code></pre></div></div>\n\n<p>The generator just checks each item to see if it’s an array, and if it is, then it delegates the <code class=\"highlighter-rouge\">yield</code> operation to a recursive <code class=\"highlighter-rouge\">traverse()</code> call. In the simple case, when the array item isn’t an array, the item is <code class=\"highlighter-rouge\">yield</code>ed. This ouputs each item linearly, which means using a spread operator with the returned iterator results in a flattened array.</p>\n",
            "url": "https://humanwhocodes.com/snippets/2019/02/flatten-array-javascript-generator/",
            
            
            
            "tags": ["JavaScript","Generators","Arrays"],
            
            "date_published": "2019-02-09T00:00:00+00:00",
            "date_modified": "2019-02-09T00:00:00+00:00",
            
                "author": "Nicholas C. Zakas"
            
        },
    
        {
            "id": "https://humanwhocodes.com/snippets/2019/01/special-formatting-svg-images-css/",
            "title": "Special formatting for SVG images with CSS",
            "summary": "I frequently run into a problem displaying SVG images in my blog posts. SVG images tend to have no background color (so the post background bleeds through) and don’t have any space between the artwork and what would be the border. This left the SVG images looking a bit squished and washed out even though they were displayed using the same styles as any bitmap image on my site.",
            "content_text": "I frequently run into a problem displaying SVG images in my blog posts. SVG images tend to have no background color (so the post background bleeds through) and don’t have any space between the artwork and what would be the border. This left the SVG images looking a bit squished and washed out even though they were displayed using the same styles as any bitmap image on my site.\n\nTo solve this problem, I used a bit of CSS to single out the SVG images in my posts:\n\np &gt; img[src$=\".svg\"],\np &gt; a &gt; img[src$=\".svg\"] {\n    background: white;\n    padding: 20px;\n}\n\n\nUsing an attribute selector, I checked the image’s src attribute to see if it ends with \".svg\", and if so, I apply extra padding and a background color. How the SVG images in my posts look great!\n",
            "content_html": "<p>I frequently run into a problem displaying SVG images in my blog posts. SVG images tend to have no background color (so the post background bleeds through) and don’t have any space between the artwork and what would be the border. This left the SVG images looking a bit squished and washed out even though they were displayed using the same styles as any bitmap image on my site.</p>\n\n<p>To solve this problem, I used a bit of CSS to single out the SVG images in my posts:</p>\n\n<div class=\"language-css highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">p</span> <span class=\"o\">&gt;</span> <span class=\"nt\">img</span><span class=\"o\">[</span><span class=\"nt\">src</span><span class=\"err\">$</span><span class=\"o\">=</span><span class=\"s1\">\".svg\"</span><span class=\"o\">],</span>\n<span class=\"nt\">p</span> <span class=\"o\">&gt;</span> <span class=\"nt\">a</span> <span class=\"o\">&gt;</span> <span class=\"nt\">img</span><span class=\"o\">[</span><span class=\"nt\">src</span><span class=\"err\">$</span><span class=\"o\">=</span><span class=\"s1\">\".svg\"</span><span class=\"o\">]</span> <span class=\"p\">{</span>\n    <span class=\"nl\">background</span><span class=\"p\">:</span> <span class=\"no\">white</span><span class=\"p\">;</span>\n    <span class=\"nl\">padding</span><span class=\"p\">:</span> <span class=\"m\">20px</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>Using an attribute selector, I checked the image’s <code class=\"highlighter-rouge\">src</code> attribute to see if it ends with <code class=\"highlighter-rouge\">\".svg\"</code>, and if so, I apply extra padding and a background color. How the SVG images in my posts look great!</p>\n",
            "url": "https://humanwhocodes.com/snippets/2019/01/special-formatting-svg-images-css/",
            
            
            
            "tags": ["CSS","SVG"],
            
            "date_published": "2019-01-20T00:00:00+00:00",
            "date_modified": "2019-01-20T00:00:00+00:00",
            
                "author": "Nicholas C. Zakas"
            
        },
    
        {
            "id": "https://humanwhocodes.com/snippets/2019/01/nodejs-medium-api-fetch/",
            "title": "Posting to Medium using Node.js and fetch()",
            "summary": "You can use the Medium REST API to post new articles on Medium. They previously had a Node.js SDK to make using the API a bit simpler, but that SDK is no longer supported. Rather than relying on an unsupported SDK, you can call the REST API endpoints directly using the node-fetch package. The following code expects you to define MEDIUM_PUBLICATION_ID and MEDIUM_ACCESS_TOKEN (the Medium integration token) yourself.",
            "content_text": "You can use the Medium REST API to post new articles on Medium. They previously had a Node.js SDK to make using the API a bit simpler, but that SDK is no longer supported. Rather than relying on an unsupported SDK, you can call the REST API endpoints directly using the node-fetch package. The following code expects you to define MEDIUM_PUBLICATION_ID and MEDIUM_ACCESS_TOKEN (the Medium integration token) yourself.\n\nconst fetch = require(\"node-fetch\");\n\n// construct the URL to post to a publication\nconst MEDIUM_POST_URL = `https://api.medium.com/v1/publications/${MEDIUM_PUBLICATION_ID}/posts`;\n\nconst response = await fetch(MEDIUM_POST_URL, {\n    method: \"post\",\n    headers: {\n        \"Authorization\": `Bearer ${MEDIUM_ACCESS_TOKEN}`,\n        \"Content-type\": \"application/json\",\n        \"Accept\": \"application/json\",\n        \"Accept-Charset\": \"utf-8\"\n    },\n    body: JSON.stringify({\n        title: \"Title of my post\",\n        contentFormat: \"html\",\n        content: \"Body of my post\",\n        tags: [\"Hello\", \"World\"],\n        publishStatus: \"draft\", // or \"public\" to immediately publish\n\n        // optional: the canonical URL if posted elsewhere first\n        canonicalUrl: \"http://example.com/blog/1\"\n    })\n});\n\nconst messageData = await response.json();\n\n// the API frequently returns 201\nif ((response.status !== 200) &amp;&amp; (response.status !== 201)) {\n    console.error(`Invalid response status ${ response.status }.`);\n    throw messageData;\n}\n\n",
            "content_html": "<p>You can use the <a href="https://humanwhocodes.com/feeds/\&quot;https://github.com/Medium/medium-api-docs\&quot;">Medium REST API</a> to post new articles on Medium. They previously had a <a href="https://humanwhocodes.com/feeds/\&quot;https://github.com/Medium/medium-sdk-nodejs\&quot;">Node.js SDK</a> to make using the API a bit simpler, but that SDK is no longer supported. Rather than relying on an unsupported SDK, you can call the REST API endpoints directly using the <code class=\"highlighter-rouge\">node-fetch</code> package. The following code expects you to define <code class=\"highlighter-rouge\">MEDIUM_PUBLICATION_ID</code> and <code class=\"highlighter-rouge\">MEDIUM_ACCESS_TOKEN</code> (the Medium <a href="https://humanwhocodes.com/feeds/\&quot;https://help.medium.com/hc/en-us/articles/213480228-Get-integration-token\&quot;">integration token</a>) yourself.</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">const</span> <span class=\"nx\">fetch</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">node-fetch</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n\n<span class=\"c1\">// construct the URL to post to a publication</span>\n<span class=\"kd\">const</span> <span class=\"nx\">MEDIUM_POST_URL</span> <span class=\"o\">=</span> <span class=\"s2\">`https://api.medium.com/v1/publications/</span><span class=\"p\">${</span><span class=\"nx\">MEDIUM_PUBLICATION_ID</span><span class=\"p\">}</span><span class=\"s2\">/posts`</span><span class=\"p\">;</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">response</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"nx\">fetch</span><span class=\"p\">(</span><span class=\"nx\">MEDIUM_POST_URL</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n    <span class=\"na\">method</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">post</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n    <span class=\"na\">headers</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"dl\">\"</span><span class=\"s2\">Authorization</span><span class=\"dl\">\"</span><span class=\"p\">:</span> <span class=\"s2\">`Bearer </span><span class=\"p\">${</span><span class=\"nx\">MEDIUM_ACCESS_TOKEN</span><span class=\"p\">}</span><span class=\"s2\">`</span><span class=\"p\">,</span>\n        <span class=\"dl\">\"</span><span class=\"s2\">Content-type</span><span class=\"dl\">\"</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">application/json</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n        <span class=\"dl\">\"</span><span class=\"s2\">Accept</span><span class=\"dl\">\"</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">application/json</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n        <span class=\"dl\">\"</span><span class=\"s2\">Accept-Charset</span><span class=\"dl\">\"</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">utf-8</span><span class=\"dl\">\"</span>\n    <span class=\"p\">},</span>\n    <span class=\"na\">body</span><span class=\"p\">:</span> <span class=\"nx\">JSON</span><span class=\"p\">.</span><span class=\"nx\">stringify</span><span class=\"p\">({</span>\n        <span class=\"na\">title</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">Title of my post</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n        <span class=\"na\">contentFormat</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">html</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n        <span class=\"na\">content</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">Body of my post</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n        <span class=\"na\">tags</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"dl\">\"</span><span class=\"s2\">Hello</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">World</span><span class=\"dl\">\"</span><span class=\"p\">],</span>\n        <span class=\"na\">publishStatus</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">draft</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"c1\">// or \"public\" to immediately publish</span>\n\n        <span class=\"c1\">// optional: the canonical URL if posted elsewhere first</span>\n        <span class=\"na\">canonicalUrl</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">http://example.com/blog/1</span><span class=\"dl\">\"</span>\n    <span class=\"p\">})</span>\n<span class=\"p\">});</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">messageData</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"nx\">response</span><span class=\"p\">.</span><span class=\"nx\">json</span><span class=\"p\">();</span>\n\n<span class=\"c1\">// the API frequently returns 201</span>\n<span class=\"k\">if</span> <span class=\"p\">((</span><span class=\"nx\">response</span><span class=\"p\">.</span><span class=\"nx\">status</span> <span class=\"o\">!==</span> <span class=\"mi\">200</span><span class=\"p\">)</span> <span class=\"o\">&amp;&amp;</span> <span class=\"p\">(</span><span class=\"nx\">response</span><span class=\"p\">.</span><span class=\"nx\">status</span> <span class=\"o\">!==</span> <span class=\"mi\">201</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">error</span><span class=\"p\">(</span><span class=\"s2\">`Invalid response status </span><span class=\"p\">${</span> <span class=\"nx\">response</span><span class=\"p\">.</span><span class=\"nx\">status</span> <span class=\"p\">}</span><span class=\"s2\">.`</span><span class=\"p\">);</span>\n    <span class=\"k\">throw</span> <span class=\"nx\">messageData</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n",
            "url": "https://humanwhocodes.com/snippets/2019/01/nodejs-medium-api-fetch/",
            
            
            
            "tags": ["JavaScript","Fetch","Node.js","Medium"],
            
            "date_published": "2019-01-05T00:00:00+00:00",
            "date_modified": "2019-01-05T00:00:00+00:00",
            
                "author": "Nicholas C. Zakas"
            
        }
    
    ]
}