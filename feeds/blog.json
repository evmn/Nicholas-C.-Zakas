{
    "version": "https://jsonfeed.org/version/1",
    "title": "",
    "home_page_url": "https://humanwhocodes.com/",
    "feed_url": "https://humanwhocodes.com/feeds/blog.json",
    "description": "The Official Web Site of Nicholas C. Zakas",
    "icon": "https://humanwhocodes.com/apple-touch-icon.png",
    "favicon": "https://humanwhocodes.com/favicon.ico",
    "expired": false,
    
"items": [
    
        {
            "id": "https://humanwhocodes.com/blog/2021/05/talk-to-your-company-sponsoring-open-source/",
            "title": "How to talk to your company about sponsoring an open source project",
            "summary": "Open source sustainability is a topic that is just starting to get the attention that it deserves. So much of the technology sector is run on software that can be used for free without any further obligation. However, as companies profit from using this software for free, the maintainers of the software often struggle to find enough time to work on the software while making enough money to survive. Many are forced to work full-time jobs to subsidize the development of these open source projects, or else try to work full-time on the project while making less than they would in the industry. While donations from individuals help, the only real way to make open source sustainable for maintainers is for the companies who reap the outsize benefits of the software to donate towards their maintenance.",
            "content_text": "Open source sustainability is a topic that is just starting to get the attention that it deserves. So much of the technology sector is run on software that can be used for free without any further obligation. However, as companies profit from using this software for free, the maintainers of the software often struggle to find enough time to work on the software while making enough money to survive. Many are forced to work full-time jobs to subsidize the development of these open source projects, or else try to work full-time on the project while making less than they would in the industry. While donations from individuals help, the only real way to make open source sustainable for maintainers is for the companies who reap the outsize benefits of the software to donate towards their maintenance.\n\nThis post contains everything I know about convincing a company to support open source projects. I’ve worked with many companies to donate to ESLint, the open source project that I’ve founded, and in doing so, I’ve learned a lot about how these efforts are organized. My hope is that this post will serve as a guide to help others convince their companies to donate to the open source projects that support their businesses.\n\nGetting your story straight\n\nBefore you start talking to people about sponsoring an open source project, it’s important to take some time to craft the story you’ll tell them. A lot of developers, with their hearts in the right place, tell a story that donating to an open source project is “the right thing to do.” While that might actually be true, most companies don’t operate on the basis of altruism. Companies don’t exist to give away their hard-earned money; they exist to make more money. If you want to convince your company to donate money to an open source project, you’re going to have to make the case that doing so actually benefits the company (outside of warm fuzzy feelings).\n\nGenerally speaking, a company will spend money on something that accomplishes any of these three goals:\n\n\n  Saves time\n  Saves money\n  Generates more money\n\n\nYour job is to make the case that the open source project helps achieve one or more of these goals. In most cases, you can argue that the project saves you time because it prevents you from needing to implement the functionality yourself. In some cases, you can argue that the project bootstraps common tasks that would otherwise take you weeks or months to accomplish. If the project is a code quality tool like ESLint then you can argue that it saves you time by catching bugs or other quality issues before they happen. Really take the think to think through how the project is benefitting your workflow.\n\nOnce you’ve tied the open source project to at least one of the three goals, imagine what would happen if the project was no longer maintained. How long does it takes before that absence starts to work against the three goals? How much will it slow you down or cost you money if you couldn’t use the project anymore? That is why donating to the project is valuable: your workflow is dependent on this project and removing the project now would cause harm, either through time or money. Therefore, it makes sense to donate to the project in order to maintain the advantage you’ve already realized for the foreseeable future.\n\nCrafting the presentation\n\nAfter putting together a good story of why it makes sense to donate to the project, the next step is to present that story to the correct person in your organization. It makes sense to start with your manager to get their support, though you may need to present the same information multiple times in order to get approval. The format of this presentation will be dependent upon the norms of the company, so you should be prepared to put together an email, a PowerPoint presentation, or an explainer, depending on your company’s preferences.\n\nRegardless of the format, your presentation should answer the following questions for your audience:\n\n\n  What does the project do? What 2-3 sentences describe the purpose of the project? Assume your audience doesn’t know anything about it and introduce both the problem the project solves and what the solution looks like.\n  Where is the project used in your company? Is it used in a continuous integration environment? In your text editor? Is it customer facing (like a UI framework)? This gives context to your audience about how integrated the project is in your current workflow. It’s likely your audience may not even be aware the project is in use.\n  What value do you get from using the project? Does it lead to fewer bugs? Faster feature development? Does it generate more revenue? Again, assume your audience knows nothing about the project and how you’re using it. Remember to include at least one of the three goals mentioned earlier in this post.\n  Who receives the money? When you donate the money, where does it end up? In a foundation? In an individual’s bank account? You’ll have better luck getting a donation to a project if the project is set up on a reputable site like Open Collective1 or GitHub Sponsors2. It’s difficult to convince your company to send a large amount of money to a PayPal email address. If the project isn’t already on Open Collective or GitHub Sponsors, it’s worth reaching out to the maintainers to ask them about this.\n  How does the project use the money it receives? Are they paying maintainers? Do they use money for infrastructure? Again, you can’t argue that it’s “nice” to pay maintainers of a project. Be explicit about how the money is used. In many cases, it will go directly to pay the maintainers, so that’s important to call out. It can help to mention if the maintainer doesn’t otherwise have a salary, as it lends to the importance of paying the maintainers to ensure the project will continue to be maintained.\n  What does the company get in return for the donation? A logo on the README or website? Is there a priority support channel? Make sure there is some direct benefit for the sponsorship. Companies will be looking for some sort of recognition of their donation (explained later in this post). If the project doesn’t offer anything in return, reach out to the maintainers and ask at least for a sponsorship notice in the README or website. Many maintainers will be happy to do that and it gives you a better argument.\n  What commercial alternatives are available and what do they charge? Would a paid alternative cost more or less than donating to support the open source project? This doesn’t apply to all projects, but if there is a commercial alternative, this can be a powerful part of your story because you can tie actual dollar amounts to the value of the project. If a commercial solution costs $10,000 and you’re asking the company to donate $1,000 to the open source version, that comes off looking like a big cost savings to the company.\n  What other companies are sponsoring the project? Are any big companies sponsoring the project? If you want to donate to a project that already has some corporate sponsors, it can help to call those out. A project that is sponsored by a well-known company such as Google or Facebook creates social proof that it is not just okay but expected to sponsor this project. As an added bonus, potentially getting your company’s logo next to Google or Facebook’s logo could be a selling point. If there aren’t any other sponsors, it’s best not to bring that up unless asked directly.\n\n\nPulling all of this information together can take some time, but ultimately, these are the details you will need to convince your company to sponsor an open source project.\n\nHopefully, you will get approval for sponsoring a project not long after making the presentation. Your work is far from over, though. To move forward, you need to understand a little bit about how companies manage their money, and in doing so, where you can find the money to sponsor a project.\n\nFinding the money\n\nCompanies generally work on budgets at two levels: yearly and quarterly. The yearly budget for the next year is set towards the end of the fourth quarter of the current year and is typically when the top-level budget items (sometimes called cost centers) are established. You can think of these as defining the row labels in a spreadsheet – these are the categories under which funds are assigned. The quarterly budget for the next quarter is established towards the end of the current quarter, and typically you cannot add budget items during the quarterly process, you can only adjust the amounts assigned to each item. This is important to understand because it is unlikely that you’ll be able to get funding for an open source project within three months. You’ll need to get the request into one of the windows for the yearly or quarterly budget planning process, and sometimes that can take several months.\n\nBecause getting a budget item added is difficult and make take a year, it’s usually easier to work within the existing budget items to find funds that can be used for open source. Here are some budget items that are typically used to sponsor open source projects:\n\n\n  Dedicated Open Source Fund\n  IT/Software\n  Marketing\n  Recruiting\n\n\nEach of these budget items have different reasons why they might be appropriate, so it’s helpful to dig in to the details.\n\nDedicated Open Source Fund\n\nObviously, if your company has a dedicated open source fund, then that is where the money should come from. This is money that has already been set aside from the company to sponsor open source projects and there is likely more money in there than is being used at the moment. It may be as simple as filling out a form or emailing the right person to get a new project considered for sponsorship. This is a good sign that your company is a leader when it comes to open source sustainability and the process for devoting funds to a project is already established.\n\nYour ultimate goal should be to get a dedicated open source fund budget item established at your company because that is the only way to ensure that (or at least increase the likelihood that) the funds will actually be used for open source sponsorships. Whenever you are dipping into other budget items to sponsor open source, it’s possible for those funds to be reallocated to something else each quarter.\n\nIT/Software\n\nAny modern company runs on a large amount of software, whether that be Gmail, GitHub, AWS, Salesforce, or any number of other software-as-a-service products. As such, there is usually a dedicated budget for this type of software, and once again, there is usually some extra dedicated for unanticipated software needs during the quarter. Because open source software is, afterall, software that your company is relying on, you can make a strong argument that funds in this budget item can be used to sponsor a project.\n\nIf your company doesn’t already have a dedicated open source fund, looking at the IT/Software budget item is a good place to start. Your manager or director should have direct insight into whether this is possible because they likely receive a specific amount each quarter. The amount you receive is likely to go on in the future unless you stop using the project you want to sponsor.\n\nMarketing\n\nOne of the underrated aspects of sponsoring open source projects is just how much good publicity it brings to companies. Companies spend a lot of money on something called brand awareness, which is basically whether or not people know the company in the industry. Google, Facebook, and Apple all have great brand awareness: you know what they do and how they benefit you. The result is more sales, and also, an easier time recruiting new employees. So how does sponsoring an open source project increase brand awareness?\n\nCompanies regularly spend thousands of dollars sponsoring tech conferences to get their logo in front of 1,000 people for three days. Many open source projects offer logo placement on their READMEs and websites, which can easily reach more eyes even for projects that aren’t well-known. Plus, open source projects are good at promoting their sponsors. ESLint, for example, tweets out a public thank you and will also publish a blog post touting the sponsorship. This type of publicity is a big win for companies, as it is a grassroots effort that shows the company believes in supporting its developers and tools they use.\n\nGetting access to these funds often takes a bit of digging. As always, you can start with your manager, but you’ll ultimately need to find someone who works in marketing to talk with and explain the opportunity. Just be careful: the marketing department thinks in terms of “campaigns,” which are fixed-length periods of spending a certain amount of money to get a certain result. In short, sometimes this ends up being equated to an ad buy and you’ll need to discuss renewing the commitment after some period of time.\n\nRecruiting\n\nAs previously mentioned, brand awareness is important to the company for a number of reasons, and one of those is the ability to attract and hire new employees. Even though a good amount of these efforts fall under marketing, some are recruiting-specific. Recruiting departments regularly spend money on sourcers (those folks who email you directly asking if you’d like to apply), software like LinkedIn and Indeed, booths at college job fairs and tech conferences, and swag like t-shirts, cups, and hats. All of this is to say: recruiting spends a lot of money to try and attract job candidates.\n\nSponsoring an open source project is a good way to attract job candidates. As long as the project does a decent job at promoting its sponsors (and most of them do), your company is likely to get in front of exactly the people who they are looking to hire. Developers know what open source projects they prefer to use, and if they can find a company where they can no only use it but also contribute to it, that’s a big selling point for a job applicant.\n\nI put this as the last option of the four because it tends to be the hardest to get and is also prone to strict timelines after which you’ll have to discuss renewing the contribution. Your manager likely has someone who they work with in recruiting regularly, and so that person is a good place to start the conversation. Going through recruiting will likely take longer than going through other budget items, but it is an option nonetheless.\n\nSponsorship approaches\n\nAt this point, you have hopefully identified where in the budget the money for open source sponsorships will come from. The next step is to determine what type of sponsorship your company will make. As with finding money in the budget, there are many approaches that companies take when sponsoring open source projects. You’ll need to find the solution that best matches your company’s culture and approach to open source. Fortunately, there are many options to choose from.\n\nMonthly contributions\n\nOpen source projects generally prefer monthly contributions to keep the project funded. If at all possible, getting your company to commit to donating a monthly amount for 12 months gives the project the most financial stability. There are ongoing costs to maintaining an open source project and having a reliable amount of money coming in every month helps the maintainers to plan ahead of time. Platforms like Open Collective and GitHub Sponsors allow you to pledge contributions both monthly and yearly. When specifying a yearly donation, the amount can be set up to be evenly split among the upcoming 12 months.\n\nThis option works well if your open source donations are coming from your IT/Software budget item, as most software is billed on either a monthly or yearly basis.\n\nOpen source grants\n\nFor some companies, the idea of donating monthly will not be the best option. It feels like a commitment without an end, and that can be a hard sell. Another approach is to create an open source grant, which is a one-time donation to a project based on some set of criteria. It’s up to the individual companies to determine what those criteria are, and there is no one right way to do it.\n\nCompanies like Indeed3, Microsoft4, and Salesforce5 have set up Free and Open Source Software (FOSS) Contributor Funds, where the employees who have contributed to open source projects during the quarter are then allowed to nominate and vote for open source projects to receive a one-time donation (typically $10,000). FOSS Contributor Funds tend to be popular within their host companies because they allow the developers themselves to determine which projects are considered for a donation.\n\nSome companies also provide open source grants that must be applied for. Mozilla6, the Sloan Foundation7, Google8 9, and Comcast10 have grant programs where anyone is welcome to apply for a one-time grant. The decisions are typically made by a committee who is dedicated to reviewing and choosing grantees.\n\nGrants are a great way to support open source projects if your company isn’t willing or able to provide ongoing monthly support. Grants are less favored by open source projects because there is far less predictability of income, but in the end, any donations are appreciated. There is also a bit of a downside for the company because there is administrative overhead associated with a grant program.\n\nUsing grants is more beneficial if you end up using marketing or recruiting budget to fund open source projects because there is a set amount and duration.\n\nEmployee gift cards\n\nAnother option that is available exclusively through Open Collective is to give open source gift cards11 to employees. The gift cards can then be used to fund any project that is on Open Collective. With this approach, the company would transfer some amount of money to Open Collective in a lump sum. Gift cards would then be issued for any number of employees, with each gift card representing a set amount of that lump sum. The employees are then free to use those gift cards to donate directly to any project they want, so long as it is capable of receiving funds through Open Collective.\n\nThis can be a nice option for companies who can’t commit to a monthly or yearly donation and who don’t want the overhead of running a grant program.\n\nOther things to keep in mind\n\nThere are just a few other notes I’d like to share as your work on convincing your company to sponsor an open source project:\n\n\n  Don’t expect that you can hand off this initiative to someone else. Your manager is unlikely to take this on as their own task. In every company I’ve worked with to get a donation, the process has been driven to completion by a passionate engineer or group of engineers. You will have more success with a bottom-up approach rather than expecting your manager to make time for it.\n  Leverage existing vendor relationships as much as possible. Getting a vendor approved at your company can require a large amount of effort on its own. Asking the company to onboard several different vendors to allow you to donate to several different projects is unlikely to succeed. Instead, focus your efforts on getting vendor approval for Open Collective and GitHub Sponsors. With Open Collective, you can set up a fund12 where you can transfer a lump-sum of money and then donate to individual projects from that fund; with GitHub, if your company is already paying for a GitHub organization, you can leverage that relationship by having donations appear on the monthly bill13.\n  If your company already donates to an open source foundation, such as the Linux Foundation, they may not realize that those donations to not go directly to projects. For example, ESLint is part of the Open JS Foundation, however the Open JS Foundation does not provide any money directly to ESLint. Open source foundations exist to provide a legal infrastructure and technical resources to projects. These are important, but they are very different from providing funds to the projects. You may need to explain this to your company.\n  Be patient with your company. Especially in large companies, progress is slow and changes happen with persistence over time rather than all at once. If your company has never even considered donating to an open source project then you’ll need to provide a lot of context and get a lot of signoffs. This is completely normal. Don’t take it personally, just realize that giving away money for some unknown benefit is not high on most company’s lists of priorities.\n\n\nConclusion\n\nIn this post, I’ve explored all of the topics I’m aware of with regards to company open source sponsorships. As I’m sure you realize if you’re read this far, it can take a lot of work to get your company started with donations to open source projects. My own experience has taught me to allow at least six months from first contact until the first donation is made, so patience is key throughout this process.\n\nMaking sure you have a good story to tell, finding the budget, and the establishing the structure of the program are the three most important steps in this process. And once all of this has been established for one project, it’s easy to apply to the next project. Indeed, companies tend to increase donations after they’ve accomplished one because the infrastructure is already in place. Establishing your company’s open source sponsorship program is a fixed, upfront cost that then allows less friction for other donations going forward.\n\nMy hope is that we are moving towards a time when companies, especially those large corporations, who benefit from using open source software will also start seeing open source sponsorships as part of their core business activities. It’s this software, available for free, that allows small startups to grow into massive multinational companies. It would be nice for more companies to pay it back in some way.\n\nReferences\n\n\n  \n    \n      Open Collective &#8617;\n    \n    \n      GitHub Sponsors &#8617;\n    \n    \n      Indeed FOSS Contributor Fund &#8617;\n    \n    \n      Microsoft’s Free and Open Source Software Fund &#8617;\n    \n    \n      Announcing the first Salesforce FOSS Contributor Fund Recipient &#8617;\n    \n    \n      Mozilla Open Source Support Awards &#8617;\n    \n    \n      Sloan Foundation Digital Technology &#8617;\n    \n    \n      Google Summer of Code &#8617;\n    \n    \n      Google Season of Docs &#8617;\n    \n    \n      Comcast Innovation Fund &#8617;\n    \n    \n      Open Collective Gift Cards &#8617;\n    \n    \n      Open Collective Funds &#8617;\n    \n    \n      Companies can now invest in open source with GitHub Sponsors &#8617;\n    \n  \n\n",
            "content_html": "<p>Open source sustainability is a topic that is just starting to get the attention that it deserves. So much of the technology sector is run on software that can be used for free without any further obligation. However, as companies profit from using this software for free, the maintainers of the software often struggle to find enough time to work on the software while making enough money to survive. Many are forced to work full-time jobs to subsidize the development of these open source projects, or else try to work full-time on the project while making less than they would in the industry. While donations from individuals help, the only real way to make open source sustainable for maintainers is for the companies who reap the outsize benefits of the software to donate towards their maintenance.</p>\n\n<p>This post contains everything I know about convincing a company to support open source projects. I’ve worked with many companies to donate to ESLint, the open source project that I’ve founded, and in doing so, I’ve learned a lot about how these efforts are organized. My hope is that this post will serve as a guide to help others convince their companies to donate to the open source projects that support their businesses.</p>\n\n<h2 id=\"getting-your-story-straight\">Getting your story straight</h2>\n\n<p>Before you start talking to people about sponsoring an open source project, it’s important to take some time to craft the story you’ll tell them. A lot of developers, with their hearts in the right place, tell a story that donating to an open source project is “the right thing to do.” While that might actually be true, most companies don’t operate on the basis of altruism. Companies don’t exist to give away their hard-earned money; they exist to make more money. If you want to convince your company to donate money to an open source project, you’re going to have to make the case that doing so actually benefits the company (outside of warm fuzzy feelings).</p>\n\n<p>Generally speaking, a company will spend money on something that accomplishes any of these three goals:</p>\n\n<ol>\n  <li>Saves time</li>\n  <li>Saves money</li>\n  <li>Generates more money</li>\n</ol>\n\n<p>Your job is to make the case that the open source project helps achieve one or more of these goals. In most cases, you can argue that the project saves you time because it prevents you from needing to implement the functionality yourself. In some cases, you can argue that the project bootstraps common tasks that would otherwise take you weeks or months to accomplish. If the project is a code quality tool like ESLint then you can argue that it saves you time by catching bugs or other quality issues before they happen. Really take the think to think through how the project is benefitting your workflow.</p>\n\n<p>Once you’ve tied the open source project to at least one of the three goals, imagine what would happen if the project was no longer maintained. How long does it takes before that absence starts to work against the three goals? How much will it slow you down or cost you money if you couldn’t use the project anymore? That is why donating to the project is valuable: your workflow is dependent on this project and removing the project now would cause harm, either through time or money. Therefore, it makes sense to donate to the project in order to maintain the advantage you’ve already realized for the foreseeable future.</p>\n\n<h3 id=\"crafting-the-presentation\">Crafting the presentation</h3>\n\n<p>After putting together a good story of why it makes sense to donate to the project, the next step is to present that story to the correct person in your organization. It makes sense to start with your manager to get their support, though you may need to present the same information multiple times in order to get approval. The format of this presentation will be dependent upon the norms of the company, so you should be prepared to put together an email, a PowerPoint presentation, or an explainer, depending on your company’s preferences.</p>\n\n<p>Regardless of the format, your presentation should answer the following questions for your audience:</p>\n\n<ol>\n  <li><strong>What does the project do?</strong> What 2-3 sentences describe the purpose of the project? Assume your audience doesn’t know anything about it and introduce both the problem the project solves and what the solution looks like.</li>\n  <li><strong>Where is the project used in your company?</strong> Is it used in a continuous integration environment? In your text editor? Is it customer facing (like a UI framework)? This gives context to your audience about how integrated the project is in your current workflow. It’s likely your audience may not even be aware the project is in use.</li>\n  <li><strong>What value do you get from using the project?</strong> Does it lead to fewer bugs? Faster feature development? Does it generate more revenue? Again, assume your audience knows nothing about the project and how you’re using it. Remember to include at least one of the three goals mentioned earlier in this post.</li>\n  <li><strong>Who receives the money?</strong> When you donate the money, where does it end up? In a foundation? In an individual’s bank account? You’ll have better luck getting a donation to a project if the project is set up on a reputable site like Open Collective<sup id=\"fnref:1\"><a href="https://humanwhocodes.com/feeds/\&quot;#fn:1\"" class=\"footnote\">1</a></sup> or GitHub Sponsors<sup id=\"fnref:2\"><a href="https://humanwhocodes.com/feeds/\&quot;#fn:2\"" class=\"footnote\">2</a></sup>. It’s difficult to convince your company to send a large amount of money to a PayPal email address. If the project isn’t already on Open Collective or GitHub Sponsors, it’s worth reaching out to the maintainers to ask them about this.</li>\n  <li><strong>How does the project use the money it receives?</strong> Are they paying maintainers? Do they use money for infrastructure? Again, you can’t argue that it’s “nice” to pay maintainers of a project. Be explicit about how the money is used. In many cases, it will go directly to pay the maintainers, so that’s important to call out. It can help to mention if the maintainer doesn’t otherwise have a salary, as it lends to the importance of paying the maintainers to ensure the project will continue to be maintained.</li>\n  <li><strong>What does the company get in return for the donation?</strong> A logo on the README or website? Is there a priority support channel? Make sure there is some direct benefit for the sponsorship. Companies will be looking for some sort of recognition of their donation (explained later in this post). If the project doesn’t offer anything in return, reach out to the maintainers and ask at least for a sponsorship notice in the README or website. Many maintainers will be happy to do that and it gives you a better argument.</li>\n  <li><strong>What commercial alternatives are available and what do they charge?</strong> Would a paid alternative cost more or less than donating to support the open source project? This doesn’t apply to all projects, but if there is a commercial alternative, this can be a powerful part of your story because you can tie actual dollar amounts to the value of the project. If a commercial solution costs $10,000 and you’re asking the company to donate $1,000 to the open source version, that comes off looking like a big cost savings to the company.</li>\n  <li><strong>What other companies are sponsoring the project?</strong> Are any big companies sponsoring the project? If you want to donate to a project that already has some corporate sponsors, it can help to call those out. A project that is sponsored by a well-known company such as Google or Facebook creates social proof that it is not just okay but expected to sponsor this project. As an added bonus, potentially getting your company’s logo next to Google or Facebook’s logo could be a selling point. If there aren’t any other sponsors, it’s best not to bring that up unless asked directly.</li>\n</ol>\n\n<p>Pulling all of this information together can take some time, but ultimately, these are the details you will need to convince your company to sponsor an open source project.</p>\n\n<p>Hopefully, you will get approval for sponsoring a project not long after making the presentation. Your work is far from over, though. To move forward, you need to understand a little bit about how companies manage their money, and in doing so, where you can find the money to sponsor a project.</p>\n\n<h2 id=\"finding-the-money\">Finding the money</h2>\n\n<p>Companies generally work on budgets at two levels: yearly and quarterly. The yearly budget for the next year is set towards the end of the fourth quarter of the current year and is typically when the top-level budget items (sometimes called <em>cost centers</em>) are established. You can think of these as defining the row labels in a spreadsheet – these are the categories under which funds are assigned. The quarterly budget for the next quarter is established towards the end of the current quarter, and typically you cannot add budget items during the quarterly process, you can only adjust the amounts assigned to each item. This is important to understand because it is unlikely that you’ll be able to get funding for an open source project within three months. You’ll need to get the request into one of the windows for the yearly or quarterly budget planning process, and sometimes that can take several months.</p>\n\n<p>Because getting a budget item added is difficult and make take a year, it’s usually easier to work within the existing budget items to find funds that can be used for open source. Here are some budget items that are typically used to sponsor open source projects:</p>\n\n<ol>\n  <li>Dedicated Open Source Fund</li>\n  <li>IT/Software</li>\n  <li>Marketing</li>\n  <li>Recruiting</li>\n</ol>\n\n<p>Each of these budget items have different reasons why they might be appropriate, so it’s helpful to dig in to the details.</p>\n\n<h3 id=\"dedicated-open-source-fund\">Dedicated Open Source Fund</h3>\n\n<p>Obviously, if your company has a dedicated open source fund, then that is where the money should come from. This is money that has already been set aside from the company to sponsor open source projects and there is likely more money in there than is being used at the moment. It may be as simple as filling out a form or emailing the right person to get a new project considered for sponsorship. This is a good sign that your company is a leader when it comes to open source sustainability and the process for devoting funds to a project is already established.</p>\n\n<p>Your ultimate goal should be to get a dedicated open source fund budget item established at your company because that is the only way to ensure that (or at least increase the likelihood that) the funds will actually be used for open source sponsorships. Whenever you are dipping into other budget items to sponsor open source, it’s possible for those funds to be reallocated to something else each quarter.</p>\n\n<h3 id=\"itsoftware\">IT/Software</h3>\n\n<p>Any modern company runs on a large amount of software, whether that be Gmail, GitHub, AWS, Salesforce, or any number of other software-as-a-service products. As such, there is usually a dedicated budget for this type of software, and once again, there is usually some extra dedicated for unanticipated software needs during the quarter. Because open source software is, afterall, software that your company is relying on, you can make a strong argument that funds in this budget item can be used to sponsor a project.</p>\n\n<p>If your company doesn’t already have a dedicated open source fund, looking at the IT/Software budget item is a good place to start. Your manager or director should have direct insight into whether this is possible because they likely receive a specific amount each quarter. The amount you receive is likely to go on in the future unless you stop using the project you want to sponsor.</p>\n\n<h3 id=\"marketing\">Marketing</h3>\n\n<p>One of the underrated aspects of sponsoring open source projects is just how much good publicity it brings to companies. Companies spend a lot of money on something called <em>brand awareness</em>, which is basically whether or not people know the company in the industry. Google, Facebook, and Apple all have great brand awareness: you know what they do and how they benefit you. The result is more sales, and also, an easier time recruiting new employees. So how does sponsoring an open source project increase brand awareness?</p>\n\n<p>Companies regularly spend thousands of dollars sponsoring tech conferences to get their logo in front of 1,000 people for three days. Many open source projects offer logo placement on their READMEs and websites, which can easily reach more eyes even for projects that aren’t well-known. Plus, open source projects are good at promoting their sponsors. ESLint, for example, tweets out a public thank you and will also publish a blog post touting the sponsorship. This type of publicity is a big win for companies, as it is a grassroots effort that shows the company believes in supporting its developers and tools they use.</p>\n\n<p>Getting access to these funds often takes a bit of digging. As always, you can start with your manager, but you’ll ultimately need to find someone who works in marketing to talk with and explain the opportunity. Just be careful: the marketing department thinks in terms of “campaigns,” which are fixed-length periods of spending a certain amount of money to get a certain result. In short, sometimes this ends up being equated to an ad buy and you’ll need to discuss renewing the commitment after some period of time.</p>\n\n<h3 id=\"recruiting\">Recruiting</h3>\n\n<p>As previously mentioned, brand awareness is important to the company for a number of reasons, and one of those is the ability to attract and hire new employees. Even though a good amount of these efforts fall under marketing, some are recruiting-specific. Recruiting departments regularly spend money on sourcers (those folks who email you directly asking if you’d like to apply), software like LinkedIn and Indeed, booths at college job fairs and tech conferences, and swag like t-shirts, cups, and hats. All of this is to say: recruiting spends a lot of money to try and attract job candidates.</p>\n\n<p>Sponsoring an open source project is a good way to attract job candidates. As long as the project does a decent job at promoting its sponsors (and most of them do), your company is likely to get in front of exactly the people who they are looking to hire. Developers know what open source projects they prefer to use, and if they can find a company where they can no only use it but also contribute to it, that’s a big selling point for a job applicant.</p>\n\n<p>I put this as the last option of the four because it tends to be the hardest to get and is also prone to strict timelines after which you’ll have to discuss renewing the contribution. Your manager likely has someone who they work with in recruiting regularly, and so that person is a good place to start the conversation. Going through recruiting will likely take longer than going through other budget items, but it is an option nonetheless.</p>\n\n<h2 id=\"sponsorship-approaches\">Sponsorship approaches</h2>\n\n<p>At this point, you have hopefully identified where in the budget the money for open source sponsorships will come from. The next step is to determine what type of sponsorship your company will make. As with finding money in the budget, there are many approaches that companies take when sponsoring open source projects. You’ll need to find the solution that best matches your company’s culture and approach to open source. Fortunately, there are many options to choose from.</p>\n\n<h3 id=\"monthly-contributions\">Monthly contributions</h3>\n\n<p>Open source projects generally prefer monthly contributions to keep the project funded. If at all possible, getting your company to commit to donating a monthly amount for 12 months gives the project the most financial stability. There are ongoing costs to maintaining an open source project and having a reliable amount of money coming in every month helps the maintainers to plan ahead of time. Platforms like Open Collective and GitHub Sponsors allow you to pledge contributions both monthly and yearly. When specifying a yearly donation, the amount can be set up to be evenly split among the upcoming 12 months.</p>\n\n<p>This option works well if your open source donations are coming from your IT/Software budget item, as most software is billed on either a monthly or yearly basis.</p>\n\n<h3 id=\"open-source-grants\">Open source grants</h3>\n\n<p>For some companies, the idea of donating monthly will not be the best option. It feels like a commitment without an end, and that can be a hard sell. Another approach is to create an open source grant, which is a one-time donation to a project based on some set of criteria. It’s up to the individual companies to determine what those criteria are, and there is no one right way to do it.</p>\n\n<p>Companies like Indeed<sup id=\"fnref:3\"><a href="https://humanwhocodes.com/feeds/\&quot;#fn:3\"" class=\"footnote\">3</a></sup>, Microsoft<sup id=\"fnref:4\"><a href="https://humanwhocodes.com/feeds/\&quot;#fn:4\"" class=\"footnote\">4</a></sup>, and Salesforce<sup id=\"fnref:5\"><a href="https://humanwhocodes.com/feeds/\&quot;#fn:5\"" class=\"footnote\">5</a></sup> have set up Free and Open Source Software (FOSS) Contributor Funds, where the employees who have contributed to open source projects during the quarter are then allowed to nominate and vote for open source projects to receive a one-time donation (typically $10,000). FOSS Contributor Funds tend to be popular within their host companies because they allow the developers themselves to determine which projects are considered for a donation.</p>\n\n<p>Some companies also provide open source grants that must be applied for. Mozilla<sup id=\"fnref:6\"><a href="https://humanwhocodes.com/feeds/\&quot;#fn:6\"" class=\"footnote\">6</a></sup>, the Sloan Foundation<sup id=\"fnref:7\"><a href="https://humanwhocodes.com/feeds/\&quot;#fn:7\"" class=\"footnote\">7</a></sup>, Google<sup id=\"fnref:8\"><a href="https://humanwhocodes.com/feeds/\&quot;#fn:8\"" class=\"footnote\">8</a></sup> <sup id=\"fnref:9\"><a href="https://humanwhocodes.com/feeds/\&quot;#fn:9\"" class=\"footnote\">9</a></sup>, and Comcast<sup id=\"fnref:10\"><a href="https://humanwhocodes.com/feeds/\&quot;#fn:10\"" class=\"footnote\">10</a></sup> have grant programs where anyone is welcome to apply for a one-time grant. The decisions are typically made by a committee who is dedicated to reviewing and choosing grantees.</p>\n\n<p>Grants are a great way to support open source projects if your company isn’t willing or able to provide ongoing monthly support. Grants are less favored by open source projects because there is far less predictability of income, but in the end, any donations are appreciated. There is also a bit of a downside for the company because there is administrative overhead associated with a grant program.</p>\n\n<p>Using grants is more beneficial if you end up using marketing or recruiting budget to fund open source projects because there is a set amount and duration.</p>\n\n<h3 id=\"employee-gift-cards\">Employee gift cards</h3>\n\n<p>Another option that is available exclusively through Open Collective is to give open source gift cards<sup id=\"fnref:11\"><a href="https://humanwhocodes.com/feeds/\&quot;#fn:11\"" class=\"footnote\">11</a></sup> to employees. The gift cards can then be used to fund any project that is on Open Collective. With this approach, the company would transfer some amount of money to Open Collective in a lump sum. Gift cards would then be issued for any number of employees, with each gift card representing a set amount of that lump sum. The employees are then free to use those gift cards to donate directly to any project they want, so long as it is capable of receiving funds through Open Collective.</p>\n\n<p>This can be a nice option for companies who can’t commit to a monthly or yearly donation and who don’t want the overhead of running a grant program.</p>\n\n<h2 id=\"other-things-to-keep-in-mind\">Other things to keep in mind</h2>\n\n<p>There are just a few other notes I’d like to share as your work on convincing your company to sponsor an open source project:</p>\n\n<ul>\n  <li>Don’t expect that you can hand off this initiative to someone else. Your manager is unlikely to take this on as their own task. In every company I’ve worked with to get a donation, the process has been driven to completion by a passionate engineer or group of engineers. You will have more success with a bottom-up approach rather than expecting your manager to make time for it.</li>\n  <li>Leverage existing vendor relationships as much as possible. Getting a vendor approved at your company can require a large amount of effort on its own. Asking the company to onboard several different vendors to allow you to donate to several different projects is unlikely to succeed. Instead, focus your efforts on getting vendor approval for Open Collective and GitHub Sponsors. With Open Collective, you can set up a fund<sup id=\"fnref:12\"><a href="https://humanwhocodes.com/feeds/\&quot;#fn:12\"" class=\"footnote\">12</a></sup> where you can transfer a lump-sum of money and then donate to individual projects from that fund; with GitHub, if your company is already paying for a GitHub organization, you can leverage that relationship by having donations appear on the monthly bill<sup id=\"fnref:13\"><a href="https://humanwhocodes.com/feeds/\&quot;#fn:13\"" class=\"footnote\">13</a></sup>.</li>\n  <li>If your company already donates to an open source foundation, such as the Linux Foundation, they may not realize that those donations to not go directly to projects. For example, ESLint is part of the Open JS Foundation, however the Open JS Foundation does not provide any money directly to ESLint. Open source foundations exist to provide a legal infrastructure and technical resources to projects. These are important, but they are very different from providing funds to the projects. You may need to explain this to your company.</li>\n  <li>Be patient with your company. Especially in large companies, progress is slow and changes happen with persistence over time rather than all at once. If your company has never even considered donating to an open source project then you’ll need to provide a lot of context and get a lot of signoffs. This is completely normal. Don’t take it personally, just realize that giving away money for some unknown benefit is not high on most company’s lists of priorities.</li>\n</ul>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<p>In this post, I’ve explored all of the topics I’m aware of with regards to company open source sponsorships. As I’m sure you realize if you’re read this far, it can take a lot of work to get your company started with donations to open source projects. My own experience has taught me to allow at least six months from first contact until the first donation is made, so patience is key throughout this process.</p>\n\n<p>Making sure you have a good story to tell, finding the budget, and the establishing the structure of the program are the three most important steps in this process. And once all of this has been established for one project, it’s easy to apply to the next project. Indeed, companies tend to increase donations after they’ve accomplished one because the infrastructure is already in place. Establishing your company’s open source sponsorship program is a fixed, upfront cost that then allows less friction for other donations going forward.</p>\n\n<p>My hope is that we are moving towards a time when companies, especially those large corporations, who benefit from using open source software will also start seeing open source sponsorships as part of their core business activities. It’s this software, available for free, that allows small startups to grow into massive multinational companies. It would be nice for more companies to pay it back in some way.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n  <ol>\n    <li id=\"fn:1\">\n      <p><a href="https://humanwhocodes.com/feeds/\&quot;https://opencollective.com\&quot;">Open Collective</a> <a href="https://humanwhocodes.com/feeds/\&quot;#fnref:1\"" class=\"reversefootnote\">&#8617;</a></p>\n    </li>\n    <li id=\"fn:2\">\n      <p><a href="https://humanwhocodes.com/feeds/\&quot;https://github.com/sponsors\&quot;">GitHub Sponsors</a> <a href="https://humanwhocodes.com/feeds/\&quot;#fnref:2\"" class=\"reversefootnote\">&#8617;</a></p>\n    </li>\n    <li id=\"fn:3\">\n      <p><a href="https://humanwhocodes.com/feeds/\&quot;https://opensource.indeedeng.io/FOSS-Contributor-Fund/\&quot;">Indeed FOSS Contributor Fund</a> <a href="https://humanwhocodes.com/feeds/\&quot;#fnref:3\"" class=\"reversefootnote\">&#8617;</a></p>\n    </li>\n    <li id=\"fn:4\">\n      <p><a href="https://humanwhocodes.com/feeds/\&quot;https://github.com/microsoft-sponsorships/microsoft-foss-fund\&quot;">Microsoft’s Free and Open Source Software Fund</a> <a href="https://humanwhocodes.com/feeds/\&quot;#fnref:4\"" class=\"reversefootnote\">&#8617;</a></p>\n    </li>\n    <li id=\"fn:5\">\n      <p><a href="https://humanwhocodes.com/feeds/\&quot;https://engineering.salesforce.com/announcing-the-first-foss-contributor-fund-recipient-60a295201497\&quot;">Announcing the first Salesforce FOSS Contributor Fund Recipient</a> <a href="https://humanwhocodes.com/feeds/\&quot;#fnref:5\"" class=\"reversefootnote\">&#8617;</a></p>\n    </li>\n    <li id=\"fn:6\">\n      <p><a href="https://humanwhocodes.com/feeds/\&quot;https://www.mozilla.org/en-US/moss/\&quot;">Mozilla Open Source Support Awards</a> <a href="https://humanwhocodes.com/feeds/\&quot;#fnref:6\"" class=\"reversefootnote\">&#8617;</a></p>\n    </li>\n    <li id=\"fn:7\">\n      <p><a href="https://humanwhocodes.com/feeds/\&quot;https://sloan.org/programs/digital-technology\&quot;">Sloan Foundation Digital Technology</a> <a href="https://humanwhocodes.com/feeds/\&quot;#fnref:7\"" class=\"reversefootnote\">&#8617;</a></p>\n    </li>\n    <li id=\"fn:8\">\n      <p><a href="https://humanwhocodes.com/feeds/\&quot;https://summerofcode.withgoogle.com/\&quot;">Google Summer of Code</a> <a href="https://humanwhocodes.com/feeds/\&quot;#fnref:8\"" class=\"reversefootnote\">&#8617;</a></p>\n    </li>\n    <li id=\"fn:9\">\n      <p><a href="https://humanwhocodes.com/feeds/\&quot;https://developers.google.com/season-of-docs\&quot;">Google Season of Docs</a> <a href="https://humanwhocodes.com/feeds/\&quot;#fnref:9\"" class=\"reversefootnote\">&#8617;</a></p>\n    </li>\n    <li id=\"fn:10\">\n      <p><a href="https://humanwhocodes.com/feeds/\&quot;https://innovationfund.comcast.com/\&quot;">Comcast Innovation Fund</a> <a href="https://humanwhocodes.com/feeds/\&quot;#fnref:10\"" class=\"reversefootnote\">&#8617;</a></p>\n    </li>\n    <li id=\"fn:11\">\n      <p><a href="https://humanwhocodes.com/feeds/\&quot;https://opencollective.com/gift-cards\&quot;">Open Collective Gift Cards</a> <a href="https://humanwhocodes.com/feeds/\&quot;#fnref:11\"" class=\"reversefootnote\">&#8617;</a></p>\n    </li>\n    <li id=\"fn:12\">\n      <p><a href="https://humanwhocodes.com/feeds/\&quot;https://docs.opencollective.com/help/financial-contributors/organizations/funds\&quot;">Open Collective Funds</a> <a href="https://humanwhocodes.com/feeds/\&quot;#fnref:12\"" class=\"reversefootnote\">&#8617;</a></p>\n    </li>\n    <li id=\"fn:13\">\n      <p><a href="https://humanwhocodes.com/feeds/\&quot;https://github.blog/2020-12-08-new-from-universe-2020-dark-mode-github-sponsors-for-companies-and-more/#companies-can-now-invest-in-open-source-with-github-sponsors\"">Companies can now invest in open source with GitHub Sponsors</a> <a href="https://humanwhocodes.com/feeds/\&quot;#fnref:13\"" class=\"reversefootnote\">&#8617;</a></p>\n    </li>\n  </ol>\n</div>\n",
            "url": "https://humanwhocodes.com/blog/2021/05/talk-to-your-company-sponsoring-open-source/",
            
            
            
            "tags": ["Open Source","Fundraising"],
            
            "date_published": "2021-05-18T00:00:00+00:00",
            "date_modified": "2021-05-18T00:00:00+00:00",
            
                "author": "Nicholas C. Zakas"
            
        },
    
        {
            "id": "https://humanwhocodes.com/blog/2021/04/lazy-loading-property-pattern-javascript/",
            "title": "The lazy-loading property pattern in JavaScript",
            "summary": "Traditionally, developers have created properties inside of JavaScript classes for any data that might be needed within an instance. This isn’t a problem for small pieces of data that are readily available inside of the constructor. However, if some data needs to be calculated before becoming available in the instance, you may not want to pay that cost upfront. For example, consider this class:",
            "content_text": "Traditionally, developers have created properties inside of JavaScript classes for any data that might be needed within an instance. This isn’t a problem for small pieces of data that are readily available inside of the constructor. However, if some data needs to be calculated before becoming available in the instance, you may not want to pay that cost upfront. For example, consider this class:\n\nclass MyClass {\n    constructor() {\n        this.data = someExpensiveComputation();\n    }\n}\n\n\nHere, the data property is created as the result of performing some expensive computation. It may not be efficient to perform that calculation upfront if you aren’t sure the property will be used. Fortunately, there are several ways to defer these operations until later.\n\nThe on-demand property pattern\n\nThe easiest way to optimize performing an expensive operation is to wait until the data is  needed before doing the computation. For example, you could use an accessor property with a getter to do the computation on demand, like this:\n\nclass MyClass {\n    get data() {\n        return someExpensiveComputation();\n    }\n}\n\n\nIn this case, your expensive computation isn’t happening until the first time someone reads the data property, which is an improvement. However, that same expensive computation is performed every time the data property is read, which is worse than previous example where at least the computation was performed just once. This isn’t a good solution, but you can build upon it to create a better one.\n\nThe messy lazy-loading property pattern\n\nOnly performing the computation when the property is accessed is a good start. What you really need is to cache the information after that point and just use the cached version. But where do you cache that information for easy access? The easiest approach is to define a property with the same name and set its value to the computed data, like this:\n\nclass MyClass {\n    get data() {\n        const actualData = someExpensiveComputation();\n\n        Object.defineProperty(this, \"data\", {\n            value: actualData,\n            writable: false,\n            configurable: false,\n            enumerable: false\n        });\n\n        return actualData;\n    }\n}\n\n\nHere, the data property is once again defined as a getter on the class, but this time it caches the result. The call to Object.defineProperty() creates a new property called data that has a fixed value of actualData, and is set to not be writable, configurable, and enumerable (to match the getter). After that, the value itself is returned. The next time the data property is accessed, it will be reading from the newly created property rather than calling the getter:\n\nconst object = new MyClass();\n\n// calls the getter\nconst data1 = object.data;\n\n// reads from the data property\nconst data2 = object.data;\n\n\nEffectively, all of the computation is done only the first time the data property is read. Each subsequent read of the data property is returning the cached the version.\n\nThe one downside to this pattern is that the data property starts out as a non-enumerable prototype property and ends up as a non-enumerable own property:\n\nconst object = new MyClass();\nconsole.log(object.hasOwnProperty(\"data\"));     // false\n\nconst data = object.data;\nconsole.log(object.hasOwnProperty(\"data\"));     // true\n\n\nWhile this distinction isn’t important in many cases, it is an important thing to understand about this pattern as it can cause subtle issues when the object is passed around. Fortunately, it’s easy to address this with an updated pattern.\n\nThe only-own lazy-loading property pattern for classes\n\nIf you have a use case where it’s important for the lazy-loaded property to always exist on the instance, then you can using Object.defineProperty() to create the property inside of the class constructor. It’s a little bit messier than the previous example, but it will ensure that the property only ever exists on the instance. Here’s an example:\n\nclass MyClass {\n    constructor() {\n\n        Object.defineProperty(this, \"data\", {\n            get() {\n                const actualData = someExpensiveComputation();\n\n                Object.defineProperty(this, \"data\", {\n                    value: actualData,\n                    writable: false,\n                    configurable: false\n                });\n\n                return actualData;\n            },\n            configurable: true,\n            enumerable: true\n        });\n\n    }\n}\n\n\nHere, the constructor creates the data accessor property using Object.defineProperty(). The property is created on the instance (by using this) and defines a getter as well as specifying the property to be enumerable and configurable (typical of own properties). It’s particularly important to set the data property as configurable so you can call Object.defineProperty() on it again.\n\nThe getter function then does the computation and calls Object.defineProperty() a second time. The data property is now redefined as a data property with a specific value and is made non-writable and non-configurable to protect the final data. Then, the computed data is returned from the getter. The next time the data property is read, it will read from the stored value. As a bonus, the data property now only ever exists as an own property and acts the same both before and after the first read:\n\nconst object = new MyClass();\nconsole.log(object.hasOwnProperty(\"data\"));     // true\n\nconst data = object.data;\nconsole.log(object.hasOwnProperty(\"data\"));     // true\n\n\nFor classes, this is most likely the pattern you want to use; object literals, on the other hand, can use a simpler approach.\n\nThe lazy-loading property pattern for object literals\n\nIf you are using an object literal instead of a class, the process is much simpler because getters defined on object literals are defined as enumerable own properties (not prototype properties) just like data properties. That means you can use the messy lazy-loading property pattern for classes without being messy:\n\nconst object = {\n    get data() {\n        const actualData = someExpensiveComputation();\n\n        Object.defineProperty(this, \"data\", {\n            value: actualData,\n            writable: false,\n            configurable: false,\n            enumerable: false\n        });\n\n        return actualData;\n    }\n};\n\nconsole.log(object.hasOwnProperty(\"data\"));     // true\n\nconst data = object.data;\nconsole.log(object.hasOwnProperty(\"data\"));     // true\n\n\nConclusion\n\nThe ability to redefine object properties in JavaScript allows a unique opportunity to cache information that may be expensive to compute. By starting out with an accessor property that is redefined as a data property, you can defer computation until the first time a property is read and then cache the result for later use. This approach works both for classes and for object literals, and is a bit simpler in object literals because you don’t have to worry about your getter ending up on the prototype.\n\nOne of the best ways to improve performance is to avoid doing the same work twice, so any time you can cache a result for use later, you’ll speed up your program. Techniques like the lazy-loading property pattern allow any property to become a caching layer to improve performance.\n",
            "content_html": "<p>Traditionally, developers have created properties inside of JavaScript classes for any data that might be needed within an instance. This isn’t a problem for small pieces of data that are readily available inside of the constructor. However, if some data needs to be calculated before becoming available in the instance, you may not want to pay that cost upfront. For example, consider this class:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">class</span> <span class=\"nx\">MyClass</span> <span class=\"p\">{</span>\n    <span class=\"kd\">constructor</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">data</span> <span class=\"o\">=</span> <span class=\"nx\">someExpensiveComputation</span><span class=\"p\">();</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>Here, the <code class=\"highlighter-rouge\">data</code> property is created as the result of performing some expensive computation. It may not be efficient to perform that calculation upfront if you aren’t sure the property will be used. Fortunately, there are several ways to defer these operations until later.</p>\n\n<h2 id=\"the-on-demand-property-pattern\">The on-demand property pattern</h2>\n\n<p>The easiest way to optimize performing an expensive operation is to wait until the data is  needed before doing the computation. For example, you could use an accessor property with a getter to do the computation on demand, like this:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">class</span> <span class=\"nx\">MyClass</span> <span class=\"p\">{</span>\n    <span class=\"kd\">get</span> <span class=\"nx\">data</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"nx\">someExpensiveComputation</span><span class=\"p\">();</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>In this case, your expensive computation isn’t happening until the first time someone reads the <code class=\"highlighter-rouge\">data</code> property, which is an improvement. However, that same expensive computation is performed every time the <code class=\"highlighter-rouge\">data</code> property is read, which is worse than previous example where at least the computation was performed just once. This isn’t a good solution, but you can build upon it to create a better one.</p>\n\n<h2 id=\"the-messy-lazy-loading-property-pattern\">The messy lazy-loading property pattern</h2>\n\n<p>Only performing the computation when the property is accessed is a good start. What you really need is to cache the information after that point and just use the cached version. But where do you cache that information for easy access? The easiest approach is to define a property with the same name and set its value to the computed data, like this:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">class</span> <span class=\"nx\">MyClass</span> <span class=\"p\">{</span>\n    <span class=\"kd\">get</span> <span class=\"nx\">data</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"kd\">const</span> <span class=\"nx\">actualData</span> <span class=\"o\">=</span> <span class=\"nx\">someExpensiveComputation</span><span class=\"p\">();</span>\n\n        <span class=\"nb\">Object</span><span class=\"p\">.</span><span class=\"nx\">defineProperty</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">data</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n            <span class=\"na\">value</span><span class=\"p\">:</span> <span class=\"nx\">actualData</span><span class=\"p\">,</span>\n            <span class=\"na\">writable</span><span class=\"p\">:</span> <span class=\"kc\">false</span><span class=\"p\">,</span>\n            <span class=\"na\">configurable</span><span class=\"p\">:</span> <span class=\"kc\">false</span><span class=\"p\">,</span>\n            <span class=\"na\">enumerable</span><span class=\"p\">:</span> <span class=\"kc\">false</span>\n        <span class=\"p\">});</span>\n\n        <span class=\"k\">return</span> <span class=\"nx\">actualData</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>Here, the <code class=\"highlighter-rouge\">data</code> property is once again defined as a getter on the class, but this time it caches the result. The call to <code class=\"highlighter-rouge\">Object.defineProperty()</code> creates a new property called <code class=\"highlighter-rouge\">data</code> that has a fixed value of <code class=\"highlighter-rouge\">actualData</code>, and is set to not be writable, configurable, and enumerable (to match the getter). After that, the value itself is returned. The next time the <code class=\"highlighter-rouge\">data</code> property is accessed, it will be reading from the newly created property rather than calling the getter:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">const</span> <span class=\"nx\">object</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">MyClass</span><span class=\"p\">();</span>\n\n<span class=\"c1\">// calls the getter</span>\n<span class=\"kd\">const</span> <span class=\"nx\">data1</span> <span class=\"o\">=</span> <span class=\"nx\">object</span><span class=\"p\">.</span><span class=\"nx\">data</span><span class=\"p\">;</span>\n\n<span class=\"c1\">// reads from the data property</span>\n<span class=\"kd\">const</span> <span class=\"nx\">data2</span> <span class=\"o\">=</span> <span class=\"nx\">object</span><span class=\"p\">.</span><span class=\"nx\">data</span><span class=\"p\">;</span>\n</code></pre></div></div>\n\n<p>Effectively, all of the computation is done only the first time the <code class=\"highlighter-rouge\">data</code> property is read. Each subsequent read of the <code class=\"highlighter-rouge\">data</code> property is returning the cached the version.</p>\n\n<p>The one downside to this pattern is that the <code class=\"highlighter-rouge\">data</code> property starts out as a non-enumerable prototype property and ends up as a non-enumerable own property:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">const</span> <span class=\"nx\">object</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">MyClass</span><span class=\"p\">();</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">object</span><span class=\"p\">.</span><span class=\"nx\">hasOwnProperty</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">data</span><span class=\"dl\">\"</span><span class=\"p\">));</span>     <span class=\"c1\">// false</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">data</span> <span class=\"o\">=</span> <span class=\"nx\">object</span><span class=\"p\">.</span><span class=\"nx\">data</span><span class=\"p\">;</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">object</span><span class=\"p\">.</span><span class=\"nx\">hasOwnProperty</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">data</span><span class=\"dl\">\"</span><span class=\"p\">));</span>     <span class=\"c1\">// true</span>\n</code></pre></div></div>\n\n<p>While this distinction isn’t important in many cases, it is an important thing to understand about this pattern as it can cause subtle issues when the object is passed around. Fortunately, it’s easy to address this with an updated pattern.</p>\n\n<h2 id=\"the-only-own-lazy-loading-property-pattern-for-classes\">The only-own lazy-loading property pattern for classes</h2>\n\n<p>If you have a use case where it’s important for the lazy-loaded property to always exist on the instance, then you can using <code class=\"highlighter-rouge\">Object.defineProperty()</code> to create the property inside of the class constructor. It’s a little bit messier than the previous example, but it will ensure that the property only ever exists on the instance. Here’s an example:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">class</span> <span class=\"nx\">MyClass</span> <span class=\"p\">{</span>\n    <span class=\"kd\">constructor</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n\n        <span class=\"nb\">Object</span><span class=\"p\">.</span><span class=\"nx\">defineProperty</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">data</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n            <span class=\"kd\">get</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n                <span class=\"kd\">const</span> <span class=\"nx\">actualData</span> <span class=\"o\">=</span> <span class=\"nx\">someExpensiveComputation</span><span class=\"p\">();</span>\n\n                <span class=\"nb\">Object</span><span class=\"p\">.</span><span class=\"nx\">defineProperty</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">data</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n                    <span class=\"na\">value</span><span class=\"p\">:</span> <span class=\"nx\">actualData</span><span class=\"p\">,</span>\n                    <span class=\"na\">writable</span><span class=\"p\">:</span> <span class=\"kc\">false</span><span class=\"p\">,</span>\n                    <span class=\"na\">configurable</span><span class=\"p\">:</span> <span class=\"kc\">false</span>\n                <span class=\"p\">});</span>\n\n                <span class=\"k\">return</span> <span class=\"nx\">actualData</span><span class=\"p\">;</span>\n            <span class=\"p\">},</span>\n            <span class=\"na\">configurable</span><span class=\"p\">:</span> <span class=\"kc\">true</span><span class=\"p\">,</span>\n            <span class=\"na\">enumerable</span><span class=\"p\">:</span> <span class=\"kc\">true</span>\n        <span class=\"p\">});</span>\n\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>Here, the constructor creates the <code class=\"highlighter-rouge\">data</code> accessor property using <code class=\"highlighter-rouge\">Object.defineProperty()</code>. The property is created on the instance (by using <code class=\"highlighter-rouge\">this</code>) and defines a getter as well as specifying the property to be enumerable and configurable (typical of own properties). It’s particularly important to set the <code class=\"highlighter-rouge\">data</code> property as configurable so you can call <code class=\"highlighter-rouge\">Object.defineProperty()</code> on it again.</p>\n\n<p>The getter function then does the computation and calls <code class=\"highlighter-rouge\">Object.defineProperty()</code> a second time. The <code class=\"highlighter-rouge\">data</code> property is now redefined as a data property with a specific value and is made non-writable and non-configurable to protect the final data. Then, the computed data is returned from the getter. The next time the <code class=\"highlighter-rouge\">data</code> property is read, it will read from the stored value. As a bonus, the <code class=\"highlighter-rouge\">data</code> property now only ever exists as an own property and acts the same both before and after the first read:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">const</span> <span class=\"nx\">object</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">MyClass</span><span class=\"p\">();</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">object</span><span class=\"p\">.</span><span class=\"nx\">hasOwnProperty</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">data</span><span class=\"dl\">\"</span><span class=\"p\">));</span>     <span class=\"c1\">// true</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">data</span> <span class=\"o\">=</span> <span class=\"nx\">object</span><span class=\"p\">.</span><span class=\"nx\">data</span><span class=\"p\">;</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">object</span><span class=\"p\">.</span><span class=\"nx\">hasOwnProperty</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">data</span><span class=\"dl\">\"</span><span class=\"p\">));</span>     <span class=\"c1\">// true</span>\n</code></pre></div></div>\n\n<p>For classes, this is most likely the pattern you want to use; object literals, on the other hand, can use a simpler approach.</p>\n\n<h2 id=\"the-lazy-loading-property-pattern-for-object-literals\">The lazy-loading property pattern for object literals</h2>\n\n<p>If you are using an object literal instead of a class, the process is much simpler because getters defined on object literals are defined as enumerable own properties (not prototype properties) just like data properties. That means you can use the messy lazy-loading property pattern for classes without being messy:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">const</span> <span class=\"nx\">object</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"kd\">get</span> <span class=\"nx\">data</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"kd\">const</span> <span class=\"nx\">actualData</span> <span class=\"o\">=</span> <span class=\"nx\">someExpensiveComputation</span><span class=\"p\">();</span>\n\n        <span class=\"nb\">Object</span><span class=\"p\">.</span><span class=\"nx\">defineProperty</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">data</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n            <span class=\"na\">value</span><span class=\"p\">:</span> <span class=\"nx\">actualData</span><span class=\"p\">,</span>\n            <span class=\"na\">writable</span><span class=\"p\">:</span> <span class=\"kc\">false</span><span class=\"p\">,</span>\n            <span class=\"na\">configurable</span><span class=\"p\">:</span> <span class=\"kc\">false</span><span class=\"p\">,</span>\n            <span class=\"na\">enumerable</span><span class=\"p\">:</span> <span class=\"kc\">false</span>\n        <span class=\"p\">});</span>\n\n        <span class=\"k\">return</span> <span class=\"nx\">actualData</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">};</span>\n\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">object</span><span class=\"p\">.</span><span class=\"nx\">hasOwnProperty</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">data</span><span class=\"dl\">\"</span><span class=\"p\">));</span>     <span class=\"c1\">// true</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">data</span> <span class=\"o\">=</span> <span class=\"nx\">object</span><span class=\"p\">.</span><span class=\"nx\">data</span><span class=\"p\">;</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">object</span><span class=\"p\">.</span><span class=\"nx\">hasOwnProperty</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">data</span><span class=\"dl\">\"</span><span class=\"p\">));</span>     <span class=\"c1\">// true</span>\n</code></pre></div></div>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<p>The ability to redefine object properties in JavaScript allows a unique opportunity to cache information that may be expensive to compute. By starting out with an accessor property that is redefined as a data property, you can defer computation until the first time a property is read and then cache the result for later use. This approach works both for classes and for object literals, and is a bit simpler in object literals because you don’t have to worry about your getter ending up on the prototype.</p>\n\n<p>One of the best ways to improve performance is to avoid doing the same work twice, so any time you can cache a result for use later, you’ll speed up your program. Techniques like the lazy-loading property pattern allow any property to become a caching layer to improve performance.</p>\n",
            "url": "https://humanwhocodes.com/blog/2021/04/lazy-loading-property-pattern-javascript/",
            
            
            
            "tags": ["JavaScript","Design Patterns"],
            
            "date_published": "2021-04-20T00:00:00+00:00",
            "date_modified": "2021-04-20T00:00:00+00:00",
            
                "author": "Nicholas C. Zakas"
            
        },
    
        {
            "id": "https://humanwhocodes.com/blog/2021/03/two-approaches-win-argument-software-engineer/",
            "title": "Two approaches to win an argument as a software engineer",
            "summary": "If you’ve spent any time developing software professionally and then you are probably used to the spirited debates that take place between software engineers as well as between software engineers and management, design, and product. Software engineers are not known for being shy about their opinions on any particular subject, and especially when it comes to the company they work for or the software they work on. However, many software engineers are not good at convincing others of their position. The fundamental problem is in the approach.",
            "content_text": "If you’ve spent any time developing software professionally and then you are probably used to the spirited debates that take place between software engineers as well as between software engineers and management, design, and product. Software engineers are not known for being shy about their opinions on any particular subject, and especially when it comes to the company they work for or the software they work on. However, many software engineers are not good at convincing others of their position. The fundamental problem is in the approach.\n\nWhen trying to convince someone that their position is correct, software engineers tend to default to a data transfer methodology: I have arrived at my position due to the state of data in my brain and so to convince you I will now attempt to transfer that state to your brain. The problem is, not everyone’s brain works the same way, so attempting to transfer that state is inefficient and can result in duplicating errors. Unfortunately, there are no checksums to fall back on.\n\nAnother approach software engineers try is an approach based on trust. If you trust me, then you should trust that what I say is true and should therefore agree with my recommendation. This approach is actually a power play where you believe that your clout is enough that people should have blind faith in you. This only works some of the time for some people and generally leaves everyone feeling resentful. You don’t want to steamroll your team members, you want collaboration.\n\nSo if data transfer and trust won’t work, what is left? The simple answer is to create a separate pool of data that exists outside of your brain. This “outside data” needs to be presented in a way that others can understand, so you are meeting together in the middle rather than trying to project your internal state to someone else.\n\nThat probably sounds very wordy, so let me break it down to two approaches: argue with data and argue with code.\n\nApproach 1: Prove something is true with data\n\nIf you want to prove that something is true, which is to say that the thing you’re promoting is both factual and accurate, then the only way to win this argument is to gather data to illustrate the fact. For example, each of these statements may or may not be true on a project:\n\n\n  Switching to another framework will improve performance\n  Our algorithm is more error prone than others so we should change it\n  We waste a lot of time on repetitive tasks\n\n\nStatements like these tend to start out as opinion and often don’t go any further, which leads to arguments of opinion. Opinion arguments can’t be won because, by definition, an opinion cannot be wrong. The only way to resolve this type of dispute is with data.\n\nFirst, get specific and define all of your terms. What is it you are actually claiming? Taking the first statement, what does it mean to “improve performance?” Are you talking about reducing page load time? Or maybe reducing CPU utilization on a virtual machine? Or maybe using less memory? Be as specific as possible about what you are proposing as a fact.\n\nSecond, ask yourself what kind of data would prove your point? Have other companies published data showing the performance improvement between the framework you’re using and the one you’re proposing? Again, are you looking for page load time, CPU utilization, memory utilization, or something else? What numbers would make your point?\n\nThird, do you already have the data you need or do you need to collect it? Some companies collect a lot of data about their software and operations; some do not. To get the data you need, you may need to add some instrumentation, or dive into your analytics system, or find tech talks or research papers. You need to find a source of data that is separate from you to make your point.\n\nKeep in mind that data can be quantitative (measured values) or qualitative (opinions). While quantitative data is always preferable, it’s not always possible. In those moments, qualitative data can still win the argument. If you’re trying to prove that the team is wasting a lot of time on repetitive tasks, your best bet may be to have everyone on the team fill out a survey asking questions about the tasks they’re doing and if they are frustrated by them.\n\nLast, present the data in a format that anyone can understand. Oftentimes, putting together a simple slide deck is still the easiest way to convince others (especially in management) that something is true. Just make sure you give people the time and space to consume the data you’ve presented before pushing for a decision.\n\nThe most important thing about this approach is that you are gathering data that exists outside of your brain and can easily be shared with others.\n\nApproach 2: Prove something is possible with code\n\nIf you want to prove that something is possible, then the only way to win this argument is with code. It always surprises me when I find two software engineers arguing with each other over whether something is possible when it might take an hour to write some code and settle the issue permanently. It doesn’t make sense to argue over something that can be proven, beyond all doubt, by writing code. Here are some example statements that can probably be proved with code:\n\n\n  We can make the list scroll infinitely\n  It’s possible to write a complex query with one request\n  Switching to another framework will improve performance\n\n\nBack when I was a young web developer, when people proposed an infinitely-scrolling list I thought they were crazy. It would never be smooth, it would never be fast enough, it would crash the browser due to memory limits. But then I saw the first demo of an infinitely-scrolling list that was smooth and didn’t crash the browser, and that was it. No more argument from my side. Just because I couldn’t figure out how to do it didn’t mean it wasn’t possible. If you’re in a position where you are arguing something is possible, go ahead and create it (or a reasonable prototype); if you are unwilling or unable to write the code, then it’s time to drop the argument.\n\nOne last point: that last statement looks familiar, doesn’t it? Yes, sometimes the same statement needs both data and code to win the argument. In this case, you might need to gather data to prove that performance is a problem and then also write some code to show that switching to the new framework will improve those numbers. You are actually trying to prove two things: 1) the performance is a problem and 2) switching to the new framework addresses the problem. The combination approach works exceedingly well in software engineering because so much of the work is about making changes and measuring the effect of those changes.\n\nConclusion\n\nArguing your point is an expected part of being a software engineer. It is fine to have opinions about everything, but if you are attempting to convince someone that your position is correct in order to make some change, then you owe it to them and to yourself to make sure you are correct. You shouldn’t expect people to blindly follow your opinions; you should expect to need to produce data, code, or some combination of the two to convince others. The willingness to do the research, data crunch, write code, or otherwise dig into the problem is what will ultimately convince others of your position.\n\nNo matter what kind of work-related argument you are trying to win, remember to argue with data and argue with code.\n",
            "content_html": "<p>If you’ve spent any time developing software professionally and then you are probably used to the spirited debates that take place between software engineers as well as between software engineers and management, design, and product. Software engineers are not known for being shy about their opinions on any particular subject, and especially when it comes to the company they work for or the software they work on. However, many software engineers are not good at convincing others of their position. The fundamental problem is in the approach.</p>\n\n<p>When trying to convince someone that their position is correct, software engineers tend to default to a data transfer methodology: I have arrived at my position due to the state of data in my brain and so to convince you I will now attempt to transfer that state to your brain. The problem is, not everyone’s brain works the same way, so attempting to transfer that state is inefficient and can result in duplicating errors. Unfortunately, there are no checksums to fall back on.</p>\n\n<p>Another approach software engineers try is an approach based on trust. If you trust me, then you should trust that what I say is true and should therefore agree with my recommendation. This approach is actually a power play where you believe that your clout is enough that people should have blind faith in you. This only works some of the time for some people and generally leaves everyone feeling resentful. You don’t want to steamroll your team members, you want collaboration.</p>\n\n<p>So if data transfer and trust won’t work, what is left? The simple answer is to create a separate pool of data that exists outside of your brain. This “outside data” needs to be presented in a way that others can understand, so you are meeting together in the middle rather than trying to project your internal state to someone else.</p>\n\n<p>That probably sounds very wordy, so let me break it down to two approaches: <em>argue with data</em> and <em>argue with code</em>.</p>\n\n<h2 id=\"approach-1-prove-something-is-true-with-data\">Approach 1: Prove something is <em>true</em> with data</h2>\n\n<p>If you want to prove that something is <em>true</em>, which is to say that the thing you’re promoting is both factual and accurate, then the only way to win this argument is to gather data to illustrate the fact. For example, each of these statements may or may not be true on a project:</p>\n\n<ol>\n  <li>Switching to another framework will improve performance</li>\n  <li>Our algorithm is more error prone than others so we should change it</li>\n  <li>We waste a lot of time on repetitive tasks</li>\n</ol>\n\n<p>Statements like these tend to start out as opinion and often don’t go any further, which leads to arguments of opinion. Opinion arguments can’t be won because, by definition, an opinion cannot be wrong. The only way to resolve this type of dispute is with data.</p>\n\n<p>First, get specific and define all of your terms. What is it you are actually claiming? Taking the first statement, what does it mean to “improve performance?” Are you talking about reducing page load time? Or maybe reducing CPU utilization on a virtual machine? Or maybe using less memory? Be as specific as possible about what you are proposing as a fact.</p>\n\n<p>Second, ask yourself what kind of data would prove your point? Have other companies published data showing the performance improvement between the framework you’re using and the one you’re proposing? Again, are you looking for page load time, CPU utilization, memory utilization, or something else? What numbers would make your point?</p>\n\n<p>Third, do you already have the data you need or do you need to collect it? Some companies collect a lot of data about their software and operations; some do not. To get the data you need, you may need to add some instrumentation, or dive into your analytics system, or find tech talks or research papers. You need to find a source of data that is separate from you to make your point.</p>\n\n<p>Keep in mind that data can be quantitative (measured values) or qualitative (opinions). While quantitative data is always preferable, it’s not always possible. In those moments, qualitative data can still win the argument. If you’re trying to prove that the team is wasting a lot of time on repetitive tasks, your best bet may be to have everyone on the team fill out a survey asking questions about the tasks they’re doing and if they are frustrated by them.</p>\n\n<p>Last, present the data in a format that anyone can understand. Oftentimes, putting together a simple slide deck is still the easiest way to convince others (especially in management) that something is true. Just make sure you give people the time and space to consume the data you’ve presented before pushing for a decision.</p>\n\n<p>The most important thing about this approach is that you are gathering data that exists outside of your brain and can easily be shared with others.</p>\n\n<h2 id=\"approach-2-prove-something-is-possible-with-code\">Approach 2: Prove something is <em>possible</em> with code</h2>\n\n<p>If you want to prove that something is <em>possible</em>, then the only way to win this argument is with code. It always surprises me when I find two software engineers arguing with each other over whether something is possible when it might take an hour to write some code and settle the issue permanently. It doesn’t make sense to argue over something that can be proven, beyond all doubt, by writing code. Here are some example statements that can probably be proved with code:</p>\n\n<ol>\n  <li>We can make the list scroll infinitely</li>\n  <li>It’s possible to write a complex query with one request</li>\n  <li>Switching to another framework will improve performance</li>\n</ol>\n\n<p>Back when I was a young web developer, when people proposed an infinitely-scrolling list I thought they were crazy. It would never be smooth, it would never be fast enough, it would crash the browser due to memory limits. But then I saw the first demo of an infinitely-scrolling list that was smooth and didn’t crash the browser, and that was it. No more argument from my side. Just because I couldn’t figure out how to do it didn’t mean it wasn’t possible. If you’re in a position where you are arguing something is possible, go ahead and create it (or a reasonable prototype); if you are unwilling or unable to write the code, then it’s time to drop the argument.</p>\n\n<p>One last point: that last statement looks familiar, doesn’t it? Yes, sometimes the same statement needs both data and code to win the argument. In this case, you might need to gather data to prove that performance is a problem and then also write some code to show that switching to the new framework will improve those numbers. You are actually trying to prove two things: 1) the performance is a problem and 2) switching to the new framework addresses the problem. The combination approach works exceedingly well in software engineering because so much of the work is about making changes and measuring the effect of those changes.</p>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<p>Arguing your point is an expected part of being a software engineer. It is fine to have opinions about everything, but if you are attempting to convince someone that your position is correct in order to make some change, then you owe it to them and to yourself to make sure you are correct. You shouldn’t expect people to blindly follow your opinions; you should expect to need to produce data, code, or some combination of the two to convince others. The willingness to do the research, data crunch, write code, or otherwise dig into the problem is what will ultimately convince others of your position.</p>\n\n<p>No matter what kind of work-related argument you are trying to win, remember to argue with data and argue with code.</p>\n",
            "url": "https://humanwhocodes.com/blog/2021/03/two-approaches-win-argument-software-engineer/",
            
            
            
            "tags": ["Communication","Work","Skills"],
            
            "date_published": "2021-03-16T00:00:00+00:00",
            "date_modified": "2021-03-16T00:00:00+00:00",
            
                "author": "Nicholas C. Zakas"
            
        },
    
        {
            "id": "https://humanwhocodes.com/blog/2021/02/introducing-env-javascript-environment-variables/",
            "title": "Introducing Env: a better way to read environment variables in JavaScript",
            "summary": "If you write server-side JavaScript, chances are you’ve need to read information from environment variables. It’s considered a best practice to share sensitive information, such as access tokens, inside of environment variables to keep them secure. However, the way environment variables are read from JavaScript is error-prone in subtle ways that might take you hours to figure out. When an error occurs reading an environment variable, you want to know immediately, and you don’t want to interpret cryptic error messages. That’s where Env comes in.",
            "content_text": "If you write server-side JavaScript, chances are you’ve need to read information from environment variables. It’s considered a best practice to share sensitive information, such as access tokens, inside of environment variables to keep them secure. However, the way environment variables are read from JavaScript is error-prone in subtle ways that might take you hours to figure out. When an error occurs reading an environment variable, you want to know immediately, and you don’t want to interpret cryptic error messages. That’s where Env comes in.\n\nInstalling Env\n\nEnv1 is a zero-dependency utility designed to make reading environment variables safer and less error-prone. It does this by addressing the root causes of environment variable-related errors in server-side JavaScript. It works in both Node.js and Deno, and automatically reads environment variables from the correct location based on the runtime being used.\n\nTo use Env in Node.js, install it with npm:\n\n$ npm install @humanwhocodes/env\n\n\nAnd then import the Env constructor:\n\nimport { Env } from \"@humanwhocodes/env\";\n\n// or\n\nconst { Env } = require(\"@humanwhocodes/env\");\n\n\nTo use Env in Deno, reference it from Skypack:\n\nimport { Env } from \"https://cdn.skypack.dev/@humanwhocodes/env?dts\";\n\n\nOnce you have the Env constructor, you can create a new instance like this:\n\nconst env = new Env();\n\n\nAnd now you’re ready to read environment variables safely.\n\nProblem #1: Missing environment variables\n\nThe first problem Env addresses is how to deal with missing environment variables. It’s quite common for environment variables to go missing either because they were accidentally not set up correctly or because they only exist on some containers and not all. In any case, you want to handle missing environment variables seamlessly. In Node.js, you might do something like this:\n\nconst USERNAME = process.env.USERNAME || \"guest\";\n\n\nThe intent here is to use the USERNAME environment variable if present, and if not, default to \"guest\". Env streamlines this to make setting defaults clear:\n\nconst USERNAME = env.get(\"USERNAME\", \"guest\");\n\n\nThis code has the same effect but avoids any type coercion in the process. Of course, this assumes it’s okay for USERNAME to be missing. But what if you absolutely need an environment variable present in order for your application to work? For that, you might write some code like this:\n\nconst USERNAME = process.env.USERNAME;\nif (!USERNAME) {\n    throw new Error(\"Environment variable USERNAME is missing.\");\n}\n\n\nThat’s a lot of code for some simple validation, and if you have several required environment variables, you’ll end up repeating this pattern for each one. With Env, you can use the require() method:\n\nconst USERNAME = env.require(\"USERNAME\");\n\n\nIf the environment variable USERNAME is missing in this example, then an error is thrown telling you so. You can also use the required property in a similar way:\n\nconst USERNAME = env.required.USERNAME;\n\n\nThis syntax allows you to avoid typing a string but will still throw an error if USERNAME is not present.\n\nProblem #2: Typos\n\nAnother type of error that is common with environment variables are typos. Typos can be hard to spot when you are typing the same thing multiple times. For example, you might type something like this:\n\nconst USERNAME = process.env.USERRNAME;\n\n\nPersonally, I’ve spent hours tracking down bugs related to my incorrectly typing the name of the environment variable in my code. For whatever reason, I type the name of the variable correctly but not the environment variable name. If you want your JavaScript variables to have the same name as some required environment variables, you can use destructuring of the required property to only type the name once:\n\nconst {\n    PORT,\n    HOST\n} = env.required;\n\n\nHere, two local variables, PORT and HOST, are created from the environment variables of the same name. If either environment variable is missing, an error is thrown.\n\nProblem #3: Type mismatches\n\nAnother subtle type of error with environment variables are type mismatches. For instance, consider the following Node.js code:\n\nconst PORT = process.env.PORT || 8080;\n\n\nThis line, or something similar, appears in a lot of Node.js applications. Most of the time it doesn’t cause an issue…but it could. Can you spot the problem?\n\nAll environment variables are strings, so the JavaScript variable PORT is a string when the environment variable is present and a number if not. Using similar code in Deno threw an error2 that took me a while to figure out. It turned out that the Deno HTTP server required the port to be a number, so it worked fine locally but when I deployed it to Cloud Run, I received an error.\n\nTo solve this problem, Env converts all default values into strings automatically:\n\nconst PORT = env.get(\"PORT\", 8080);\nconsole.log(typeof PORT === \"string\");      // always true\n\n\nEven if you pass in a non-string value as the default, Env will convert it to a string to ensure that you only ever receive a string value when reading environment variables.\n\nProblem #4: Fallback variables\n\nSometimes you might want to check several environment variables and only use a default if none of the environment variables are present. So you might have code that looks like this:\n\nconst PORT = process.env.PORT || process.env.HTTP_PORT || 8080;\n\n\nYou can make that a bit clearer using Env:\n\nconst PORT = env.first([\"PORT\", \"HTTP_PORT\"], 8080);\n\n\nUsing this code, Env returns a value from the first environment variable it finds. Similar to get(), first() allows you to pass in a default value to use if none of the environment variables are found, and that default value is automatically converted to a string. As an added error check, if the first argument isn’t an array or is an array with only one item, then an error is thrown.\n\nConclusion\n\nEnv is one of those utilities that has been so valuable to me that I sometimes forget to mention it. I’ve been using it in a number of personal projects for the past two years and it’s saved me a lot of time. Debugging errors related to environment variables isn’t anyone’s idea of fun, and I can’t count the times where I’ve been saved by an Env error. I hope you find it helpful, as well.\n\n\n  \n    \n      Env &#8617;\n    \n    \n      serve() error: “Uncaught InvalidData” &#8617;\n    \n  \n\n",
            "content_html": "<p>If you write server-side JavaScript, chances are you’ve need to read information from environment variables. It’s considered a best practice to share sensitive information, such as access tokens, inside of environment variables to keep them secure. However, the way environment variables are read from JavaScript is error-prone in subtle ways that might take you hours to figure out. When an error occurs reading an environment variable, you want to know immediately, and you don’t want to interpret cryptic error messages. That’s where Env comes in.</p>\n\n<h2 id=\"installing-env\">Installing Env</h2>\n\n<p>Env<sup id=\"fnref:1\"><a href="https://humanwhocodes.com/feeds/\&quot;#fn:1\"" class=\"footnote\">1</a></sup> is a zero-dependency utility designed to make reading environment variables safer and less error-prone. It does this by addressing the root causes of environment variable-related errors in server-side JavaScript. It works in both Node.js and Deno, and automatically reads environment variables from the correct location based on the runtime being used.</p>\n\n<p>To use Env in Node.js, install it with npm:</p>\n\n<div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>$ npm install @humanwhocodes/env\n</code></pre></div></div>\n\n<p>And then import the <code class=\"highlighter-rouge\">Env</code> constructor:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">Env</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">\"</span><span class=\"s2\">@humanwhocodes/env</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n\n<span class=\"c1\">// or</span>\n\n<span class=\"kd\">const</span> <span class=\"p\">{</span> <span class=\"nx\">Env</span> <span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">@humanwhocodes/env</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n</code></pre></div></div>\n\n<p>To use Env in Deno, reference it from Skypack:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">Env</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">\"</span><span class=\"s2\">https://cdn.skypack.dev/@humanwhocodes/env?dts</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n</code></pre></div></div>\n\n<p>Once you have the <code class=\"highlighter-rouge\">Env</code> constructor, you can create a new instance like this:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">const</span> <span class=\"nx\">env</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">Env</span><span class=\"p\">();</span>\n</code></pre></div></div>\n\n<p>And now you’re ready to read environment variables safely.</p>\n\n<h2 id=\"problem-1-missing-environment-variables\">Problem #1: Missing environment variables</h2>\n\n<p>The first problem Env addresses is how to deal with missing environment variables. It’s quite common for environment variables to go missing either because they were accidentally not set up correctly or because they only exist on some containers and not all. In any case, you want to handle missing environment variables seamlessly. In Node.js, you might do something like this:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">const</span> <span class=\"nx\">USERNAME</span> <span class=\"o\">=</span> <span class=\"nx\">process</span><span class=\"p\">.</span><span class=\"nx\">env</span><span class=\"p\">.</span><span class=\"nx\">USERNAME</span> <span class=\"o\">||</span> <span class=\"dl\">\"</span><span class=\"s2\">guest</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n</code></pre></div></div>\n\n<p>The intent here is to use the <code class=\"highlighter-rouge\">USERNAME</code> environment variable if present, and if not, default to <code class=\"highlighter-rouge\">\"guest\"</code>. Env streamlines this to make setting defaults clear:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">const</span> <span class=\"nx\">USERNAME</span> <span class=\"o\">=</span> <span class=\"nx\">env</span><span class=\"p\">.</span><span class=\"kd\">get</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">USERNAME</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">guest</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n</code></pre></div></div>\n\n<p>This code has the same effect but avoids any type coercion in the process. Of course, this assumes it’s okay for <code class=\"highlighter-rouge\">USERNAME</code> to be missing. But what if you absolutely need an environment variable present in order for your application to work? For that, you might write some code like this:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">const</span> <span class=\"nx\">USERNAME</span> <span class=\"o\">=</span> <span class=\"nx\">process</span><span class=\"p\">.</span><span class=\"nx\">env</span><span class=\"p\">.</span><span class=\"nx\">USERNAME</span><span class=\"p\">;</span>\n<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"nx\">USERNAME</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">throw</span> <span class=\"k\">new</span> <span class=\"nb\">Error</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">Environment variable USERNAME is missing.</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>That’s a lot of code for some simple validation, and if you have several required environment variables, you’ll end up repeating this pattern for each one. With Env, you can use the <code class=\"highlighter-rouge\">require()</code> method:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">const</span> <span class=\"nx\">USERNAME</span> <span class=\"o\">=</span> <span class=\"nx\">env</span><span class=\"p\">.</span><span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">USERNAME</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n</code></pre></div></div>\n\n<p>If the environment variable <code class=\"highlighter-rouge\">USERNAME</code> is missing in this example, then an error is thrown telling you so. You can also use the <code class=\"highlighter-rouge\">required</code> property in a similar way:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">const</span> <span class=\"nx\">USERNAME</span> <span class=\"o\">=</span> <span class=\"nx\">env</span><span class=\"p\">.</span><span class=\"nx\">required</span><span class=\"p\">.</span><span class=\"nx\">USERNAME</span><span class=\"p\">;</span>\n</code></pre></div></div>\n\n<p>This syntax allows you to avoid typing a string but will still throw an error if <code class=\"highlighter-rouge\">USERNAME</code> is not present.</p>\n\n<h2 id=\"problem-2-typos\">Problem #2: Typos</h2>\n\n<p>Another type of error that is common with environment variables are typos. Typos can be hard to spot when you are typing the same thing multiple times. For example, you might type something like this:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">const</span> <span class=\"nx\">USERNAME</span> <span class=\"o\">=</span> <span class=\"nx\">process</span><span class=\"p\">.</span><span class=\"nx\">env</span><span class=\"p\">.</span><span class=\"nx\">USERRNAME</span><span class=\"p\">;</span>\n</code></pre></div></div>\n\n<p>Personally, I’ve spent hours tracking down bugs related to my incorrectly typing the name of the environment variable in my code. For whatever reason, I type the name of the variable correctly but not the environment variable name. If you want your JavaScript variables to have the same name as some required environment variables, you can use destructuring of the <code class=\"highlighter-rouge\">required</code> property to only type the name once:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">const</span> <span class=\"p\">{</span>\n    <span class=\"nx\">PORT</span><span class=\"p\">,</span>\n    <span class=\"nx\">HOST</span>\n<span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"nx\">env</span><span class=\"p\">.</span><span class=\"nx\">required</span><span class=\"p\">;</span>\n</code></pre></div></div>\n\n<p>Here, two local variables, <code class=\"highlighter-rouge\">PORT</code> and <code class=\"highlighter-rouge\">HOST</code>, are created from the environment variables of the same name. If either environment variable is missing, an error is thrown.</p>\n\n<h2 id=\"problem-3-type-mismatches\">Problem #3: Type mismatches</h2>\n\n<p>Another subtle type of error with environment variables are type mismatches. For instance, consider the following Node.js code:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">const</span> <span class=\"nx\">PORT</span> <span class=\"o\">=</span> <span class=\"nx\">process</span><span class=\"p\">.</span><span class=\"nx\">env</span><span class=\"p\">.</span><span class=\"nx\">PORT</span> <span class=\"o\">||</span> <span class=\"mi\">8080</span><span class=\"p\">;</span>\n</code></pre></div></div>\n\n<p>This line, or something similar, appears in a lot of Node.js applications. Most of the time it doesn’t cause an issue…but it could. Can you spot the problem?</p>\n\n<p>All environment variables are strings, so the JavaScript variable <code class=\"highlighter-rouge\">PORT</code> is a string when the environment variable is present and a number if not. Using similar code in Deno threw an error<sup id=\"fnref:2\"><a href="https://humanwhocodes.com/feeds/\&quot;#fn:2\"" class=\"footnote\">2</a></sup> that took me a while to figure out. It turned out that the Deno HTTP server required the port to be a number, so it worked fine locally but when I deployed it to Cloud Run, I received an error.</p>\n\n<p>To solve this problem, Env converts all default values into strings automatically:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">const</span> <span class=\"nx\">PORT</span> <span class=\"o\">=</span> <span class=\"nx\">env</span><span class=\"p\">.</span><span class=\"kd\">get</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">PORT</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"mi\">8080</span><span class=\"p\">);</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"k\">typeof</span> <span class=\"nx\">PORT</span> <span class=\"o\">===</span> <span class=\"dl\">\"</span><span class=\"s2\">string</span><span class=\"dl\">\"</span><span class=\"p\">);</span>      <span class=\"c1\">// always true</span>\n</code></pre></div></div>\n\n<p>Even if you pass in a non-string value as the default, Env will convert it to a string to ensure that you only ever receive a string value when reading environment variables.</p>\n\n<h2 id=\"problem-4-fallback-variables\">Problem #4: Fallback variables</h2>\n\n<p>Sometimes you might want to check several environment variables and only use a default if none of the environment variables are present. So you might have code that looks like this:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">const</span> <span class=\"nx\">PORT</span> <span class=\"o\">=</span> <span class=\"nx\">process</span><span class=\"p\">.</span><span class=\"nx\">env</span><span class=\"p\">.</span><span class=\"nx\">PORT</span> <span class=\"o\">||</span> <span class=\"nx\">process</span><span class=\"p\">.</span><span class=\"nx\">env</span><span class=\"p\">.</span><span class=\"nx\">HTTP_PORT</span> <span class=\"o\">||</span> <span class=\"mi\">8080</span><span class=\"p\">;</span>\n</code></pre></div></div>\n\n<p>You can make that a bit clearer using Env:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">const</span> <span class=\"nx\">PORT</span> <span class=\"o\">=</span> <span class=\"nx\">env</span><span class=\"p\">.</span><span class=\"nx\">first</span><span class=\"p\">([</span><span class=\"dl\">\"</span><span class=\"s2\">PORT</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">HTTP_PORT</span><span class=\"dl\">\"</span><span class=\"p\">],</span> <span class=\"mi\">8080</span><span class=\"p\">);</span>\n</code></pre></div></div>\n\n<p>Using this code, Env returns a value from the first environment variable it finds. Similar to <code class=\"highlighter-rouge\">get()</code>, <code class=\"highlighter-rouge\">first()</code> allows you to pass in a default value to use if none of the environment variables are found, and that default value is automatically converted to a string. As an added error check, if the first argument isn’t an array or is an array with only one item, then an error is thrown.</p>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<p>Env is one of those utilities that has been so valuable to me that I sometimes forget to mention it. I’ve been using it in a number of personal projects for the past two years and it’s saved me a lot of time. Debugging errors related to environment variables isn’t anyone’s idea of fun, and I can’t count the times where I’ve been saved by an Env error. I hope you find it helpful, as well.</p>\n\n<div class=\"footnotes\">\n  <ol>\n    <li id=\"fn:1\">\n      <p><a href="https://humanwhocodes.com/feeds/\&quot;https://github.com/humanwhocodes/env\&quot;">Env</a> <a href="https://humanwhocodes.com/feeds/\&quot;#fnref:1\"" class=\"reversefootnote\">&#8617;</a></p>\n    </li>\n    <li id=\"fn:2\">\n      <p><a href="https://humanwhocodes.com/feeds/\&quot;https://github.com/denoland/deno/issues/7891#issuecomment-706259974\"">serve() error: “Uncaught InvalidData”</a> <a href="https://humanwhocodes.com/feeds/\&quot;#fnref:2\"" class=\"reversefootnote\">&#8617;</a></p>\n    </li>\n  </ol>\n</div>\n",
            "url": "https://humanwhocodes.com/blog/2021/02/introducing-env-javascript-environment-variables/",
            
            
            
            "tags": ["JavaScript","Environment Variables","Node.js","Deno"],
            
            "date_published": "2021-02-16T00:00:00+00:00",
            "date_modified": "2021-02-16T00:00:00+00:00",
            
                "author": "Nicholas C. Zakas"
            
        },
    
        {
            "id": "https://humanwhocodes.com/blog/2021/01/creating-javascript-promise-from-scratch-unhandled-rejection-tracking/",
            "title": "Creating a JavaScript promise from scratch, Part 7: Unhandled rejection tracking",
            "summary": "When promises were introduced in ECMAScript 2015, they had an interesting flaw: if a promise didn’t have a rejection handler and was later rejected, you would have no idea. The rejection silently occurred behind the scenes and, therefore, could easily be missed. The best practice of always attaching rejection handlers to promises emerged due to this limitation. Eventually, a way to detect unhandled promise rejections was added to ECMA-262 and both Node.js and web browsers implemented console warnings when an unhandled rejection occurred. In this post, I’ll walk through how unhandled rejection tracking works and how to implement it in JavaScript.",
            "content_text": "When promises were introduced in ECMAScript 2015, they had an interesting flaw: if a promise didn’t have a rejection handler and was later rejected, you would have no idea. The rejection silently occurred behind the scenes and, therefore, could easily be missed. The best practice of always attaching rejection handlers to promises emerged due to this limitation. Eventually, a way to detect unhandled promise rejections was added to ECMA-262 and both Node.js and web browsers implemented console warnings when an unhandled rejection occurred. In this post, I’ll walk through how unhandled rejection tracking works and how to implement it in JavaScript.\n\nThis is the seventh and final post in my series about creating JavaScript promises from scratch. If you haven’t already read the previous posts, I’d suggest you do before continuing on:\n\n\n  Part 1: Constructor\n  Part 2: Resolving to a promise\n  Part 3: then(), catch(), and finally()\n  Part 4: Promise.resolve() and Promise.reject()\n  Part 5: Promise.race() and Promise.any()\n  Part 6: Promise.all() and Promise.allSettled()\n\n\nAs a reminder, this series is based on my promise library, Pledge. You can view and download all of the source code from GitHub.\n\nUnhandled rejection tracking in browsers\n\nWhile both Node.js and web browsers have ways of dealing with unhandled rejections, I’m going to focus on the web browser implementation because it is defined in the HTML specification1. Having a specification to work from makes it easier to understand what’s going on as opposed to the Node.js implementation which is custom (though still similar to web browsers). To start, suppose you have a promise defined like this:\n\nconst promise = new Promise((resolve, reject) =&gt; {\n    reject(43);\n});\n\n\nThis promise doesn’t have a rejection handler defined and so when it’s rejected it ends up being tracked by the browser. Periodically, the browser checks its list of unhandled rejections and fires a unhandledrejection event on globalThis. The event handler receives an event object with a promise property containing the rejected promise and a reason property containing the rejection reason (43 in the case of this example). For example:\n\n// called when an unhandled rejection occurs\nglobalThis.onunhandledrejection = event =&gt; {\n    console.log(event.promise);     // get the promise\n    console.log(event.reason);      // get the rejection reason\n};\n\n\nIn addition to triggering the unhandledrejection event, the browser will output a warning to the console indicating that an unhandled rejection occurred. You can therefore choose to track unhandled rejections programmatically or keep your console open to see them as you’re developing.\n\nLate-handled promise rejection\n\nYou may be wondering, what happens if a rejection handler is added at some later point in time? After all, you can add a rejection handler anytime between creation of the promise and the time when the promise is destroyed through garbage collection. You can, for instance, do this:\n\nconst promise = new Promise((resolve, reject) =&gt; {\n    reject(43);\n});\n\nsetTimeout(() =&gt; {\n    promise.catch(reason =&gt; {\n        console.error(reason);\n    });\n}, 1000);\n\n\nHere, a promise is created without a rejection handler initially and then adds one later. What happens in this case depends largely on the amount of time that has passed:\n\n\n  If the rejection handler is added before the browser decides to trigger unhandledrejection, then the event will not be triggered.\n  If the rejection handler is added after the browser has triggered unhandledrejection, then a rejectionhandled event is triggered to let you know that the rejection is no longer unhandled.\n\n\nIt’s a little bit confusing, but basically, any promise that triggers an unhandledrejection event could potentially trigger a rejectionhandled event later. Therefore, you really need to listen for both events and track which promises remain, like this:\n\nconst rejections = new Map();\n\n// called when an unhandled rejection occurs\nglobalThis.onunhandledrejection = ({ promise, reason }) =&gt; {\n    rejections.set(promise, reason);\n};\n\n// called when an unhandled rejection occurs\nglobalThis.onrejectionhandled = ({ promise }) =&gt; {\n    rejections.delete(promise);\n};\n\n\nThis code tracks unhandled rejections using a map. When an unhandledrejection event occurs, the promise and rejection reason are saved to the map; when a rejectionhandled event occurs, the promise is deleted from the map. By periodically checking the contents of rejections, you can then track which rejections occurred without handlers.\n\nAnother quirk in the relationship between the unhandledrejection and rejectionhandled events is that you can prevent the rejectionhandled event from firing by adding a rejection handler inside of the onunhandledrejection event handler, like this:\n\n// called when an unhandled rejection occurs\nglobalThis.onunhandledrejection = ({ promise, reason }) =&gt; {\n    promise.catch(() =&gt; {});        // make the rejection handled\n};\n\n// this will never be called\nglobalThis.onrejectionhandled = ({ promise }) =&gt; {\n    console.log(promise);\n};\n\n\nIn this case, the rejectionhandled event isn’t triggered because a rejection handler is added before it’s time for that event. The browser assumes that you know the promise is now handled and so there is no reason to trigger the rejectionhandled event.\n\nEliminating the console warning\n\nAs mentioned previously, the browser will output a warning to the console whenever an unhandled promise rejection occurs. This console warning occurs after the unhandledrejection event is fired, which gives you the opportunity to prevent the warning altogether. You can cancel the console warning by calling the preventDefault() method on the event object, like this:\n\nglobalThis.onunhandledrejection = event =&gt; {\n    event.preventDefault();\n};\n\n\nThis event handler ensures that the console warning for the unhandled rejection will not happen. Suppressing the console warning is helpful in production where you don’t want to litter the console with additional information once you already know a promise was missing a rejection handler.\n\nWith that overview out of the way, it’s now time to discuss how to implement the same browser unhandled rejection tracking from scratch.\n\nImplementing unhandled rejection tracking\n\nThe design for rejection tracking in the Pledge library closely follows the web browser approach. Because I didn’t want to mess with the globalThis object, I decided to add two static methods to the Pledge class to act as event handlers:\n\nclass Pledge {\n\n    // other methods omitted for space\n\n    static onUnhandledRejection(event) {\n        // noop\n    }\n    \n    static onRejectionHandled(event) {\n        // noop\n    }\n\n    // other methods omitted for space\n}\n\n\nThe event object is an instance of PledgeRejectionEvent, which is defined like this:\n\nclass PledgeRejectionEvent {\n    constructor(pledge, reason) {\n        this.pledge = pledge;\n        this.reason = reason;\n        this.returnValue = true;\n    }\n\n    preventDefault() {\n        this.returnValue = false;\n    }\n}\n\n\nI’ve included the preventDefault() method as well as the returnValue legacy property so either way of canceling the event will work.\n\nLast, I created a RejectionTracker class to encapsulate most of the functionality. While this class isn’t described in any specification, I found it easier to wrap all of the functionality in this class. I then attached an instance of RejectionTracker to Pledge via a symbol property:\n\nPledge[PledgeSymbol.rejectionTracker] = new RejectionTracker();\n\n\nIn this way, I can always reach the rejection tracker from any instance of Pledge through this.constructor[PledgeSymbol.rejectionTracker]. It will become more apparent why this is important later in this post.\n\nWhat does it mean for a promise to be handled?\n\nECMA-262 considers a promise to be handled if the promise’s then() method has been called (which includes catch() and finally(), both of which call then() behind the scenes). It actually doesn’t matter if you’ve attached a fulfillment handler, a rejection handler, or neither, so long as then() was called. Each call to then() creates a new promise which then becomes responsible for dealing with any fulfillment or rejection. Consider this example:\n\nconst promise1 = new Promise((resolve, reject) =&gt; {\n    reject(43);\n});\n\nconst promise2 = promise1.then(value =&gt; {\n    console.log(value);\n});\n\n\nHere, promise1 is considered handled because then() is called and a fulfillment handler is attached. When promise1 is rejected, that rejection is passed on to promise2, which is not handled. A browser would report the unhandled rejection from promise2 and disregard promise1. So, the browser isn’t really tracking all unhandled rejections, but rather, it’s tracking whether the last promise in a chain has any handlers attached.\n\nHow do you know if a promise is handled?\n\nECMA-262 describes two key features that enable rejection tracking:\n\n\n  The [[PromiseIsHandled]] internal property2 of every promise. This is a Boolean value indicating if the promise is handled. It starts out as false and is changed to true after then() is called.\n  The HostPromiseRejectionTracker() operation3 is an abstract representation of a promise rejection tracker. ECMA-262 itself does not specify an algorithm for this operation; instead, it defers that to host environments to decide (host environments meaning browsers, Node.js, Deno, etc.).\n\n\nThe majority of the functionality related to these two features is contained the PerformPromiseThen() operation4 (discussed in part 3), which I’ve implemented as performPledgeThen():\n\nfunction performPledgeThen(pledge, onFulfilled, onRejected, resultCapability) {\n    assertIsPledge(pledge);\n\n    if (!isCallable(onFulfilled)) {\n        onFulfilled = undefined;\n    }\n\n    if (!isCallable(onRejected)) {\n        onRejected = undefined;\n    }\n\n    const fulfillReaction = new PledgeReaction(resultCapability, \"fulfill\", onFulfilled);\n    const rejectReaction = new PledgeReaction(resultCapability, \"reject\", onRejected);\n\n    switch (pledge[PledgeSymbol.state]) {\n\n        case \"pending\":\n            pledge[PledgeSymbol.fulfillReactions].push(fulfillReaction);\n            pledge[PledgeSymbol.rejectReactions].push(rejectReaction);\n            break;\n\n        case \"fulfilled\": \n            {\n                const value = pledge[PledgeSymbol.result];\n                const fulfillJob = new PledgeReactionJob(fulfillReaction, value);\n                hostEnqueuePledgeJob(fulfillJob);\n            }\n            break;\n\n        case \"rejected\":\n            {\n                const reason = pledge[PledgeSymbol.result];\n\n                // if the pledge isn't handled, track it with the tracker\n                if (pledge[PledgeSymbol.isHandled] === false) {\n                    hostPledgeRejectionTracker(pledge, \"handle\");\n                }\n\n                const rejectJob = new PledgeReactionJob(rejectReaction, reason);\n                hostEnqueuePledgeJob(rejectJob);\n            }\n            break;\n\n        default:\n            throw new TypeError(`Invalid pledge state: ${pledge[PledgeSymbol.state]}.`);\n    }\n\n    // mark the pledge as handled\n    pledge[PledgeSymbol.isHandled] = true;\n\n    return resultCapability ? resultCapability.pledge : undefined;\n}\n\n\nRegardless of what happens during the course of called performPledgeThen(), the pledge is always marked as handled before the end of the function. If the pledge is rejected, then hostPledgeRejectionTracker() is called with the pledge and a second argument of \"handle\". That second argument indicates that the rejection was handled and shouldn’t be tracked as an unhandled rejection.\n\nThe HostPromiseRejectionTracker() is also called by the RejectPromise() operation5 (also discussed in part 3), which I’ve implemented as rejectPledge():\n\nexport function rejectPledge(pledge, reason) {\n\n    if (pledge[PledgeSymbol.state] !== \"pending\") {\n        throw new Error(\"Pledge is already settled.\");\n    }\n\n    const reactions = pledge[PledgeSymbol.rejectReactions];\n\n    pledge[PledgeSymbol.result] = reason;\n    pledge[PledgeSymbol.fulfillReactions] = undefined;\n    pledge[PledgeSymbol.rejectReactions] = undefined;\n    pledge[PledgeSymbol.state] = \"rejected\";\n\n    // global rejection tracking\n    if (pledge[PledgeSymbol.isHandled] === false) {\n        hostPledgeRejectionTracker(pledge, \"reject\");\n    }\n\n    return triggerPledgeReactions(reactions, reason);\n}\n\n\nHere, the rejectPledge() function called hostPledgeRejectionTracker() with a second argument of \"reject\", indicating that the pledge was rejected and not handled. Remember, rejectPledge() is the function that is called by the reject argument that is passed in to executor function when creating a new promise, so at that point in time, the promise hasn’t had any handlers assigned. So, rejectPledge() is marking the pledge as unhandled, and if then() is later called to assign a handler, then it will bemarked as handled.\n\nI’ve implemented hostPledgeRejectionTracker() as follows:\n\nexport function hostPledgeRejectionTracker(pledge, operation) {\n    const rejectionTracker = pledge.constructor[PledgeSymbol.rejectionTracker];\n    rejectionTracker.track(pledge, operation);\n}\n\n\nThis is where attaching the rejection handler to the Pledge constructor is helpful. I’m able to get to the RejectionTracker instance and call the track() method to keep this function simple.\n\nThe RejectionTracker class\n\nThe RejectionTracker class is designed to encapsulate all of the rejection tracking functionality described in the HTML specification:\n\n\n  An environment settings object also has an outstanding rejected promises weak set and an about-to-be-notified rejected promises list, used to track unhandled promise rejections. The outstanding rejected promises weak set must not create strong references to any of its members, and implementations are free to limit its size, e.g. by removing old entries from it when new ones are added.\n\n\nThis description is a little bit confusing, so let me explain it. There are two different collections used to track rejections:\n\n\n  The “about-to-be-notified” rejected promises list is a list of promises that have been rejected and will trigger the unhandledrejection event.\n  The outstanding rejected promises weak set is a collection of promises that had unhandled rejections and triggered the unhandledrejection event. These promises are tracked just in case they have a rejection handler added later, in which case the rejectionhandled event is triggered.\n\n\nSo these are the two collections the RejectionTracker needs to manage. Additionally, it manages a logger (typically console but can be overwritten for testing) and a timeout ID (which I’ll explain later in this post). Here’s what the class and constructor look like:\n\nexport class RejectionTracker {\n\n    constructor(logger = console) {\n        this.aboutToBeNotified = new Set();\n        this.outstandingRejections = new WeakSet();\n        this.logger = logger;\n        this.timeoutId = 0;\n    }\n\n    track(pledge, operation) {\n        // TODO\n    }\n}\n\n\nI chose to use a set for the “about-to-be-notified” promises list because it will prevent duplicates while allowing me to iterate through all of the promises contained within it. The outstanding rejections collection is implemented as a weak set, per the specification, which means there’s no way to iterate over the contents. That’s not a problem for how this collection is used in algorithm, however.\n\nImplementing HostPromiseRejectionTracker()\n\nThe primary method is track(), and that implements the functionality described in the HTML specification for HostPromiseRejectionTracker()6, which is as follows:\n\n\n  Let script be the running script.\n  If script’s muted errors is true, terminate these steps.\n  Let settings object be script’s settings object.\n  If operation is \"reject\",\n    \n      Add promise to settings object’s about-to-be-notified rejected promises list.\n    \n  \n  If operation is \"handle\",\n    \n      If settings object’s about-to-be-notified rejected promises list contains promise, then remove promise from that list and return.\n      If settings object’s outstanding rejected promises weak set does not contain promise, then return.\n      Remove promise from settings object’s outstanding rejected promises weak set.\n      Let global be settings object’s global object.\n      Queue a global task on the DOM manipulation task source given global to fire an event named rejectionhandled at global, using PromiseRejectionEvent, with the promise attribute initialized to promise, and the reason attribute initialized to the value of promise’s [[PromiseResult]] internal slot.\n    \n  \n\n\nThe first three steps can be ignored for our purposes because they are just setting up variables. The fourth steps occurs when operation is \"reject\", at which point the promise that was rejected is added to the about-to-be-notified rejected promises list. That’s all that needs to happen at this point because a recurring check will later read that list to determine if any events need to be fired. The more interesting part is what happens when operation is \"handle\", meaning that a previously rejected promise now has a rejection handler added. Here are the steps using clearer language:\n\n\n  If promise is in the about-to-be-notified rejected promises list, that means the promise was rejected without a rejection handler but the unhandledrejection event has not yet been fired for that promise. Because of that, you can just remove promise from the list to ensure the event is never fired, and therefore, you’ll never need to fire a rejectionhandled event. Your work here is done.\n  If the outstanding rejected promises weak set doesn’t contain promise, then there’s also nothing else to do here. The unhandledrejection event was never fired for promise so the rejectionhandled event should also never fire. There’s no more tracking necessary.\n  If promise is in the outstanding rejected promises weak set, that means it has previously triggered the unhandledrejection event and you are now being notified that it is handled. That means you need to trigger the rejectionhandled event. For simplicity, you can read “queue a global task” as “run this code with setTimeout().”\n\n\nAfter all of that explanation, here’s what it looks like in code:\n\nexport class RejectionTracker {\n\n    constructor(logger = console) {\n        this.aboutToBeNotified = new Set();\n        this.outstandingRejections = new WeakSet();\n        this.logger = logger;\n        this.timeoutId = 0;\n    }\n\n    track(pledge, operation) {\n        \n        if (operation === \"reject\") {\n            this.aboutToBeNotified.add(pledge);\n        }\n\n        if (operation === \"handle\") {\n\n            if (this.aboutToBeNotified.has(pledge)) {\n                this.aboutToBeNotified.delete(pledge);\n                return;\n            }\n\n            if (!this.outstandingRejections.has(pledge)) {\n                return;\n            }\n            \n            this.outstandingRejections.delete(pledge);\n\n            setTimeout(() =&gt; {\n                const event = new PledgeRejectionEvent(pledge, pledge[PledgeSymbol.result]);\n                pledge.constructor.onRejectionHandled(event);\n            }, 0);            \n        }\n\n        // not part of spec, need to toggle monitoring\n        if (this.aboutToBeNotified.size &gt; 0) {\n            this.startMonitor();\n        } else {\n            this.stopMonitor();\n        }\n    }\n\n    // other methods omitted for space\n}\n\n\nThe code closely mirrors the specification algorithm, ultimately resulting in the onRejectionHandled method being called on the Pledge constructor with an instance of PledgeReactionEvent. This event can’t be cancelled, so there’s no reason to check the returnValue property.\n\nI did need to add a little bit of extra code at the end to toggle the monitoring of rejected promises. You only need to monitor the about-to-be-notified rejected promises list to know when to trigger the unhandledrejection event. (The outstanding promise rejections weak set doesn’t need to be monitored.) To account for that, and to save resources, I turn on the monitor when there is at least one item in the about-to-be-notified rejected promises list and turn it off otherwise.\n\nThe actual monitoring process is described in the HTML specification, as well, and is implemented as the startMonitor() method.\n\nMonitoring for promise rejections\n\nThe HTML specification1 says that the following steps should be taken to notify users of unhandled promise rejections:\n\n\n  Let list be a copy of settings object’s about-to-be-notified rejected promises list.\n  If list is empty, return.\n  Clear settings object’s about-to-be-notified rejected promises list.\n  Let global be settings object’s global object.\n  Queue a global task on the DOM manipulation task source given global to run the following substep:\n    \n      For each promise p in list:\n        \n          If p’s [[PromiseIsHandled]] internal slot is true, continue to the next iteration of the loop.\n          Let notHandled be the result of firing an event named unhandledrejection at global, using PromiseRejectionEvent, with the cancelable attribute initialized to true, the promise attribute initialized to p, and the reason attribute initialized to the value of p’s [[PromiseResult]] internal slot.\n          If notHandled is false, then the promise rejection is handled. Otherwise, the promise rejection is not handled.\n          If p’s [[PromiseIsHandled]] internal slot is false, add p to settings object’s outstanding rejected promises weak set.\n        \n      \n    \n  \n\n\nThe specification further says:\n\n\n  This algorithm results in promise rejections being marked as handled or not handled. These concepts parallel handled and not handled script errors. If a rejection is still not handled after this, then the rejection may be reported to a developer console.\n\n\nSo this part of the specification describes exactly how to determine when an unhandledrejection event should be fired and what effect, if any, it has on a warning being output to the console. However, the specification doesn’t say when this should take place, so browsers are free to implement it in the way they want. For the purposes of this post, I decided to use setInterval() to periodically check the about-to-be-notified rejected promises list. This code is encapsulated in the startMonitor() method, which you can see here:\n\nexport class RejectionTracker {\n\n    // other methods omitted for space\n\n    startMonitor() {\n\n        // only start monitor once\n        if (this.timeoutId &gt; 0) {\n            return;\n        }\n\n        this.timeoutId = setInterval(() =&gt; {\n\n            const list = this.aboutToBeNotified;\n\n            this.aboutToBeNotified = new Set();\n\n            if (list.size === 0) {\n                this.stopMonitor();\n                return;\n            }\n\n            for (const p of list) {\n                if (p[PledgeSymbol.isHandled]) {\n                    continue;\n                }\n\n                const event = new PledgeRejectionEvent(p, p[PledgeSymbol.result]);\n                p.constructor.onUnhandledRejection(event);\n                const notHandled = event.returnValue;\n\n                if (p[PledgeSymbol.isHandled] === false) {\n                    this.outstandingRejections.add(p);\n                }\n                \n                if (notHandled) {\n                    this.logger.error(`Pledge rejection was not caught: ${ p[PledgeSymbol.result] }`);\n                }\n            }\n        }, 100);\n    }\n\n    stopMonitor() {\n        clearInterval(this.timeoutId);\n        this.timeoutId = 0;\n    }\n\n}\n\n\nThe first step in stopMonitor() is to ensure that only one timer is ever used, so I check to make sure that timeoutId is 0 before proceeding. Next, list stores a reference to the current about-to-be-notified rejected promises list and then the property is overwritten with a new instance of Set to ensure that the same promises aren’t processed by this check more than once. If there are no promises to process then the monitor is stopped and the function exits (this is not a part of the specification).\n\nNext, each pledge in list is evaluated. Remember that the PledgeSymbol.isHandled property indicates if there’s a rejection handler attached to the pledge, so if that is true, then you can safely skip processing that pledge. Otherwise, the Pledge.onUnhandledRejection() method is called with an event object. Unlike with Pledge.onRejectionHandled(), in this case you care about whether or not the event was cancelled, so notHandled is set to the event’s return value.\n\nAfter that, the function checks PledgeSymbol.isHandled again because it’s possible that the code inside of Pledge.onUnhandledRejection() might have added a rejection handler. If this property is still false, then the pledge is added to the outstanding rejections weak set to track for any future rejection handler additions.\n\nTo finish up the algorithm, if notHandled is true, that’s when an error is output to the console. Keep in mind that the notHandled variable is the sole determinant of whether or not a console error is output; the PledgeSymbol.isHandled property is a completely separate value that only indicates if a rejection handler is present.\n\nThe stopMonitor() method simply cancels the timer and resets the timeoutId to 0.\n\nWith that, the RejectionTracker class is complete and all of the unhandled rejection tracking from browser implementations are now part of the Pledge library.\n\nWrapping Up\n\nThis post covered how browsers track unhandled promise rejections, which is a bit different than how Node.js tracks them. The browser triggers an unhandledrejection event when a rejected promise is missing a rejection handler as well as outputting a message to the console. If the promise later has a rejection handler assigned, then a rejectionhandled event is triggered.\n\nThe description of how this functionality works is spread across both the ECMA-262 and HTML specifications, with the former defining only a small, abstract API while the latter provides explicit instructions to browsers on how to track unhandled rejections.\n\nAll of the code from this series is available in the Pledge on GitHub. I hope you’ll download it and try it out to get a better understanding of promises.\n\nAnd thank you to my sponsors, whose donations supported parts 5 through 7 of this series. If you enjoyed this series and would like to see more in-depth blog posts, please consider sponsoring me. Your support allows independent software developers like me to continue our work.\n\nReferences\n\n\n  \n    \n      Unhandled promise rejections &#8617; &#8617;2\n    \n    \n      Properties of Promise Instances &#8617;\n    \n    \n      HostPromiseRejectionTracker ( promise, operation ) &#8617;\n    \n    \n      PerformPromiseThen ( promise, onFulfilled, onRejected [ , resultCapability ] ) &#8617;\n    \n    \n      RejectPromise ( promise, reason ) &#8617;\n    \n    \n      HostPromiseRejectionTracker(promise, operation) &#8617;\n    \n  \n\n",
            "content_html": "<p>When promises were introduced in ECMAScript 2015, they had an interesting flaw: if a promise didn’t have a rejection handler and was later rejected, you would have no idea. The rejection silently occurred behind the scenes and, therefore, could easily be missed. The best practice of always attaching rejection handlers to promises emerged due to this limitation. Eventually, a way to detect unhandled promise rejections was added to ECMA-262 and both Node.js and web browsers implemented console warnings when an unhandled rejection occurred. In this post, I’ll walk through how unhandled rejection tracking works and how to implement it in JavaScript.</p>\n\n<p>This is the seventh and final post in my series about creating JavaScript promises from scratch. If you haven’t already read the previous posts, I’d suggest you do before continuing on:</p>\n\n<ul>\n  <li><a href="https://humanwhocodes.com/feeds/\&quot;https://humanwhocodes.com/blog/2020/09/creating-javascript-promise-from-scratch-constructor/\&quot;">Part 1: Constructor</a></li>\n  <li><a href="https://humanwhocodes.com/feeds/\&quot;https://humanwhocodes.com/blog/2020/09/creating-javascript-promise-from-scratch-resolving-to-a-promise/\&quot;">Part 2: Resolving to a promise</a></li>\n  <li><a href="https://humanwhocodes.com/feeds/\&quot;https://humanwhocodes.com/blog/2020/10/creating-javascript-promise-from-scratch-then-catch-finally/\&quot;">Part 3: then(), catch(), and finally()</a></li>\n  <li><a href="https://humanwhocodes.com/feeds/\&quot;https://humanwhocodes.com/blog/2020/10/creating-javascript-promise-from-scratch-promise-resolve-reject/\&quot;">Part 4: Promise.resolve() and Promise.reject()</a></li>\n  <li><a href="https://humanwhocodes.com/feeds/\&quot;https://humanwhocodes.com/blog/2020/11/creating-javascript-promise-from-scratch-promise-race-any/\&quot;">Part 5: Promise.race() and Promise.any()</a></li>\n  <li><a href="https://humanwhocodes.com/feeds/\&quot;https://humanwhocodes.com/blog/2020/12/creating-javascript-promise-from-scratch-promise-all-allsettled/\&quot;">Part 6: Promise.all() and Promise.allSettled()</a></li>\n</ul>\n\n<p>As a reminder, this series is based on my promise library, <a href="https://humanwhocodes.com/feeds/\&quot;https://github.com/humanwhocodes/pledge\&quot;">Pledge</a>. You can view and download all of the source code from GitHub.</p>\n\n<h2 id=\"unhandled-rejection-tracking-in-browsers\">Unhandled rejection tracking in browsers</h2>\n\n<p>While both Node.js and web browsers have ways of dealing with unhandled rejections, I’m going to focus on the web browser implementation because it is defined in the HTML specification<sup id=\"fnref:1\"><a href="https://humanwhocodes.com/feeds/\&quot;#fn:1\"" class=\"footnote\">1</a></sup>. Having a specification to work from makes it easier to understand what’s going on as opposed to the Node.js implementation which is custom (though still similar to web browsers). To start, suppose you have a promise defined like this:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">const</span> <span class=\"nx\">promise</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nb\">Promise</span><span class=\"p\">((</span><span class=\"nx\">resolve</span><span class=\"p\">,</span> <span class=\"nx\">reject</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nx\">reject</span><span class=\"p\">(</span><span class=\"mi\">43</span><span class=\"p\">);</span>\n<span class=\"p\">});</span>\n</code></pre></div></div>\n\n<p>This promise doesn’t have a rejection handler defined and so when it’s rejected it ends up being tracked by the browser. Periodically, the browser checks its list of unhandled rejections and fires a <code class=\"highlighter-rouge\">unhandledrejection</code> event on <code class=\"highlighter-rouge\">globalThis</code>. The event handler receives an <code class=\"highlighter-rouge\">event</code> object with a <code class=\"highlighter-rouge\">promise</code> property containing the rejected promise and a <code class=\"highlighter-rouge\">reason</code> property containing the rejection reason (<code class=\"highlighter-rouge\">43</code> in the case of this example). For example:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// called when an unhandled rejection occurs</span>\n<span class=\"nx\">globalThis</span><span class=\"p\">.</span><span class=\"nx\">onunhandledrejection</span> <span class=\"o\">=</span> <span class=\"nx\">event</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">event</span><span class=\"p\">.</span><span class=\"nx\">promise</span><span class=\"p\">);</span>     <span class=\"c1\">// get the promise</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">event</span><span class=\"p\">.</span><span class=\"nx\">reason</span><span class=\"p\">);</span>      <span class=\"c1\">// get the rejection reason</span>\n<span class=\"p\">};</span>\n</code></pre></div></div>\n\n<p>In addition to triggering the <code class=\"highlighter-rouge\">unhandledrejection</code> event, the browser will output a warning to the console indicating that an unhandled rejection occurred. You can therefore choose to track unhandled rejections programmatically or keep your console open to see them as you’re developing.</p>\n\n<h3 id=\"late-handled-promise-rejection\">Late-handled promise rejection</h3>\n\n<p>You may be wondering, what happens if a rejection handler is added at some later point in time? After all, you can add a rejection handler anytime between creation of the promise and the time when the promise is destroyed through garbage collection. You can, for instance, do this:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">const</span> <span class=\"nx\">promise</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nb\">Promise</span><span class=\"p\">((</span><span class=\"nx\">resolve</span><span class=\"p\">,</span> <span class=\"nx\">reject</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nx\">reject</span><span class=\"p\">(</span><span class=\"mi\">43</span><span class=\"p\">);</span>\n<span class=\"p\">});</span>\n\n<span class=\"nx\">setTimeout</span><span class=\"p\">(()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nx\">promise</span><span class=\"p\">.</span><span class=\"k\">catch</span><span class=\"p\">(</span><span class=\"nx\">reason</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n        <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">error</span><span class=\"p\">(</span><span class=\"nx\">reason</span><span class=\"p\">);</span>\n    <span class=\"p\">});</span>\n<span class=\"p\">},</span> <span class=\"mi\">1000</span><span class=\"p\">);</span>\n</code></pre></div></div>\n\n<p>Here, a promise is created without a rejection handler initially and then adds one later. What happens in this case depends largely on the amount of time that has passed:</p>\n\n<ul>\n  <li>If the rejection handler is added before the browser decides to trigger <code class=\"highlighter-rouge\">unhandledrejection</code>, then the event will not be triggered.</li>\n  <li>If the rejection handler is added after the browser has triggered <code class=\"highlighter-rouge\">unhandledrejection</code>, then a <code class=\"highlighter-rouge\">rejectionhandled</code> event is triggered to let you know that the rejection is no longer unhandled.</li>\n</ul>\n\n<p>It’s a little bit confusing, but basically, any promise that triggers an <code class=\"highlighter-rouge\">unhandledrejection</code> event could potentially trigger a <code class=\"highlighter-rouge\">rejectionhandled</code> event later. Therefore, you really need to listen for both events and track which promises remain, like this:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">const</span> <span class=\"nx\">rejections</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nb\">Map</span><span class=\"p\">();</span>\n\n<span class=\"c1\">// called when an unhandled rejection occurs</span>\n<span class=\"nx\">globalThis</span><span class=\"p\">.</span><span class=\"nx\">onunhandledrejection</span> <span class=\"o\">=</span> <span class=\"p\">({</span> <span class=\"nx\">promise</span><span class=\"p\">,</span> <span class=\"nx\">reason</span> <span class=\"p\">})</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nx\">rejections</span><span class=\"p\">.</span><span class=\"kd\">set</span><span class=\"p\">(</span><span class=\"nx\">promise</span><span class=\"p\">,</span> <span class=\"nx\">reason</span><span class=\"p\">);</span>\n<span class=\"p\">};</span>\n\n<span class=\"c1\">// called when an unhandled rejection occurs</span>\n<span class=\"nx\">globalThis</span><span class=\"p\">.</span><span class=\"nx\">onrejectionhandled</span> <span class=\"o\">=</span> <span class=\"p\">({</span> <span class=\"nx\">promise</span> <span class=\"p\">})</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nx\">rejections</span><span class=\"p\">.</span><span class=\"k\">delete</span><span class=\"p\">(</span><span class=\"nx\">promise</span><span class=\"p\">);</span>\n<span class=\"p\">};</span>\n</code></pre></div></div>\n\n<p>This code tracks unhandled rejections using a map. When an <code class=\"highlighter-rouge\">unhandledrejection</code> event occurs, the promise and rejection reason are saved to the map; when a <code class=\"highlighter-rouge\">rejectionhandled</code> event occurs, the promise is deleted from the map. By periodically checking the contents of <code class=\"highlighter-rouge\">rejections</code>, you can then track which rejections occurred without handlers.</p>\n\n<p>Another quirk in the relationship between the <code class=\"highlighter-rouge\">unhandledrejection</code> and <code class=\"highlighter-rouge\">rejectionhandled</code> events is that you can prevent the <code class=\"highlighter-rouge\">rejectionhandled</code> event from firing by adding a rejection handler inside of the <code class=\"highlighter-rouge\">onunhandledrejection</code> event handler, like this:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// called when an unhandled rejection occurs</span>\n<span class=\"nx\">globalThis</span><span class=\"p\">.</span><span class=\"nx\">onunhandledrejection</span> <span class=\"o\">=</span> <span class=\"p\">({</span> <span class=\"nx\">promise</span><span class=\"p\">,</span> <span class=\"nx\">reason</span> <span class=\"p\">})</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nx\">promise</span><span class=\"p\">.</span><span class=\"k\">catch</span><span class=\"p\">(()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{});</span>        <span class=\"c1\">// make the rejection handled</span>\n<span class=\"p\">};</span>\n\n<span class=\"c1\">// this will never be called</span>\n<span class=\"nx\">globalThis</span><span class=\"p\">.</span><span class=\"nx\">onrejectionhandled</span> <span class=\"o\">=</span> <span class=\"p\">({</span> <span class=\"nx\">promise</span> <span class=\"p\">})</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">promise</span><span class=\"p\">);</span>\n<span class=\"p\">};</span>\n</code></pre></div></div>\n\n<p>In this case, the <code class=\"highlighter-rouge\">rejectionhandled</code> event isn’t triggered because a rejection handler is added before it’s time for that event. The browser assumes that you know the promise is now handled and so there is no reason to trigger the <code class=\"highlighter-rouge\">rejectionhandled</code> event.</p>\n\n<h3 id=\"eliminating-the-console-warning\">Eliminating the console warning</h3>\n\n<p>As mentioned previously, the browser will output a warning to the console whenever an unhandled promise rejection occurs. This console warning occurs after the <code class=\"highlighter-rouge\">unhandledrejection</code> event is fired, which gives you the opportunity to prevent the warning altogether. You can cancel the console warning by calling the <code class=\"highlighter-rouge\">preventDefault()</code> method on the <code class=\"highlighter-rouge\">event</code> object, like this:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nx\">globalThis</span><span class=\"p\">.</span><span class=\"nx\">onunhandledrejection</span> <span class=\"o\">=</span> <span class=\"nx\">event</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nx\">event</span><span class=\"p\">.</span><span class=\"nx\">preventDefault</span><span class=\"p\">();</span>\n<span class=\"p\">};</span>\n</code></pre></div></div>\n\n<p>This event handler ensures that the console warning for the unhandled rejection will not happen. Suppressing the console warning is helpful in production where you don’t want to litter the console with additional information once you already know a promise was missing a rejection handler.</p>\n\n<p>With that overview out of the way, it’s now time to discuss how to implement the same browser unhandled rejection tracking from scratch.</p>\n\n<h2 id=\"implementing-unhandled-rejection-tracking\">Implementing unhandled rejection tracking</h2>\n\n<p>The design for rejection tracking in the Pledge library closely follows the web browser approach. Because I didn’t want to mess with the <code class=\"highlighter-rouge\">globalThis</code> object, I decided to add two static methods to the <code class=\"highlighter-rouge\">Pledge</code> class to act as event handlers:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">class</span> <span class=\"nx\">Pledge</span> <span class=\"p\">{</span>\n\n    <span class=\"c1\">// other methods omitted for space</span>\n\n    <span class=\"kd\">static</span> <span class=\"nx\">onUnhandledRejection</span><span class=\"p\">(</span><span class=\"nx\">event</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"c1\">// noop</span>\n    <span class=\"p\">}</span>\n    \n    <span class=\"kd\">static</span> <span class=\"nx\">onRejectionHandled</span><span class=\"p\">(</span><span class=\"nx\">event</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"c1\">// noop</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"c1\">// other methods omitted for space</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>The <code class=\"highlighter-rouge\">event</code> object is an instance of <code class=\"highlighter-rouge\">PledgeRejectionEvent</code>, which is defined like this:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">class</span> <span class=\"nx\">PledgeRejectionEvent</span> <span class=\"p\">{</span>\n    <span class=\"kd\">constructor</span><span class=\"p\">(</span><span class=\"nx\">pledge</span><span class=\"p\">,</span> <span class=\"nx\">reason</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">pledge</span> <span class=\"o\">=</span> <span class=\"nx\">pledge</span><span class=\"p\">;</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">reason</span> <span class=\"o\">=</span> <span class=\"nx\">reason</span><span class=\"p\">;</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">returnValue</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"nx\">preventDefault</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">returnValue</span> <span class=\"o\">=</span> <span class=\"kc\">false</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>I’ve included the <code class=\"highlighter-rouge\">preventDefault()</code> method as well as the <code class=\"highlighter-rouge\">returnValue</code> legacy property so either way of canceling the event will work.</p>\n\n<p>Last, I created a <code class=\"highlighter-rouge\">RejectionTracker</code> class to encapsulate most of the functionality. While this class isn’t described in any specification, I found it easier to wrap all of the functionality in this class. I then attached an instance of <code class=\"highlighter-rouge\">RejectionTracker</code> to <code class=\"highlighter-rouge\">Pledge</code> via a symbol property:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nx\">Pledge</span><span class=\"p\">[</span><span class=\"nx\">PledgeSymbol</span><span class=\"p\">.</span><span class=\"nx\">rejectionTracker</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">RejectionTracker</span><span class=\"p\">();</span>\n</code></pre></div></div>\n\n<p>In this way, I can always reach the rejection tracker from any instance of <code class=\"highlighter-rouge\">Pledge</code> through <code class=\"highlighter-rouge\">this.constructor[PledgeSymbol.rejectionTracker]</code>. It will become more apparent why this is important later in this post.</p>\n\n<h3 id=\"what-does-it-mean-for-a-promise-to-be-handled\">What does it mean for a promise to be handled?</h3>\n\n<p>ECMA-262 considers a promise to be handled if the promise’s <code class=\"highlighter-rouge\">then()</code> method has been called (which includes <code class=\"highlighter-rouge\">catch()</code> and <code class=\"highlighter-rouge\">finally()</code>, both of which call <code class=\"highlighter-rouge\">then()</code> behind the scenes). It actually doesn’t matter if you’ve attached a fulfillment handler, a rejection handler, or neither, so long as <code class=\"highlighter-rouge\">then()</code> was called. Each call to <code class=\"highlighter-rouge\">then()</code> creates a new promise which then becomes responsible for dealing with any fulfillment or rejection. Consider this example:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">const</span> <span class=\"nx\">promise1</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nb\">Promise</span><span class=\"p\">((</span><span class=\"nx\">resolve</span><span class=\"p\">,</span> <span class=\"nx\">reject</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nx\">reject</span><span class=\"p\">(</span><span class=\"mi\">43</span><span class=\"p\">);</span>\n<span class=\"p\">});</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">promise2</span> <span class=\"o\">=</span> <span class=\"nx\">promise1</span><span class=\"p\">.</span><span class=\"nx\">then</span><span class=\"p\">(</span><span class=\"nx\">value</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">value</span><span class=\"p\">);</span>\n<span class=\"p\">});</span>\n</code></pre></div></div>\n\n<p>Here, <code class=\"highlighter-rouge\">promise1</code> is considered handled because <code class=\"highlighter-rouge\">then()</code> is called and a fulfillment handler is attached. When <code class=\"highlighter-rouge\">promise1</code> is rejected, that rejection is passed on to <code class=\"highlighter-rouge\">promise2</code>, which is not handled. A browser would report the unhandled rejection from <code class=\"highlighter-rouge\">promise2</code> and disregard <code class=\"highlighter-rouge\">promise1</code>. So, the browser isn’t really tracking all unhandled rejections, but rather, it’s tracking whether the last promise in a chain has any handlers attached.</p>\n\n<h3 id=\"how-do-you-know-if-a-promise-is-handled\">How do you know if a promise is handled?</h3>\n\n<p>ECMA-262 describes two key features that enable rejection tracking:</p>\n\n<ol>\n  <li>The <code class=\"highlighter-rouge\">[[PromiseIsHandled]]</code> internal property<sup id=\"fnref:2\"><a href="https://humanwhocodes.com/feeds/\&quot;#fn:2\"" class=\"footnote\">2</a></sup> of every promise. This is a Boolean value indicating if the promise is handled. It starts out as <code class=\"highlighter-rouge\">false</code> and is changed to <code class=\"highlighter-rouge\">true</code> after <code class=\"highlighter-rouge\">then()</code> is called.</li>\n  <li>The <code class=\"highlighter-rouge\">HostPromiseRejectionTracker()</code> operation<sup id=\"fnref:3\"><a href="https://humanwhocodes.com/feeds/\&quot;#fn:3\"" class=\"footnote\">3</a></sup> is an abstract representation of a promise rejection tracker. ECMA-262 itself does not specify an algorithm for this operation; instead, it defers that to host environments to decide (host environments meaning browsers, Node.js, Deno, etc.).</li>\n</ol>\n\n<p>The majority of the functionality related to these two features is contained the <code class=\"highlighter-rouge\">PerformPromiseThen()</code> operation<sup id=\"fnref:4\"><a href="https://humanwhocodes.com/feeds/\&quot;#fn:4\"" class=\"footnote\">4</a></sup> (discussed in part 3), which I’ve implemented as <code class=\"highlighter-rouge\">performPledgeThen()</code>:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">function</span> <span class=\"nx\">performPledgeThen</span><span class=\"p\">(</span><span class=\"nx\">pledge</span><span class=\"p\">,</span> <span class=\"nx\">onFulfilled</span><span class=\"p\">,</span> <span class=\"nx\">onRejected</span><span class=\"p\">,</span> <span class=\"nx\">resultCapability</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nx\">assertIsPledge</span><span class=\"p\">(</span><span class=\"nx\">pledge</span><span class=\"p\">);</span>\n\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"nx\">isCallable</span><span class=\"p\">(</span><span class=\"nx\">onFulfilled</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n        <span class=\"nx\">onFulfilled</span> <span class=\"o\">=</span> <span class=\"kc\">undefined</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"nx\">isCallable</span><span class=\"p\">(</span><span class=\"nx\">onRejected</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n        <span class=\"nx\">onRejected</span> <span class=\"o\">=</span> <span class=\"kc\">undefined</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"kd\">const</span> <span class=\"nx\">fulfillReaction</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">PledgeReaction</span><span class=\"p\">(</span><span class=\"nx\">resultCapability</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">fulfill</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"nx\">onFulfilled</span><span class=\"p\">);</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">rejectReaction</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">PledgeReaction</span><span class=\"p\">(</span><span class=\"nx\">resultCapability</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">reject</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"nx\">onRejected</span><span class=\"p\">);</span>\n\n    <span class=\"k\">switch</span> <span class=\"p\">(</span><span class=\"nx\">pledge</span><span class=\"p\">[</span><span class=\"nx\">PledgeSymbol</span><span class=\"p\">.</span><span class=\"nx\">state</span><span class=\"p\">])</span> <span class=\"p\">{</span>\n\n        <span class=\"k\">case</span> <span class=\"dl\">\"</span><span class=\"s2\">pending</span><span class=\"dl\">\"</span><span class=\"p\">:</span>\n            <span class=\"nx\">pledge</span><span class=\"p\">[</span><span class=\"nx\">PledgeSymbol</span><span class=\"p\">.</span><span class=\"nx\">fulfillReactions</span><span class=\"p\">].</span><span class=\"nx\">push</span><span class=\"p\">(</span><span class=\"nx\">fulfillReaction</span><span class=\"p\">);</span>\n            <span class=\"nx\">pledge</span><span class=\"p\">[</span><span class=\"nx\">PledgeSymbol</span><span class=\"p\">.</span><span class=\"nx\">rejectReactions</span><span class=\"p\">].</span><span class=\"nx\">push</span><span class=\"p\">(</span><span class=\"nx\">rejectReaction</span><span class=\"p\">);</span>\n            <span class=\"k\">break</span><span class=\"p\">;</span>\n\n        <span class=\"k\">case</span> <span class=\"dl\">\"</span><span class=\"s2\">fulfilled</span><span class=\"dl\">\"</span><span class=\"p\">:</span> \n            <span class=\"p\">{</span>\n                <span class=\"kd\">const</span> <span class=\"nx\">value</span> <span class=\"o\">=</span> <span class=\"nx\">pledge</span><span class=\"p\">[</span><span class=\"nx\">PledgeSymbol</span><span class=\"p\">.</span><span class=\"nx\">result</span><span class=\"p\">];</span>\n                <span class=\"kd\">const</span> <span class=\"nx\">fulfillJob</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">PledgeReactionJob</span><span class=\"p\">(</span><span class=\"nx\">fulfillReaction</span><span class=\"p\">,</span> <span class=\"nx\">value</span><span class=\"p\">);</span>\n                <span class=\"nx\">hostEnqueuePledgeJob</span><span class=\"p\">(</span><span class=\"nx\">fulfillJob</span><span class=\"p\">);</span>\n            <span class=\"p\">}</span>\n            <span class=\"k\">break</span><span class=\"p\">;</span>\n\n        <span class=\"k\">case</span> <span class=\"dl\">\"</span><span class=\"s2\">rejected</span><span class=\"dl\">\"</span><span class=\"p\">:</span>\n            <span class=\"p\">{</span>\n                <span class=\"kd\">const</span> <span class=\"nx\">reason</span> <span class=\"o\">=</span> <span class=\"nx\">pledge</span><span class=\"p\">[</span><span class=\"nx\">PledgeSymbol</span><span class=\"p\">.</span><span class=\"nx\">result</span><span class=\"p\">];</span>\n\n                <span class=\"c1\">// if the pledge isn't handled, track it with the tracker</span>\n                <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">pledge</span><span class=\"p\">[</span><span class=\"nx\">PledgeSymbol</span><span class=\"p\">.</span><span class=\"nx\">isHandled</span><span class=\"p\">]</span> <span class=\"o\">===</span> <span class=\"kc\">false</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                    <span class=\"nx\">hostPledgeRejectionTracker</span><span class=\"p\">(</span><span class=\"nx\">pledge</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">handle</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n                <span class=\"p\">}</span>\n\n                <span class=\"kd\">const</span> <span class=\"nx\">rejectJob</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">PledgeReactionJob</span><span class=\"p\">(</span><span class=\"nx\">rejectReaction</span><span class=\"p\">,</span> <span class=\"nx\">reason</span><span class=\"p\">);</span>\n                <span class=\"nx\">hostEnqueuePledgeJob</span><span class=\"p\">(</span><span class=\"nx\">rejectJob</span><span class=\"p\">);</span>\n            <span class=\"p\">}</span>\n            <span class=\"k\">break</span><span class=\"p\">;</span>\n\n        <span class=\"nl\">default</span><span class=\"p\">:</span>\n            <span class=\"k\">throw</span> <span class=\"k\">new</span> <span class=\"nx\">TypeError</span><span class=\"p\">(</span><span class=\"s2\">`Invalid pledge state: </span><span class=\"p\">${</span><span class=\"nx\">pledge</span><span class=\"p\">[</span><span class=\"nx\">PledgeSymbol</span><span class=\"p\">.</span><span class=\"nx\">state</span><span class=\"p\">]}</span><span class=\"s2\">.`</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"c1\">// mark the pledge as handled</span>\n    <span class=\"nx\">pledge</span><span class=\"p\">[</span><span class=\"nx\">PledgeSymbol</span><span class=\"p\">.</span><span class=\"nx\">isHandled</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"p\">;</span>\n\n    <span class=\"k\">return</span> <span class=\"nx\">resultCapability</span> <span class=\"p\">?</span> <span class=\"nx\">resultCapability</span><span class=\"p\">.</span><span class=\"nx\">pledge</span> <span class=\"p\">:</span> <span class=\"kc\">undefined</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>Regardless of what happens during the course of called <code class=\"highlighter-rouge\">performPledgeThen()</code>, the pledge is always marked as handled before the end of the function. If the pledge is rejected, then <code class=\"highlighter-rouge\">hostPledgeRejectionTracker()</code> is called with the pledge and a second argument of <code class=\"highlighter-rouge\">\"handle\"</code>. That second argument indicates that the rejection was handled and shouldn’t be tracked as an unhandled rejection.</p>\n\n<p>The <code class=\"highlighter-rouge\">HostPromiseRejectionTracker()</code> is also called by the <code class=\"highlighter-rouge\">RejectPromise()</code> operation<sup id=\"fnref:5\"><a href="https://humanwhocodes.com/feeds/\&quot;#fn:5\"" class=\"footnote\">5</a></sup> (also discussed in part 3), which I’ve implemented as <code class=\"highlighter-rouge\">rejectPledge()</code>:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">export</span> <span class=\"kd\">function</span> <span class=\"nx\">rejectPledge</span><span class=\"p\">(</span><span class=\"nx\">pledge</span><span class=\"p\">,</span> <span class=\"nx\">reason</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">pledge</span><span class=\"p\">[</span><span class=\"nx\">PledgeSymbol</span><span class=\"p\">.</span><span class=\"nx\">state</span><span class=\"p\">]</span> <span class=\"o\">!==</span> <span class=\"dl\">\"</span><span class=\"s2\">pending</span><span class=\"dl\">\"</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">throw</span> <span class=\"k\">new</span> <span class=\"nb\">Error</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">Pledge is already settled.</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"kd\">const</span> <span class=\"nx\">reactions</span> <span class=\"o\">=</span> <span class=\"nx\">pledge</span><span class=\"p\">[</span><span class=\"nx\">PledgeSymbol</span><span class=\"p\">.</span><span class=\"nx\">rejectReactions</span><span class=\"p\">];</span>\n\n    <span class=\"nx\">pledge</span><span class=\"p\">[</span><span class=\"nx\">PledgeSymbol</span><span class=\"p\">.</span><span class=\"nx\">result</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nx\">reason</span><span class=\"p\">;</span>\n    <span class=\"nx\">pledge</span><span class=\"p\">[</span><span class=\"nx\">PledgeSymbol</span><span class=\"p\">.</span><span class=\"nx\">fulfillReactions</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">undefined</span><span class=\"p\">;</span>\n    <span class=\"nx\">pledge</span><span class=\"p\">[</span><span class=\"nx\">PledgeSymbol</span><span class=\"p\">.</span><span class=\"nx\">rejectReactions</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">undefined</span><span class=\"p\">;</span>\n    <span class=\"nx\">pledge</span><span class=\"p\">[</span><span class=\"nx\">PledgeSymbol</span><span class=\"p\">.</span><span class=\"nx\">state</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"dl\">\"</span><span class=\"s2\">rejected</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n\n    <span class=\"c1\">// global rejection tracking</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">pledge</span><span class=\"p\">[</span><span class=\"nx\">PledgeSymbol</span><span class=\"p\">.</span><span class=\"nx\">isHandled</span><span class=\"p\">]</span> <span class=\"o\">===</span> <span class=\"kc\">false</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"nx\">hostPledgeRejectionTracker</span><span class=\"p\">(</span><span class=\"nx\">pledge</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">reject</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">return</span> <span class=\"nx\">triggerPledgeReactions</span><span class=\"p\">(</span><span class=\"nx\">reactions</span><span class=\"p\">,</span> <span class=\"nx\">reason</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>Here, the <code class=\"highlighter-rouge\">rejectPledge()</code> function called <code class=\"highlighter-rouge\">hostPledgeRejectionTracker()</code> with a second argument of <code class=\"highlighter-rouge\">\"reject\"</code>, indicating that the pledge was rejected and not handled. Remember, <code class=\"highlighter-rouge\">rejectPledge()</code> is the function that is called by the <code class=\"highlighter-rouge\">reject</code> argument that is passed in to executor function when creating a new promise, so at that point in time, the promise hasn’t had any handlers assigned. So, <code class=\"highlighter-rouge\">rejectPledge()</code> is marking the pledge as unhandled, and if <code class=\"highlighter-rouge\">then()</code> is later called to assign a handler, then it will bemarked as handled.</p>\n\n<p>I’ve implemented <code class=\"highlighter-rouge\">hostPledgeRejectionTracker()</code> as follows:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">export</span> <span class=\"kd\">function</span> <span class=\"nx\">hostPledgeRejectionTracker</span><span class=\"p\">(</span><span class=\"nx\">pledge</span><span class=\"p\">,</span> <span class=\"nx\">operation</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">rejectionTracker</span> <span class=\"o\">=</span> <span class=\"nx\">pledge</span><span class=\"p\">.</span><span class=\"kd\">constructor</span><span class=\"p\">[</span><span class=\"nx\">PledgeSymbol</span><span class=\"p\">.</span><span class=\"nx\">rejectionTracker</span><span class=\"p\">];</span>\n    <span class=\"nx\">rejectionTracker</span><span class=\"p\">.</span><span class=\"nx\">track</span><span class=\"p\">(</span><span class=\"nx\">pledge</span><span class=\"p\">,</span> <span class=\"nx\">operation</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>This is where attaching the rejection handler to the <code class=\"highlighter-rouge\">Pledge</code> constructor is helpful. I’m able to get to the <code class=\"highlighter-rouge\">RejectionTracker</code> instance and call the <code class=\"highlighter-rouge\">track()</code> method to keep this function simple.</p>\n\n<h3 id=\"the-rejectiontracker-class\">The <code class=\"highlighter-rouge\">RejectionTracker</code> class</h3>\n\n<p>The <code class=\"highlighter-rouge\">RejectionTracker</code> class is designed to encapsulate all of the rejection tracking functionality described in the HTML specification:</p>\n\n<blockquote>\n  <p>An environment settings object also has an outstanding rejected promises weak set and an about-to-be-notified rejected promises list, used to track unhandled promise rejections. The outstanding rejected promises weak set must not create strong references to any of its members, and implementations are free to limit its size, e.g. by removing old entries from it when new ones are added.</p>\n</blockquote>\n\n<p>This description is a little bit confusing, so let me explain it. There are two different collections used to track rejections:</p>\n\n<ul>\n  <li>The <em>“about-to-be-notified” rejected promises list</em> is a list of promises that have been rejected and will trigger the <code class=\"highlighter-rouge\">unhandledrejection</code> event.</li>\n  <li>The <em>outstanding rejected promises weak set</em> is a collection of promises that had unhandled rejections and triggered the <code class=\"highlighter-rouge\">unhandledrejection</code> event. These promises are tracked just in case they have a rejection handler added later, in which case the <code class=\"highlighter-rouge\">rejectionhandled</code> event is triggered.</li>\n</ul>\n\n<p>So these are the two collections the <code class=\"highlighter-rouge\">RejectionTracker</code> needs to manage. Additionally, it manages a logger (typically <code class=\"highlighter-rouge\">console</code> but can be overwritten for testing) and a timeout ID (which I’ll explain later in this post). Here’s what the class and constructor look like:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">export</span> <span class=\"kd\">class</span> <span class=\"nx\">RejectionTracker</span> <span class=\"p\">{</span>\n\n    <span class=\"kd\">constructor</span><span class=\"p\">(</span><span class=\"nx\">logger</span> <span class=\"o\">=</span> <span class=\"nx\">console</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">aboutToBeNotified</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nb\">Set</span><span class=\"p\">();</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">outstandingRejections</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nb\">WeakSet</span><span class=\"p\">();</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">logger</span> <span class=\"o\">=</span> <span class=\"nx\">logger</span><span class=\"p\">;</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">timeoutId</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"nx\">track</span><span class=\"p\">(</span><span class=\"nx\">pledge</span><span class=\"p\">,</span> <span class=\"nx\">operation</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"c1\">// TODO</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>I chose to use a set for the “about-to-be-notified” promises list because it will prevent duplicates while allowing me to iterate through all of the promises contained within it. The outstanding rejections collection is implemented as a weak set, per the specification, which means there’s no way to iterate over the contents. That’s not a problem for how this collection is used in algorithm, however.</p>\n\n<h4 id=\"implementing-hostpromiserejectiontracker\">Implementing <code class=\"highlighter-rouge\">HostPromiseRejectionTracker()</code></h4>\n\n<p>The primary method is <code class=\"highlighter-rouge\">track()</code>, and that implements the functionality described in the HTML specification for <code class=\"highlighter-rouge\">HostPromiseRejectionTracker()</code><sup id=\"fnref:6\"><a href="https://humanwhocodes.com/feeds/\&quot;#fn:6\"" class=\"footnote\">6</a></sup>, which is as follows:</p>\n\n<ol>\n  <li>Let <em>script</em> be the running script.</li>\n  <li>If <em>script</em>’s muted errors is true, terminate these steps.</li>\n  <li>Let <em>settings object</em> be <em>script</em>’s settings object.</li>\n  <li>If <em>operation</em> is <code class=\"highlighter-rouge\">\"reject\"</code>,\n    <ol>\n      <li>Add <em>promise</em> to <em>settings object</em>’s about-to-be-notified rejected promises list.</li>\n    </ol>\n  </li>\n  <li>If <em>operation</em> is <code class=\"highlighter-rouge\">\"handle\"</code>,\n    <ol>\n      <li>If <em>settings object</em>’s about-to-be-notified rejected promises list contains <em>promise</em>, then remove <em>promise</em> from that list and return.</li>\n      <li>If <em>settings object</em>’s outstanding rejected promises weak set does not contain <em>promise</em>, then return.</li>\n      <li>Remove <em>promise</em> from settings object’s outstanding rejected promises weak set.</li>\n      <li>Let <em>global</em> be <em>settings object</em>’s global object.</li>\n      <li>Queue a global task on the DOM manipulation task source given <em>global</em> to fire an event named <code class=\"highlighter-rouge\">rejectionhandled</code> at <em>global</em>, using <code class=\"highlighter-rouge\">PromiseRejectionEvent</code>, with the <code class=\"highlighter-rouge\">promise</code> attribute initialized to <em>promise</em>, and the <code class=\"highlighter-rouge\">reason</code> attribute initialized to the value of <em>promise</em>’s <code class=\"highlighter-rouge\">[[PromiseResult]]</code> internal slot.</li>\n    </ol>\n  </li>\n</ol>\n\n<p>The first three steps can be ignored for our purposes because they are just setting up variables. The fourth steps occurs when <code class=\"highlighter-rouge\">operation</code> is <code class=\"highlighter-rouge\">\"reject\"</code>, at which point the promise that was rejected is added to the about-to-be-notified rejected promises list. That’s all that needs to happen at this point because a recurring check will later read that list to determine if any events need to be fired. The more interesting part is what happens when <code class=\"highlighter-rouge\">operation</code> is <code class=\"highlighter-rouge\">\"handle\"</code>, meaning that a previously rejected promise now has a rejection handler added. Here are the steps using clearer language:</p>\n\n<ol>\n  <li>If <code class=\"highlighter-rouge\">promise</code> is in the about-to-be-notified rejected promises list, that means the promise was rejected without a rejection handler but the <code class=\"highlighter-rouge\">unhandledrejection</code> event has not yet been fired for that promise. Because of that, you can just remove <code class=\"highlighter-rouge\">promise</code> from the list to ensure the event is never fired, and therefore, you’ll never need to fire a <code class=\"highlighter-rouge\">rejectionhandled</code> event. Your work here is done.</li>\n  <li>If the outstanding rejected promises weak set doesn’t contain <code class=\"highlighter-rouge\">promise</code>, then there’s also nothing else to do here. The <code class=\"highlighter-rouge\">unhandledrejection</code> event was never fired for <code class=\"highlighter-rouge\">promise</code> so the <code class=\"highlighter-rouge\">rejectionhandled</code> event should also never fire. There’s no more tracking necessary.</li>\n  <li>If <code class=\"highlighter-rouge\">promise</code> is in the outstanding rejected promises weak set, that means it has previously triggered the <code class=\"highlighter-rouge\">unhandledrejection</code> event and you are now being notified that it is handled. That means you need to trigger the <code class=\"highlighter-rouge\">rejectionhandled</code> event. For simplicity, you can read “queue a global task” as “run this code with <code class=\"highlighter-rouge\">setTimeout()</code>.”</li>\n</ol>\n\n<p>After all of that explanation, here’s what it looks like in code:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">export</span> <span class=\"kd\">class</span> <span class=\"nx\">RejectionTracker</span> <span class=\"p\">{</span>\n\n    <span class=\"kd\">constructor</span><span class=\"p\">(</span><span class=\"nx\">logger</span> <span class=\"o\">=</span> <span class=\"nx\">console</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">aboutToBeNotified</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nb\">Set</span><span class=\"p\">();</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">outstandingRejections</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nb\">WeakSet</span><span class=\"p\">();</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">logger</span> <span class=\"o\">=</span> <span class=\"nx\">logger</span><span class=\"p\">;</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">timeoutId</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"nx\">track</span><span class=\"p\">(</span><span class=\"nx\">pledge</span><span class=\"p\">,</span> <span class=\"nx\">operation</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        \n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">operation</span> <span class=\"o\">===</span> <span class=\"dl\">\"</span><span class=\"s2\">reject</span><span class=\"dl\">\"</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">aboutToBeNotified</span><span class=\"p\">.</span><span class=\"nx\">add</span><span class=\"p\">(</span><span class=\"nx\">pledge</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">operation</span> <span class=\"o\">===</span> <span class=\"dl\">\"</span><span class=\"s2\">handle</span><span class=\"dl\">\"</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">aboutToBeNotified</span><span class=\"p\">.</span><span class=\"nx\">has</span><span class=\"p\">(</span><span class=\"nx\">pledge</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n                <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">aboutToBeNotified</span><span class=\"p\">.</span><span class=\"k\">delete</span><span class=\"p\">(</span><span class=\"nx\">pledge</span><span class=\"p\">);</span>\n                <span class=\"k\">return</span><span class=\"p\">;</span>\n            <span class=\"p\">}</span>\n\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">outstandingRejections</span><span class=\"p\">.</span><span class=\"nx\">has</span><span class=\"p\">(</span><span class=\"nx\">pledge</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n                <span class=\"k\">return</span><span class=\"p\">;</span>\n            <span class=\"p\">}</span>\n            \n            <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">outstandingRejections</span><span class=\"p\">.</span><span class=\"k\">delete</span><span class=\"p\">(</span><span class=\"nx\">pledge</span><span class=\"p\">);</span>\n\n            <span class=\"nx\">setTimeout</span><span class=\"p\">(()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n                <span class=\"kd\">const</span> <span class=\"nx\">event</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">PledgeRejectionEvent</span><span class=\"p\">(</span><span class=\"nx\">pledge</span><span class=\"p\">,</span> <span class=\"nx\">pledge</span><span class=\"p\">[</span><span class=\"nx\">PledgeSymbol</span><span class=\"p\">.</span><span class=\"nx\">result</span><span class=\"p\">]);</span>\n                <span class=\"nx\">pledge</span><span class=\"p\">.</span><span class=\"kd\">constructor</span><span class=\"p\">.</span><span class=\"nx\">onRejectionHandled</span><span class=\"p\">(</span><span class=\"nx\">event</span><span class=\"p\">);</span>\n            <span class=\"p\">},</span> <span class=\"mi\">0</span><span class=\"p\">);</span>            \n        <span class=\"p\">}</span>\n\n        <span class=\"c1\">// not part of spec, need to toggle monitoring</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">aboutToBeNotified</span><span class=\"p\">.</span><span class=\"nx\">size</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">startMonitor</span><span class=\"p\">();</span>\n        <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n            <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">stopMonitor</span><span class=\"p\">();</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"c1\">// other methods omitted for space</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>The code closely mirrors the specification algorithm, ultimately resulting in the <code class=\"highlighter-rouge\">onRejectionHandled</code> method being called on the <code class=\"highlighter-rouge\">Pledge</code> constructor with an instance of <code class=\"highlighter-rouge\">PledgeReactionEvent</code>. This event can’t be cancelled, so there’s no reason to check the <code class=\"highlighter-rouge\">returnValue</code> property.</p>\n\n<p>I did need to add a little bit of extra code at the end to toggle the monitoring of rejected promises. You only need to monitor the about-to-be-notified rejected promises list to know when to trigger the <code class=\"highlighter-rouge\">unhandledrejection</code> event. (The outstanding promise rejections weak set doesn’t need to be monitored.) To account for that, and to save resources, I turn on the monitor when there is at least one item in the about-to-be-notified rejected promises list and turn it off otherwise.</p>\n\n<p>The actual monitoring process is described in the HTML specification, as well, and is implemented as the <code class=\"highlighter-rouge\">startMonitor()</code> method.</p>\n\n<h4 id=\"monitoring-for-promise-rejections\">Monitoring for promise rejections</h4>\n\n<p>The HTML specification<sup id=\"fnref:1:1\"><a href="https://humanwhocodes.com/feeds/\&quot;#fn:1\"" class=\"footnote\">1</a></sup> says that the following steps should be taken to notify users of unhandled promise rejections:</p>\n\n<ol>\n  <li>Let <em>list</em> be a copy of <em>settings object</em>’s about-to-be-notified rejected promises <em>list</em>.</li>\n  <li>If <em>list</em> is empty, return.</li>\n  <li>Clear <em>settings object</em>’s about-to-be-notified rejected promises list.</li>\n  <li>Let <em>global</em> be <em>settings object</em>’s global object.</li>\n  <li>Queue a global task on the DOM manipulation task source given <em>global</em> to run the following substep:\n    <ol>\n      <li>For each promise <em>p</em> in <em>list</em>:\n        <ol>\n          <li>If <em>p</em>’s <code class=\"highlighter-rouge\">[[PromiseIsHandled]]</code> internal slot is true, continue to the next iteration of the loop.</li>\n          <li>Let <em>notHandled</em> be the result of firing an event named <code class=\"highlighter-rouge\">unhandledrejection</code> at <em>global</em>, using <code class=\"highlighter-rouge\">PromiseRejectionEvent</code>, with the <code class=\"highlighter-rouge\">cancelable</code> attribute initialized to true, the <code class=\"highlighter-rouge\">promise</code> attribute initialized to <em>p</em>, and the <code class=\"highlighter-rouge\">reason</code> attribute initialized to the value of <em>p</em>’s <code class=\"highlighter-rouge\">[[PromiseResult]]</code> internal slot.</li>\n          <li>If <em>notHandled</em> is false, then the promise rejection is handled. Otherwise, the promise rejection is not handled.</li>\n          <li>If <em>p</em>’s <code class=\"highlighter-rouge\">[[PromiseIsHandled]]</code> internal slot is false, add <em>p</em> to <em>settings object</em>’s outstanding rejected promises weak set.</li>\n        </ol>\n      </li>\n    </ol>\n  </li>\n</ol>\n\n<p>The specification further says:</p>\n\n<blockquote>\n  <p>This algorithm results in promise rejections being marked as <strong>handled</strong> or <strong>not handled</strong>. These concepts parallel handled and not handled script errors. If a rejection is still <strong>not handled</strong> after this, then the rejection may be reported to a developer console.</p>\n</blockquote>\n\n<p>So this part of the specification describes exactly how to determine when an <code class=\"highlighter-rouge\">unhandledrejection</code> event should be fired and what effect, if any, it has on a warning being output to the console. However, the specification doesn’t say when this should take place, so browsers are free to implement it in the way they want. For the purposes of this post, I decided to use <code class=\"highlighter-rouge\">setInterval()</code> to periodically check the about-to-be-notified rejected promises list. This code is encapsulated in the <code class=\"highlighter-rouge\">startMonitor()</code> method, which you can see here:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">export</span> <span class=\"kd\">class</span> <span class=\"nx\">RejectionTracker</span> <span class=\"p\">{</span>\n\n    <span class=\"c1\">// other methods omitted for space</span>\n\n    <span class=\"nx\">startMonitor</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n\n        <span class=\"c1\">// only start monitor once</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">timeoutId</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"k\">return</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">timeoutId</span> <span class=\"o\">=</span> <span class=\"nx\">setInterval</span><span class=\"p\">(()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n\n            <span class=\"kd\">const</span> <span class=\"nx\">list</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">aboutToBeNotified</span><span class=\"p\">;</span>\n\n            <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">aboutToBeNotified</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nb\">Set</span><span class=\"p\">();</span>\n\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">list</span><span class=\"p\">.</span><span class=\"nx\">size</span> <span class=\"o\">===</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">stopMonitor</span><span class=\"p\">();</span>\n                <span class=\"k\">return</span><span class=\"p\">;</span>\n            <span class=\"p\">}</span>\n\n            <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kd\">const</span> <span class=\"nx\">p</span> <span class=\"k\">of</span> <span class=\"nx\">list</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">p</span><span class=\"p\">[</span><span class=\"nx\">PledgeSymbol</span><span class=\"p\">.</span><span class=\"nx\">isHandled</span><span class=\"p\">])</span> <span class=\"p\">{</span>\n                    <span class=\"k\">continue</span><span class=\"p\">;</span>\n                <span class=\"p\">}</span>\n\n                <span class=\"kd\">const</span> <span class=\"nx\">event</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">PledgeRejectionEvent</span><span class=\"p\">(</span><span class=\"nx\">p</span><span class=\"p\">,</span> <span class=\"nx\">p</span><span class=\"p\">[</span><span class=\"nx\">PledgeSymbol</span><span class=\"p\">.</span><span class=\"nx\">result</span><span class=\"p\">]);</span>\n                <span class=\"nx\">p</span><span class=\"p\">.</span><span class=\"kd\">constructor</span><span class=\"p\">.</span><span class=\"nx\">onUnhandledRejection</span><span class=\"p\">(</span><span class=\"nx\">event</span><span class=\"p\">);</span>\n                <span class=\"kd\">const</span> <span class=\"nx\">notHandled</span> <span class=\"o\">=</span> <span class=\"nx\">event</span><span class=\"p\">.</span><span class=\"nx\">returnValue</span><span class=\"p\">;</span>\n\n                <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">p</span><span class=\"p\">[</span><span class=\"nx\">PledgeSymbol</span><span class=\"p\">.</span><span class=\"nx\">isHandled</span><span class=\"p\">]</span> <span class=\"o\">===</span> <span class=\"kc\">false</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">outstandingRejections</span><span class=\"p\">.</span><span class=\"nx\">add</span><span class=\"p\">(</span><span class=\"nx\">p</span><span class=\"p\">);</span>\n                <span class=\"p\">}</span>\n                \n                <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">notHandled</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">logger</span><span class=\"p\">.</span><span class=\"nx\">error</span><span class=\"p\">(</span><span class=\"s2\">`Pledge rejection was not caught: </span><span class=\"p\">${</span> <span class=\"nx\">p</span><span class=\"p\">[</span><span class=\"nx\">PledgeSymbol</span><span class=\"p\">.</span><span class=\"nx\">result</span><span class=\"p\">]</span> <span class=\"p\">}</span><span class=\"s2\">`</span><span class=\"p\">);</span>\n                <span class=\"p\">}</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">},</span> <span class=\"mi\">100</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"nx\">stopMonitor</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"nx\">clearInterval</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">timeoutId</span><span class=\"p\">);</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">timeoutId</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>The first step in <code class=\"highlighter-rouge\">stopMonitor()</code> is to ensure that only one timer is ever used, so I check to make sure that <code class=\"highlighter-rouge\">timeoutId</code> is <code class=\"highlighter-rouge\">0</code> before proceeding. Next, <code class=\"highlighter-rouge\">list</code> stores a reference to the current about-to-be-notified rejected promises list and then the property is overwritten with a new instance of <code class=\"highlighter-rouge\">Set</code> to ensure that the same promises aren’t processed by this check more than once. If there are no promises to process then the monitor is stopped and the function exits (this is not a part of the specification).</p>\n\n<p>Next, each pledge in <code class=\"highlighter-rouge\">list</code> is evaluated. Remember that the <code class=\"highlighter-rouge\">PledgeSymbol.isHandled</code> property indicates if there’s a rejection handler attached to the pledge, so if that is <code class=\"highlighter-rouge\">true</code>, then you can safely skip processing that pledge. Otherwise, the <code class=\"highlighter-rouge\">Pledge.onUnhandledRejection()</code> method is called with an event object. Unlike with <code class=\"highlighter-rouge\">Pledge.onRejectionHandled()</code>, in this case you care about whether or not the event was cancelled, so <code class=\"highlighter-rouge\">notHandled</code> is set to the event’s return value.</p>\n\n<p>After that, the function checks <code class=\"highlighter-rouge\">PledgeSymbol.isHandled</code> again because it’s possible that the code inside of <code class=\"highlighter-rouge\">Pledge.onUnhandledRejection()</code> might have added a rejection handler. If this property is still <code class=\"highlighter-rouge\">false</code>, then the pledge is added to the outstanding rejections weak set to track for any future rejection handler additions.</p>\n\n<p>To finish up the algorithm, if <code class=\"highlighter-rouge\">notHandled</code> is <code class=\"highlighter-rouge\">true</code>, that’s when an error is output to the console. Keep in mind that the <code class=\"highlighter-rouge\">notHandled</code> variable is the sole determinant of whether or not a console error is output; the <code class=\"highlighter-rouge\">PledgeSymbol.isHandled</code> property is a completely separate value that only indicates if a rejection handler is present.</p>\n\n<p>The <code class=\"highlighter-rouge\">stopMonitor()</code> method simply cancels the timer and resets the <code class=\"highlighter-rouge\">timeoutId</code> to <code class=\"highlighter-rouge\">0</code>.</p>\n\n<p>With that, the <code class=\"highlighter-rouge\">RejectionTracker</code> class is complete and all of the unhandled rejection tracking from browser implementations are now part of the Pledge library.</p>\n\n<h2 id=\"wrapping-up\">Wrapping Up</h2>\n\n<p>This post covered how browsers track unhandled promise rejections, which is a bit different than how Node.js tracks them. The browser triggers an <code class=\"highlighter-rouge\">unhandledrejection</code> event when a rejected promise is missing a rejection handler as well as outputting a message to the console. If the promise later has a rejection handler assigned, then a <code class=\"highlighter-rouge\">rejectionhandled</code> event is triggered.</p>\n\n<p>The description of how this functionality works is spread across both the ECMA-262 and HTML specifications, with the former defining only a small, abstract API while the latter provides explicit instructions to browsers on how to track unhandled rejections.</p>\n\n<p>All of the code from this series is available in the <a href="https://humanwhocodes.com/feeds/\&quot;https://github.com/humanwhocodes/pledge\&quot;">Pledge</a> on GitHub. I hope you’ll download it and try it out to get a better understanding of promises.</p>\n\n<p>And thank you to my <a href="https://humanwhocodes.com/feeds/\&quot;https://github.com/sponsors/nzakas\&quot;">sponsors</a>, whose donations supported parts 5 through 7 of this series. If you enjoyed this series and would like to see more in-depth blog posts, please consider <a href="https://humanwhocodes.com/feeds/\&quot;https://github.com/sponsors/nzakas\&quot;">sponsoring me</a>. Your support allows independent software developers like me to continue our work.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n  <ol>\n    <li id=\"fn:1\">\n      <p><a href="https://humanwhocodes.com/feeds/\&quot;https://html.spec.whatwg.org/multipage/webappapis.html#unhandled-promise-rejections\"">Unhandled promise rejections</a> <a href="https://humanwhocodes.com/feeds/\&quot;#fnref:1\"" class=\"reversefootnote\">&#8617;</a> <a href="https://humanwhocodes.com/feeds/\&quot;#fnref:1:1\"" class=\"reversefootnote\">&#8617;<sup>2</sup></a></p>\n    </li>\n    <li id=\"fn:2\">\n      <p><a href="https://humanwhocodes.com/feeds/\&quot;https://tc39.es/ecma262/#sec-properties-of-promise-instances\"">Properties of Promise Instances</a> <a href="https://humanwhocodes.com/feeds/\&quot;#fnref:2\"" class=\"reversefootnote\">&#8617;</a></p>\n    </li>\n    <li id=\"fn:3\">\n      <p><a href="https://humanwhocodes.com/feeds/\&quot;https://tc39.es/ecma262/#sec-host-promise-rejection-tracker\"">HostPromiseRejectionTracker ( promise, operation )</a> <a href="https://humanwhocodes.com/feeds/\&quot;#fnref:3\"" class=\"reversefootnote\">&#8617;</a></p>\n    </li>\n    <li id=\"fn:4\">\n      <p><a href="https://humanwhocodes.com/feeds/\&quot;https://tc39.es/ecma262/#sec-performpromisethen\"">PerformPromiseThen ( promise, onFulfilled, onRejected [ , resultCapability ] )</a> <a href="https://humanwhocodes.com/feeds/\&quot;#fnref:4\"" class=\"reversefootnote\">&#8617;</a></p>\n    </li>\n    <li id=\"fn:5\">\n      <p><a href="https://humanwhocodes.com/feeds/\&quot;https://tc39.es/ecma262/#sec-rejectpromise\"">RejectPromise ( promise, reason )</a> <a href="https://humanwhocodes.com/feeds/\&quot;#fnref:5\"" class=\"reversefootnote\">&#8617;</a></p>\n    </li>\n    <li id=\"fn:6\">\n      <p><a href="https://humanwhocodes.com/feeds/\&quot;https://html.spec.whatwg.org/multipage/webappapis.html#the-hostpromiserejectiontracker-implementation\"">HostPromiseRejectionTracker(promise, operation)</a> <a href="https://humanwhocodes.com/feeds/\&quot;#fnref:6\"" class=\"reversefootnote\">&#8617;</a></p>\n    </li>\n  </ol>\n</div>\n",
            "url": "https://humanwhocodes.com/blog/2021/01/creating-javascript-promise-from-scratch-unhandled-rejection-tracking/",
            
            
            
            "tags": ["JavaScript","Promises","ECMAScript 6"],
            
            "date_published": "2021-01-19T00:00:00+00:00",
            "date_modified": "2021-01-19T00:00:00+00:00",
            
                "author": 
                ""
                
            
        },
    
        {
            "id": "https://humanwhocodes.com/blog/2020/12/creating-javascript-promise-from-scratch-promise-all-allsettled/",
            "title": "Creating a JavaScript promise from scratch, Part 6: Promise.all() and Promise.allSettled()",
            "summary": "In my last post, I walked you through the creation of the Promice.race() and Promise.any() methods, both of which work on multiple promises and return a single promise that indicates the result of the operation. This post continues on to discuss Promise.all() and Promise.allSettled(), two operations that are similar to one another as well as Promise.any(). Each of these methods use the same basic algorithm so if you’re able to understand one of them then you can understand them all.",
            "content_text": "In my last post, I walked you through the creation of the Promice.race() and Promise.any() methods, both of which work on multiple promises and return a single promise that indicates the result of the operation. This post continues on to discuss Promise.all() and Promise.allSettled(), two operations that are similar to one another as well as Promise.any(). Each of these methods use the same basic algorithm so if you’re able to understand one of them then you can understand them all.\n\nThis is the sixth post in my series about creating JavaScript promises from scratch. If you haven’t already read the previous posts, I’d suggest you do before continuing on:\n\n\n  Part 1: Constructor\n  Part 2: Resolving to a promise\n  Part 3: then(), catch(), and finally()\n  Part 4: Promise.resolve() and Promise.reject()\n  Part 5: Promise.race() and Promise.any()\n\n\nAs a reminder, this series is based on my promise library, Pledge. You can view and download all of the source code from GitHub.\n\nThe Promise.all() method\n\nThe Promise.all() method is the essentially the inverse of the Promise.any() method (discussed in part 5): it returns a rejected promise if any of the promises is rejected and returns a promise that is fulfilled to an array of promise results if all promises are fulfilled. Here are a couple examples:\n\nconst promise1 = Promise.all([\n    Promise.resolve(42),\n    Promise.reject(43),\n    Promise.resolve(44)\n]);\n\npromise1.catch(reason =&gt; {\n    console.log(reason);     // 43\n});\n\nconst promise2 = Promise.all([\n    Promise.resolve(42),\n    Promise.resolve(43),\n    Promise.resolve(44)\n]);\n\npromise2.then(value =&gt; {\n    console.log(value[0]);    // 42\n    console.log(value[1]);    // 43\n    console.log(value[2]);    // 44\n});\n\n\nBecause Promise.all() is so closely related to Promise.any(), you can actually implement it using essentially the same algorithm.\n\nCreating the Pledge.all() method\n\nThe specification1 for Promise.all() describes the same basic algorithm that you’ve already seen for Promise.race() and Promise.any().\n\nclass Pledge {\n\n    // other methods omitted for space\n\n    static all(iterable) {\n\n        const C = this;\n        const pledgeCapability = new PledgeCapability(C);\n        let iteratorRecord;\n\n        try {\n            const pledgeResolve = getPledgeResolve(C);\n            iteratorRecord = getIterator(iterable);\n            const result = performPledgeAll(iteratorRecord, C, pledgeCapability, pledgeResolve);\n            return result;\n        } catch (error) {\n\n            let result = new ThrowCompletion(error);\n\n            if (iteratorRecord &amp;&amp; iteratorRecord.done === false) {\n                result = iteratorClose(iteratorRecord, result);\n            }\n\n            pledgeCapability.reject(result.value);\n            return pledgeCapability.pledge;\n        }\n\n    }\n\n    // other methods omitted for space\n}\n\n\nI’ve explained this algorithm in detail in part 5, so I’m going to skip right to discussing the PerformPromiseAll() 2 operation and how I’ve implemented it as performPledgeAll().\n\nAs I’ve already mentioned, this algorithm is so close to PerformPromiseAny()3 that it’s almost copy-and-paste. The first difference is that instead of tracking rejected values, you instead track fulfilled values (so the array is named values instead of errors). Then, instead of attaching a common fulfillment handler and a custom rejection handler, you attach a custom fulfillment handler and a common rejection handler. The last difference is that instead of tracking remaining elements so you can reject an array of errors, you track remaining elements to so you can fulfill an array of values. All of that is wrapped in the wacky iteration algorithm just as in Promise.any(). Here’s the code:\n\nfunction performPledgeAll(iteratorRecord, constructor, resultCapability, pledgeResolve) {\n\n    assertIsConstructor(constructor);\n    assertIsCallable(pledgeResolve);\n\n    // in performPledgeAny, this is the errors array\n    const values = [];\n    const remainingElementsCount = { value: 1 };\n    let index = 0;\n\n    while (true) {\n        let next;\n\n        try {\n            next = iteratorStep(iteratorRecord);\n        } catch (error) {\n            iteratorRecord.done = true;\n            resultCapability.reject(error);\n            return resultCapability.pledge;\n        }\n\n        if (next === false) {\n            remainingElementsCount.value = remainingElementsCount.value - 1;\n            if (remainingElementsCount.value === 0) {\n                // in performPledgeAny, this is where you reject errors\n                resultCapability.resolve(values);\n            }\n\n            return resultCapability.pledge;\n        }\n\n        let nextValue;\n\n        try {\n            nextValue = iteratorValue(next);\n        } catch (error) {\n            iteratorRecord.done = true;\n            resultCapability.reject(error);\n            return resultCapability.pledge;\n        }\n\n        values.push(undefined);\n        const nextPledge = pledgeResolve.call(constructor, nextValue);\n\n        // in performPledgeAny, you'd create a reject element\n        const resolveElement = createPledgeAllResolveElement(index, values, resultCapability, remainingElementsCount);\n\n        remainingElementsCount.value = remainingElementsCount.value + 1;\n        // in performPledgeAny, you'd attach resultCapability.resolve\n        // and a custom reject element\n        nextPledge.then(resolveElement, resultCapability.reject);\n        index = index + 1;\n    }\n}\n\n\nI’ve commented in the code the differences from performPledgeAny() so hopefully you can see that there really isn’t a big difference. You’ll also find that the  createPledgeAllResolveElement() function (which implements the Promise.all Resolve Element Functions algorithm4) is very similar to the createPledgeAnyRejectElement() function:\n\nfunction createPledgeAllResolveElement(index, values, pledgeCapability, remainingElementsCount) {\n\n    const alreadyCalled = { value: false };\n\n    return x =&gt; {\n\n        if (alreadyCalled.value) {\n            return;\n        }\n\n        alreadyCalled.value = true;\n\n        values[index] = x;\n        remainingElementsCount.value = remainingElementsCount.value - 1;\n\n        if (remainingElementsCount.value === 0) {\n            return pledgeCapability.resolve(values);\n        }\n\n    };\n}\n\n\nThe createPledgeAllResolveElement() function returns a function that is used as the fulfillment handler for the promise returned from Pledge.all(). The x variable is the fulfilled value and is stored in the values array when available. When there are no further elements remaining, a resolved pledge is returned with the entire values array.\n\nHopefully you can now see the relationship between Promise.any() and Promise.all(). The Promise.any() method returns a rejected promise with an array of values (wrapped in an AggregateError) when all of the promises are rejected and a fulfilled promise with the value from the first fulfilled promise; the Promise.all() method returns a fulfilled promises with an array of fulfillment values when all of the promises are fulfilled and returns a rejected promise with the reason from the first rejected promise (if one exists). So for Promise.any(), you create a new promise and assign the same fulfillment handler to each promise that was passed in; for Promise.all(), you create a new promise and assign the same rejection handler to each promise that was passed in. Then, in Promise.any() you create a new rejection handler for each promise to track the rejection; for Promise.all() you create a new fulfillment handler for each promise to track fulfillments.\n\nIf it seems like Promise.any() and Promise.all() are just two sides of the same coin, then you are correct. The next step is to combine both of these methods into one, and that’s what Promise.allSettled() does.\n\nThe Promise.allSettled() method\n\nThe Promise.allSettled() method is the last of the four promise methods that work on multiple promises. This method is unique because the promise returned is never rejected unless an error is thrown during the iteration step. Instead, Promise.allSettled() returns a promise that is fulfilled with an array of result objects. Each result object has two properties:\n\n\n  status - either \"fulfilled\" or \"rejected\"\n  value - the value that was fulfilled or rejected\n\n\nThe result objects allow you to collect information about every promise’s result in order to determine the next step to take. As such, Promise.allSettled() will take longer to complete than any of the other multi-promise methods because it has no short-circuiting behavior. Whereas Promise.race() returns as soon as the first promise is settled, Promise.any() returns as soon as the first promise is resolved, and Promise.all() returns as soon as the first promise is rejected, Promise.allSettled() must wait until all promises have settled. Here are some examples showing how Promise.allSettled() is used:\n\nconst promise1 = Promise.allSettled([\n    Promise.resolve(42),\n    Promise.reject(43),\n    Promise.resolve(44)\n]);\n\npromise1.then(values =&gt; {\n    console.log(values[0]);     // { status: \"fulfilled\", value: 42 }\n    console.log(values[1]);     // { status: \"rejected\", value: 43 }\n    console.log(values[2]);     // { status: \"fulfilled\", value: 44 }\n});\n\nconst promise2 = Promise.allSettled([\n    new Promise(resolve =&gt; {\n        setTimeout(() =&gt; {\n            resolve(42);\n        }, 500);\n    }),\n    Promise.reject(43),\n    Promise.resolve(44)\n]);\n\npromise2.then(values =&gt; {\n    console.log(values[0]);     // { status: \"fulfilled\", value: 42 }\n    console.log(values[1]);     // { status: \"rejected\", value: 43 }\n    console.log(values[2]);     // { status: \"fulfilled\", value: 44 }\n});\n\nconst promise3 = Promise.allSettled([\n    Promise.reject(42),\n    Promise.reject(43),\n    Promise.reject(44)\n]);\n\npromise3.then(values =&gt; {\n    console.log(values[0]);     // { status: \"rejected\", value: 42 }\n    console.log(values[1]);     // { status: \"rejected\", value: 43 }\n    console.log(values[2]);     // { status: \"rejected\", value: 44 }\n});\n\n\nNotice that a fulfilled promise is returned even when all of the promises passed to Promise.allSettled() are rejected.\n\nCreating the Pledge.allSettled() method\n\nOnce again, the Promise.allSettled() method follows the same basic algorithm5 as the other three multi-promise methods, so the Pledge.allSettled() implementation is the same the others except for naming:\n\nclass Pledge {\n\n    // other methods omitted for space\n\n    static allSettled(iterable) {\n\n        const C = this;\n        const pledgeCapability = new PledgeCapability(C);\n        let iteratorRecord;\n\n        try {\n            const pledgeResolve = getPledgeResolve(C);\n            iteratorRecord = getIterator(iterable);\n            const result = performPledgeAllSettled(iteratorRecord, C, pledgeCapability, pledgeResolve);\n            return result;\n        } catch (error) {\n\n            let result = new ThrowCompletion(error);\n\n            if (iteratorRecord &amp;&amp; iteratorRecord.done === false) {\n                result = iteratorClose(iteratorRecord, result);\n            }\n\n            pledgeCapability.reject(result.value);\n            return pledgeCapability.pledge;\n\n        }\n\n    }\n\n    // other methods omitted for space\n}\n\n\nThe algorithm for the PerformPromiseAllSettled() operation6 should look very familiar at this point. In fact, it is almost exactly the same as the PerformPromiseAll() operation. Just like PerformPromiseAll(), PerformPromiseAllSettled() uses a remainingElementsCount object to track how many promises must still be settled, and index variable to track where each result should go in the values array, and a values array to keep track of promise results. Unlike PerformPromiseAll(), the values stored in the values array in PerformPromiseAllSettled() are the result objects I mentioned in the previous section.\n\nThe other significant difference between PerformPromiseAll() and PerformPromiseAllSettled() is that the latter creates a custom rejection handler for each promise in addition to a custom fulfillment handler. Those handlers are also created using the same basic algorithm you’ve already seen in other multi-promise methods.\n\nWithout any further delay, here’s the implementation of performPledgeAllSettled():\n\nfunction performPledgeAllSettled(iteratorRecord, constructor, resultCapability, pledgeResolve) {\n\n    assertIsConstructor(constructor);\n    assertIsCallable(pledgeResolve);\n\n    const values = [];\n    const remainingElementsCount = { value: 1 };\n    let index = 0;\n\n    while (true) {\n        let next;\n\n        try {\n            next = iteratorStep(iteratorRecord);\n        } catch (error) {\n            iteratorRecord.done = true;\n            resultCapability.reject(error);\n            return resultCapability.pledge;\n        }\n\n        if (next === false) {\n            remainingElementsCount.value = remainingElementsCount.value - 1;\n            if (remainingElementsCount.value === 0) {\n                resultCapability.resolve(values);\n            }\n\n            return resultCapability.pledge;\n        }\n\n        let nextValue;\n\n        try {\n            nextValue = iteratorValue(next);\n        } catch (error) {\n            iteratorRecord.done = true;\n            resultCapability.reject(error);\n            return resultCapability.pledge;\n        }\n\n        values.push(undefined);\n        const nextPledge = pledgeResolve.call(constructor, nextValue);\n        const resolveElement = createPledgeAllSettledResolveElement(index, values, resultCapability, remainingElementsCount);\n\n        // the only significant difference from performPledgeAll is adding this\n        // custom rejection handler to each promise instead of resultCapability.reject\n        const rejectElement = createPledgeAllSettledRejectElement(index, values, resultCapability, remainingElementsCount);\n\n        remainingElementsCount.value = remainingElementsCount.value + 1;\n        nextPledge.then(resolveElement, rejectElement);\n        index = index + 1;\n    }\n\n}\n\n\nAs you can see, the only significant change from performPledgeAll() is the addition of the rejectElement that is used instead of resultCapability.reject. Otherwise, the functionality is exactly the same. The heavy lifting is really done by the createPledgeAllSettledResolveElement() and createPledgeAllSettledRejectElement() functions. These functions represent the corresponding steps in the specification for Promise.allSettled Resolve Element Functions7 and Promise.allSettled Reject Element Functions8 and are essentially the same function with the notable exception that one specifies the result as “fulfilled” and the other specifies the result as “rejected”. Here are the implementations:\n\nfunction createPledgeAllSettledResolveElement(index, values, pledgeCapability, remainingElementsCount) {\n\n    const alreadyCalled = { value: false };\n\n    return x =&gt; {\n\n        if (alreadyCalled.value) {\n            return;\n        }\n\n        alreadyCalled.value = true;\n\n        values[index] = {\n            status: \"fulfilled\",\n            value: x\n        };\n\n        remainingElementsCount.value = remainingElementsCount.value - 1;\n\n        if (remainingElementsCount.value === 0) {\n            return pledgeCapability.resolve(values);\n        }\n\n    };\n}\n\nfunction createPledgeAllSettledRejectElement(index, values, pledgeCapability, remainingElementsCount) {\n\n    const alreadyCalled = { value: false };\n\n    return x =&gt; {\n\n        if (alreadyCalled.value) {\n            return;\n        }\n\n        alreadyCalled.value = true;\n\n        values[index] = {\n            status: \"rejected\",\n            value: x\n        };\n        \n        remainingElementsCount.value = remainingElementsCount.value - 1;\n\n        if (remainingElementsCount.value === 0) {\n            return pledgeCapability.resolve(values);\n        }\n\n    };\n}\n\n\nYou’ve already seen several of these functions at this point, so I’ll just point out how these are different. First, even the reject element calls pledgeCapability.resolve() because the returned promise should never be rejected due to a passed-in promise being rejected. Next, the value inserted into the values array is an object instead of just x (as you saw in Promise.any() and Promise.all()). Both the resolve and reject elements are just inserting a result object into the values and array, and when there are no further promises to wait for, returns a resolved promise.\n\nWrapping Up\n\nThis post covered creating Promise.all() and Promise.allSettled() from scratch. These are the last two of the built-in methods that work on multiple promises (the previous two were covered in part 5). The Promise.all() method is essentially the inverse of the Promise.any() method: it returns a rejected promise if any of the promises is rejected and returns a promise that is fulfilled to an array of promise results if all promises are fulfilled. The Promise.allSettled() method combines aspects of Promise.all() and Promise.any() so that it almost always returns a fulfilled promise with an array of result objects containing the results of both fulfilled and rejected promises.\n\nIn the next, and final, part of this series, I’ll be covering unhandled promise rejections.\n\nAll of this code is available in the Pledge on GitHub. I hope you’ll download it and try it out to get a better understanding of promises.\n\nReferences\n\n\n  \n    \n      Promise.all ( iterable ) &#8617;\n    \n    \n      PerformPromiseAll ( iteratorRecord, constructor, resultCapability, promiseResolve ) &#8617;\n    \n    \n      PerformPromiseAny ( iteratorRecord, constructor, resultCapability, promiseResolve ) &#8617;\n    \n    \n      Promise.all Resolve Element Functions &#8617;\n    \n    \n      Promise.allSettled ( iterable ) &#8617;\n    \n    \n      PerformPromiseAllSettled ( iteratorRecord, constructor, resultCapability, promiseResolve ) &#8617;\n    \n    \n      Promise.allSetled Resolve Element Functions &#8617;\n    \n    \n      Promise.allSetled Reject Element Functions &#8617;\n    \n  \n\n",
            "content_html": "<p>In my <a href="https://humanwhocodes.com/feeds/\&quot;https://humanwhocodes.com/blog/2020/11/creating-javascript-promise-from-scratch-promise-race-any/\&quot;">last post</a>, I walked you through the creation of the <code class=\"highlighter-rouge\">Promice.race()</code> and <code class=\"highlighter-rouge\">Promise.any()</code> methods, both of which work on multiple promises and return a single promise that indicates the result of the operation. This post continues on to discuss <code class=\"highlighter-rouge\">Promise.all()</code> and <code class=\"highlighter-rouge\">Promise.allSettled()</code>, two operations that are similar to one another as well as <code class=\"highlighter-rouge\">Promise.any()</code>. Each of these methods use the same basic algorithm so if you’re able to understand one of them then you can understand them all.</p>\n\n<p>This is the sixth post in my series about creating JavaScript promises from scratch. If you haven’t already read the previous posts, I’d suggest you do before continuing on:</p>\n\n<ul>\n  <li><a href="https://humanwhocodes.com/feeds/\&quot;https://humanwhocodes.com/blog/2020/09/creating-javascript-promise-from-scratch-constructor/\&quot;">Part 1: Constructor</a></li>\n  <li><a href="https://humanwhocodes.com/feeds/\&quot;https://humanwhocodes.com/blog/2020/09/creating-javascript-promise-from-scratch-resolving-to-a-promise/\&quot;">Part 2: Resolving to a promise</a></li>\n  <li><a href="https://humanwhocodes.com/feeds/\&quot;https://humanwhocodes.com/blog/2020/10/creating-javascript-promise-from-scratch-then-catch-finally/\&quot;">Part 3: then(), catch(), and finally()</a></li>\n  <li><a href="https://humanwhocodes.com/feeds/\&quot;https://humanwhocodes.com/blog/2020/10/creating-javascript-promise-from-scratch-promise-resolve-reject/\&quot;">Part 4: Promise.resolve() and Promise.reject()</a></li>\n  <li><a href="https://humanwhocodes.com/feeds/\&quot;https://humanwhocodes.com/blog/2020/11/creating-javascript-promise-from-scratch-promise-race-any/\&quot;">Part 5: Promise.race() and Promise.any()</a></li>\n</ul>\n\n<p>As a reminder, this series is based on my promise library, <a href="https://humanwhocodes.com/feeds/\&quot;https://github.com/humanwhocodes/pledge\&quot;">Pledge</a>. You can view and download all of the source code from GitHub.</p>\n\n<h2 id=\"the-promiseall-method\">The <code class=\"highlighter-rouge\">Promise.all()</code> method</h2>\n\n<p>The <code class=\"highlighter-rouge\">Promise.all()</code> method is the essentially the inverse of the <code class=\"highlighter-rouge\">Promise.any()</code> method (discussed in part 5): it returns a rejected promise if any of the promises is rejected and returns a promise that is fulfilled to an array of promise results if all promises are fulfilled. Here are a couple examples:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">const</span> <span class=\"nx\">promise1</span> <span class=\"o\">=</span> <span class=\"nb\">Promise</span><span class=\"p\">.</span><span class=\"nx\">all</span><span class=\"p\">([</span>\n    <span class=\"nb\">Promise</span><span class=\"p\">.</span><span class=\"nx\">resolve</span><span class=\"p\">(</span><span class=\"mi\">42</span><span class=\"p\">),</span>\n    <span class=\"nb\">Promise</span><span class=\"p\">.</span><span class=\"nx\">reject</span><span class=\"p\">(</span><span class=\"mi\">43</span><span class=\"p\">),</span>\n    <span class=\"nb\">Promise</span><span class=\"p\">.</span><span class=\"nx\">resolve</span><span class=\"p\">(</span><span class=\"mi\">44</span><span class=\"p\">)</span>\n<span class=\"p\">]);</span>\n\n<span class=\"nx\">promise1</span><span class=\"p\">.</span><span class=\"k\">catch</span><span class=\"p\">(</span><span class=\"nx\">reason</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">reason</span><span class=\"p\">);</span>     <span class=\"c1\">// 43</span>\n<span class=\"p\">});</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">promise2</span> <span class=\"o\">=</span> <span class=\"nb\">Promise</span><span class=\"p\">.</span><span class=\"nx\">all</span><span class=\"p\">([</span>\n    <span class=\"nb\">Promise</span><span class=\"p\">.</span><span class=\"nx\">resolve</span><span class=\"p\">(</span><span class=\"mi\">42</span><span class=\"p\">),</span>\n    <span class=\"nb\">Promise</span><span class=\"p\">.</span><span class=\"nx\">resolve</span><span class=\"p\">(</span><span class=\"mi\">43</span><span class=\"p\">),</span>\n    <span class=\"nb\">Promise</span><span class=\"p\">.</span><span class=\"nx\">resolve</span><span class=\"p\">(</span><span class=\"mi\">44</span><span class=\"p\">)</span>\n<span class=\"p\">]);</span>\n\n<span class=\"nx\">promise2</span><span class=\"p\">.</span><span class=\"nx\">then</span><span class=\"p\">(</span><span class=\"nx\">value</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">value</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]);</span>    <span class=\"c1\">// 42</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">value</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]);</span>    <span class=\"c1\">// 43</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">value</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]);</span>    <span class=\"c1\">// 44</span>\n<span class=\"p\">});</span>\n</code></pre></div></div>\n\n<p>Because <code class=\"highlighter-rouge\">Promise.all()</code> is so closely related to <code class=\"highlighter-rouge\">Promise.any()</code>, you can actually implement it using essentially the same algorithm.</p>\n\n<h3 id=\"creating-the-pledgeall-method\">Creating the <code class=\"highlighter-rouge\">Pledge.all()</code> method</h3>\n\n<p>The specification<sup id=\"fnref:1\"><a href="https://humanwhocodes.com/feeds/\&quot;#fn:1\"" class=\"footnote\">1</a></sup> for <code class=\"highlighter-rouge\">Promise.all()</code> describes the same basic algorithm that you’ve already seen for <code class=\"highlighter-rouge\">Promise.race()</code> and <code class=\"highlighter-rouge\">Promise.any()</code>.</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">class</span> <span class=\"nx\">Pledge</span> <span class=\"p\">{</span>\n\n    <span class=\"c1\">// other methods omitted for space</span>\n\n    <span class=\"kd\">static</span> <span class=\"nx\">all</span><span class=\"p\">(</span><span class=\"nx\">iterable</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\n        <span class=\"kd\">const</span> <span class=\"nx\">C</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">;</span>\n        <span class=\"kd\">const</span> <span class=\"nx\">pledgeCapability</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">PledgeCapability</span><span class=\"p\">(</span><span class=\"nx\">C</span><span class=\"p\">);</span>\n        <span class=\"kd\">let</span> <span class=\"nx\">iteratorRecord</span><span class=\"p\">;</span>\n\n        <span class=\"k\">try</span> <span class=\"p\">{</span>\n            <span class=\"kd\">const</span> <span class=\"nx\">pledgeResolve</span> <span class=\"o\">=</span> <span class=\"nx\">getPledgeResolve</span><span class=\"p\">(</span><span class=\"nx\">C</span><span class=\"p\">);</span>\n            <span class=\"nx\">iteratorRecord</span> <span class=\"o\">=</span> <span class=\"nx\">getIterator</span><span class=\"p\">(</span><span class=\"nx\">iterable</span><span class=\"p\">);</span>\n            <span class=\"kd\">const</span> <span class=\"nx\">result</span> <span class=\"o\">=</span> <span class=\"nx\">performPledgeAll</span><span class=\"p\">(</span><span class=\"nx\">iteratorRecord</span><span class=\"p\">,</span> <span class=\"nx\">C</span><span class=\"p\">,</span> <span class=\"nx\">pledgeCapability</span><span class=\"p\">,</span> <span class=\"nx\">pledgeResolve</span><span class=\"p\">);</span>\n            <span class=\"k\">return</span> <span class=\"nx\">result</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span> <span class=\"k\">catch</span> <span class=\"p\">(</span><span class=\"nx\">error</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\n            <span class=\"kd\">let</span> <span class=\"nx\">result</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">ThrowCompletion</span><span class=\"p\">(</span><span class=\"nx\">error</span><span class=\"p\">);</span>\n\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">iteratorRecord</span> <span class=\"o\">&amp;&amp;</span> <span class=\"nx\">iteratorRecord</span><span class=\"p\">.</span><span class=\"nx\">done</span> <span class=\"o\">===</span> <span class=\"kc\">false</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                <span class=\"nx\">result</span> <span class=\"o\">=</span> <span class=\"nx\">iteratorClose</span><span class=\"p\">(</span><span class=\"nx\">iteratorRecord</span><span class=\"p\">,</span> <span class=\"nx\">result</span><span class=\"p\">);</span>\n            <span class=\"p\">}</span>\n\n            <span class=\"nx\">pledgeCapability</span><span class=\"p\">.</span><span class=\"nx\">reject</span><span class=\"p\">(</span><span class=\"nx\">result</span><span class=\"p\">.</span><span class=\"nx\">value</span><span class=\"p\">);</span>\n            <span class=\"k\">return</span> <span class=\"nx\">pledgeCapability</span><span class=\"p\">.</span><span class=\"nx\">pledge</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n\n    <span class=\"p\">}</span>\n\n    <span class=\"c1\">// other methods omitted for space</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>I’ve explained this algorithm in detail in part 5, so I’m going to skip right to discussing the <code class=\"highlighter-rouge\">PerformPromiseAll()</code> <sup id=\"fnref:2\"><a href="https://humanwhocodes.com/feeds/\&quot;#fn:2\"" class=\"footnote\">2</a></sup> operation and how I’ve implemented it as <code class=\"highlighter-rouge\">performPledgeAll()</code>.</p>\n\n<p>As I’ve already mentioned, this algorithm is so close to <code class=\"highlighter-rouge\">PerformPromiseAny()</code><sup id=\"fnref:3\"><a href="https://humanwhocodes.com/feeds/\&quot;#fn:3\"" class=\"footnote\">3</a></sup> that it’s almost copy-and-paste. The first difference is that instead of tracking rejected values, you instead track fulfilled values (so the array is named <code class=\"highlighter-rouge\">values</code> instead of <code class=\"highlighter-rouge\">errors</code>). Then, instead of attaching a common fulfillment handler and a custom rejection handler, you attach a custom fulfillment handler and a common rejection handler. The last difference is that instead of tracking remaining elements so you can reject an array of errors, you track remaining elements to so you can fulfill an array of values. All of that is wrapped in the wacky iteration algorithm just as in <code class=\"highlighter-rouge\">Promise.any()</code>. Here’s the code:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">function</span> <span class=\"nx\">performPledgeAll</span><span class=\"p\">(</span><span class=\"nx\">iteratorRecord</span><span class=\"p\">,</span> <span class=\"kd\">constructor</span><span class=\"p\">,</span> <span class=\"nx\">resultCapability</span><span class=\"p\">,</span> <span class=\"nx\">pledgeResolve</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\n    <span class=\"nx\">assertIsConstructor</span><span class=\"p\">(</span><span class=\"kd\">constructor</span><span class=\"p\">);</span>\n    <span class=\"nx\">assertIsCallable</span><span class=\"p\">(</span><span class=\"nx\">pledgeResolve</span><span class=\"p\">);</span>\n\n    <span class=\"c1\">// in performPledgeAny, this is the errors array</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">values</span> <span class=\"o\">=</span> <span class=\"p\">[];</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">remainingElementsCount</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"na\">value</span><span class=\"p\">:</span> <span class=\"mi\">1</span> <span class=\"p\">};</span>\n    <span class=\"kd\">let</span> <span class=\"nx\">index</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n\n    <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"kd\">let</span> <span class=\"nx\">next</span><span class=\"p\">;</span>\n\n        <span class=\"k\">try</span> <span class=\"p\">{</span>\n            <span class=\"nx\">next</span> <span class=\"o\">=</span> <span class=\"nx\">iteratorStep</span><span class=\"p\">(</span><span class=\"nx\">iteratorRecord</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span> <span class=\"k\">catch</span> <span class=\"p\">(</span><span class=\"nx\">error</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"nx\">iteratorRecord</span><span class=\"p\">.</span><span class=\"nx\">done</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"p\">;</span>\n            <span class=\"nx\">resultCapability</span><span class=\"p\">.</span><span class=\"nx\">reject</span><span class=\"p\">(</span><span class=\"nx\">error</span><span class=\"p\">);</span>\n            <span class=\"k\">return</span> <span class=\"nx\">resultCapability</span><span class=\"p\">.</span><span class=\"nx\">pledge</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">next</span> <span class=\"o\">===</span> <span class=\"kc\">false</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"nx\">remainingElementsCount</span><span class=\"p\">.</span><span class=\"nx\">value</span> <span class=\"o\">=</span> <span class=\"nx\">remainingElementsCount</span><span class=\"p\">.</span><span class=\"nx\">value</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">remainingElementsCount</span><span class=\"p\">.</span><span class=\"nx\">value</span> <span class=\"o\">===</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                <span class=\"c1\">// in performPledgeAny, this is where you reject errors</span>\n                <span class=\"nx\">resultCapability</span><span class=\"p\">.</span><span class=\"nx\">resolve</span><span class=\"p\">(</span><span class=\"nx\">values</span><span class=\"p\">);</span>\n            <span class=\"p\">}</span>\n\n            <span class=\"k\">return</span> <span class=\"nx\">resultCapability</span><span class=\"p\">.</span><span class=\"nx\">pledge</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"kd\">let</span> <span class=\"nx\">nextValue</span><span class=\"p\">;</span>\n\n        <span class=\"k\">try</span> <span class=\"p\">{</span>\n            <span class=\"nx\">nextValue</span> <span class=\"o\">=</span> <span class=\"nx\">iteratorValue</span><span class=\"p\">(</span><span class=\"nx\">next</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span> <span class=\"k\">catch</span> <span class=\"p\">(</span><span class=\"nx\">error</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"nx\">iteratorRecord</span><span class=\"p\">.</span><span class=\"nx\">done</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"p\">;</span>\n            <span class=\"nx\">resultCapability</span><span class=\"p\">.</span><span class=\"nx\">reject</span><span class=\"p\">(</span><span class=\"nx\">error</span><span class=\"p\">);</span>\n            <span class=\"k\">return</span> <span class=\"nx\">resultCapability</span><span class=\"p\">.</span><span class=\"nx\">pledge</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"nx\">values</span><span class=\"p\">.</span><span class=\"nx\">push</span><span class=\"p\">(</span><span class=\"kc\">undefined</span><span class=\"p\">);</span>\n        <span class=\"kd\">const</span> <span class=\"nx\">nextPledge</span> <span class=\"o\">=</span> <span class=\"nx\">pledgeResolve</span><span class=\"p\">.</span><span class=\"nx\">call</span><span class=\"p\">(</span><span class=\"kd\">constructor</span><span class=\"p\">,</span> <span class=\"nx\">nextValue</span><span class=\"p\">);</span>\n\n        <span class=\"c1\">// in performPledgeAny, you'd create a reject element</span>\n        <span class=\"kd\">const</span> <span class=\"nx\">resolveElement</span> <span class=\"o\">=</span> <span class=\"nx\">createPledgeAllResolveElement</span><span class=\"p\">(</span><span class=\"nx\">index</span><span class=\"p\">,</span> <span class=\"nx\">values</span><span class=\"p\">,</span> <span class=\"nx\">resultCapability</span><span class=\"p\">,</span> <span class=\"nx\">remainingElementsCount</span><span class=\"p\">);</span>\n\n        <span class=\"nx\">remainingElementsCount</span><span class=\"p\">.</span><span class=\"nx\">value</span> <span class=\"o\">=</span> <span class=\"nx\">remainingElementsCount</span><span class=\"p\">.</span><span class=\"nx\">value</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n        <span class=\"c1\">// in performPledgeAny, you'd attach resultCapability.resolve</span>\n        <span class=\"c1\">// and a custom reject element</span>\n        <span class=\"nx\">nextPledge</span><span class=\"p\">.</span><span class=\"nx\">then</span><span class=\"p\">(</span><span class=\"nx\">resolveElement</span><span class=\"p\">,</span> <span class=\"nx\">resultCapability</span><span class=\"p\">.</span><span class=\"nx\">reject</span><span class=\"p\">);</span>\n        <span class=\"nx\">index</span> <span class=\"o\">=</span> <span class=\"nx\">index</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>I’ve commented in the code the differences from <code class=\"highlighter-rouge\">performPledgeAny()</code> so hopefully you can see that there really isn’t a big difference. You’ll also find that the  <code class=\"highlighter-rouge\">createPledgeAllResolveElement()</code> function (which implements the <code class=\"highlighter-rouge\">Promise.all</code> Resolve Element Functions algorithm<sup id=\"fnref:4\"><a href="https://humanwhocodes.com/feeds/\&quot;#fn:4\"" class=\"footnote\">4</a></sup>) is very similar to the <code class=\"highlighter-rouge\">createPledgeAnyRejectElement()</code> function:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">function</span> <span class=\"nx\">createPledgeAllResolveElement</span><span class=\"p\">(</span><span class=\"nx\">index</span><span class=\"p\">,</span> <span class=\"nx\">values</span><span class=\"p\">,</span> <span class=\"nx\">pledgeCapability</span><span class=\"p\">,</span> <span class=\"nx\">remainingElementsCount</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\n    <span class=\"kd\">const</span> <span class=\"nx\">alreadyCalled</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"na\">value</span><span class=\"p\">:</span> <span class=\"kc\">false</span> <span class=\"p\">};</span>\n\n    <span class=\"k\">return</span> <span class=\"nx\">x</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">alreadyCalled</span><span class=\"p\">.</span><span class=\"nx\">value</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"k\">return</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"nx\">alreadyCalled</span><span class=\"p\">.</span><span class=\"nx\">value</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"p\">;</span>\n\n        <span class=\"nx\">values</span><span class=\"p\">[</span><span class=\"nx\">index</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nx\">x</span><span class=\"p\">;</span>\n        <span class=\"nx\">remainingElementsCount</span><span class=\"p\">.</span><span class=\"nx\">value</span> <span class=\"o\">=</span> <span class=\"nx\">remainingElementsCount</span><span class=\"p\">.</span><span class=\"nx\">value</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">remainingElementsCount</span><span class=\"p\">.</span><span class=\"nx\">value</span> <span class=\"o\">===</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"k\">return</span> <span class=\"nx\">pledgeCapability</span><span class=\"p\">.</span><span class=\"nx\">resolve</span><span class=\"p\">(</span><span class=\"nx\">values</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span>\n\n    <span class=\"p\">};</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>The <code class=\"highlighter-rouge\">createPledgeAllResolveElement()</code> function returns a function that is used as the fulfillment handler for the promise returned from <code class=\"highlighter-rouge\">Pledge.all()</code>. The <code class=\"highlighter-rouge\">x</code> variable is the fulfilled value and is stored in the <code class=\"highlighter-rouge\">values</code> array when available. When there are no further elements remaining, a resolved pledge is returned with the entire <code class=\"highlighter-rouge\">values</code> array.</p>\n\n<p>Hopefully you can now see the relationship between <code class=\"highlighter-rouge\">Promise.any()</code> and <code class=\"highlighter-rouge\">Promise.all()</code>. The <code class=\"highlighter-rouge\">Promise.any()</code> method returns a rejected promise with an array of values (wrapped in an <code class=\"highlighter-rouge\">AggregateError</code>) when all of the promises are rejected and a fulfilled promise with the value from the first fulfilled promise; the <code class=\"highlighter-rouge\">Promise.all()</code> method returns a fulfilled promises with an array of fulfillment values when all of the promises are fulfilled and returns a rejected promise with the reason from the first rejected promise (if one exists). So for <code class=\"highlighter-rouge\">Promise.any()</code>, you create a new promise and assign the same fulfillment handler to each promise that was passed in; for <code class=\"highlighter-rouge\">Promise.all()</code>, you create a new promise and assign the same rejection handler to each promise that was passed in. Then, in <code class=\"highlighter-rouge\">Promise.any()</code> you create a new rejection handler for each promise to track the rejection; for <code class=\"highlighter-rouge\">Promise.all()</code> you create a new fulfillment handler for each promise to track fulfillments.</p>\n\n<p>If it seems like <code class=\"highlighter-rouge\">Promise.any()</code> and <code class=\"highlighter-rouge\">Promise.all()</code> are just two sides of the same coin, then you are correct. The next step is to combine both of these methods into one, and that’s what <code class=\"highlighter-rouge\">Promise.allSettled()</code> does.</p>\n\n<h2 id=\"the-promiseallsettled-method\">The <code class=\"highlighter-rouge\">Promise.allSettled()</code> method</h2>\n\n<p>The <code class=\"highlighter-rouge\">Promise.allSettled()</code> method is the last of the four promise methods that work on multiple promises. This method is unique because the promise returned is never rejected unless an error is thrown during the iteration step. Instead, <code class=\"highlighter-rouge\">Promise.allSettled()</code> returns a promise that is fulfilled with an array of result objects. Each result object has two properties:</p>\n\n<ul>\n  <li><code class=\"highlighter-rouge\">status</code> - either <code class=\"highlighter-rouge\">\"fulfilled\"</code> or <code class=\"highlighter-rouge\">\"rejected\"</code></li>\n  <li><code class=\"highlighter-rouge\">value</code> - the value that was fulfilled or rejected</li>\n</ul>\n\n<p>The result objects allow you to collect information about every promise’s result in order to determine the next step to take. As such, <code class=\"highlighter-rouge\">Promise.allSettled()</code> will take longer to complete than any of the other multi-promise methods because it has no short-circuiting behavior. Whereas <code class=\"highlighter-rouge\">Promise.race()</code> returns as soon as the first promise is settled, <code class=\"highlighter-rouge\">Promise.any()</code> returns as soon as the first promise is resolved, and <code class=\"highlighter-rouge\">Promise.all()</code> returns as soon as the first promise is rejected, <code class=\"highlighter-rouge\">Promise.allSettled()</code> must wait until all promises have settled. Here are some examples showing how <code class=\"highlighter-rouge\">Promise.allSettled()</code> is used:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">const</span> <span class=\"nx\">promise1</span> <span class=\"o\">=</span> <span class=\"nb\">Promise</span><span class=\"p\">.</span><span class=\"nx\">allSettled</span><span class=\"p\">([</span>\n    <span class=\"nb\">Promise</span><span class=\"p\">.</span><span class=\"nx\">resolve</span><span class=\"p\">(</span><span class=\"mi\">42</span><span class=\"p\">),</span>\n    <span class=\"nb\">Promise</span><span class=\"p\">.</span><span class=\"nx\">reject</span><span class=\"p\">(</span><span class=\"mi\">43</span><span class=\"p\">),</span>\n    <span class=\"nb\">Promise</span><span class=\"p\">.</span><span class=\"nx\">resolve</span><span class=\"p\">(</span><span class=\"mi\">44</span><span class=\"p\">)</span>\n<span class=\"p\">]);</span>\n\n<span class=\"nx\">promise1</span><span class=\"p\">.</span><span class=\"nx\">then</span><span class=\"p\">(</span><span class=\"nx\">values</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">values</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]);</span>     <span class=\"c1\">// { status: \"fulfilled\", value: 42 }</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">values</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]);</span>     <span class=\"c1\">// { status: \"rejected\", value: 43 }</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">values</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]);</span>     <span class=\"c1\">// { status: \"fulfilled\", value: 44 }</span>\n<span class=\"p\">});</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">promise2</span> <span class=\"o\">=</span> <span class=\"nb\">Promise</span><span class=\"p\">.</span><span class=\"nx\">allSettled</span><span class=\"p\">([</span>\n    <span class=\"k\">new</span> <span class=\"nb\">Promise</span><span class=\"p\">(</span><span class=\"nx\">resolve</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n        <span class=\"nx\">setTimeout</span><span class=\"p\">(()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n            <span class=\"nx\">resolve</span><span class=\"p\">(</span><span class=\"mi\">42</span><span class=\"p\">);</span>\n        <span class=\"p\">},</span> <span class=\"mi\">500</span><span class=\"p\">);</span>\n    <span class=\"p\">}),</span>\n    <span class=\"nb\">Promise</span><span class=\"p\">.</span><span class=\"nx\">reject</span><span class=\"p\">(</span><span class=\"mi\">43</span><span class=\"p\">),</span>\n    <span class=\"nb\">Promise</span><span class=\"p\">.</span><span class=\"nx\">resolve</span><span class=\"p\">(</span><span class=\"mi\">44</span><span class=\"p\">)</span>\n<span class=\"p\">]);</span>\n\n<span class=\"nx\">promise2</span><span class=\"p\">.</span><span class=\"nx\">then</span><span class=\"p\">(</span><span class=\"nx\">values</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">values</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]);</span>     <span class=\"c1\">// { status: \"fulfilled\", value: 42 }</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">values</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]);</span>     <span class=\"c1\">// { status: \"rejected\", value: 43 }</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">values</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]);</span>     <span class=\"c1\">// { status: \"fulfilled\", value: 44 }</span>\n<span class=\"p\">});</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">promise3</span> <span class=\"o\">=</span> <span class=\"nb\">Promise</span><span class=\"p\">.</span><span class=\"nx\">allSettled</span><span class=\"p\">([</span>\n    <span class=\"nb\">Promise</span><span class=\"p\">.</span><span class=\"nx\">reject</span><span class=\"p\">(</span><span class=\"mi\">42</span><span class=\"p\">),</span>\n    <span class=\"nb\">Promise</span><span class=\"p\">.</span><span class=\"nx\">reject</span><span class=\"p\">(</span><span class=\"mi\">43</span><span class=\"p\">),</span>\n    <span class=\"nb\">Promise</span><span class=\"p\">.</span><span class=\"nx\">reject</span><span class=\"p\">(</span><span class=\"mi\">44</span><span class=\"p\">)</span>\n<span class=\"p\">]);</span>\n\n<span class=\"nx\">promise3</span><span class=\"p\">.</span><span class=\"nx\">then</span><span class=\"p\">(</span><span class=\"nx\">values</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">values</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]);</span>     <span class=\"c1\">// { status: \"rejected\", value: 42 }</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">values</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]);</span>     <span class=\"c1\">// { status: \"rejected\", value: 43 }</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">values</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]);</span>     <span class=\"c1\">// { status: \"rejected\", value: 44 }</span>\n<span class=\"p\">});</span>\n</code></pre></div></div>\n\n<p>Notice that a fulfilled promise is returned even when all of the promises passed to <code class=\"highlighter-rouge\">Promise.allSettled()</code> are rejected.</p>\n\n<h3 id=\"creating-the-pledgeallsettled-method\">Creating the <code class=\"highlighter-rouge\">Pledge.allSettled()</code> method</h3>\n\n<p>Once again, the <code class=\"highlighter-rouge\">Promise.allSettled()</code> method follows the same basic algorithm<sup id=\"fnref:5\"><a href="https://humanwhocodes.com/feeds/\&quot;#fn:5\"" class=\"footnote\">5</a></sup> as the other three multi-promise methods, so the <code class=\"highlighter-rouge\">Pledge.allSettled()</code> implementation is the same the others except for naming:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">class</span> <span class=\"nx\">Pledge</span> <span class=\"p\">{</span>\n\n    <span class=\"c1\">// other methods omitted for space</span>\n\n    <span class=\"kd\">static</span> <span class=\"nx\">allSettled</span><span class=\"p\">(</span><span class=\"nx\">iterable</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\n        <span class=\"kd\">const</span> <span class=\"nx\">C</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">;</span>\n        <span class=\"kd\">const</span> <span class=\"nx\">pledgeCapability</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">PledgeCapability</span><span class=\"p\">(</span><span class=\"nx\">C</span><span class=\"p\">);</span>\n        <span class=\"kd\">let</span> <span class=\"nx\">iteratorRecord</span><span class=\"p\">;</span>\n\n        <span class=\"k\">try</span> <span class=\"p\">{</span>\n            <span class=\"kd\">const</span> <span class=\"nx\">pledgeResolve</span> <span class=\"o\">=</span> <span class=\"nx\">getPledgeResolve</span><span class=\"p\">(</span><span class=\"nx\">C</span><span class=\"p\">);</span>\n            <span class=\"nx\">iteratorRecord</span> <span class=\"o\">=</span> <span class=\"nx\">getIterator</span><span class=\"p\">(</span><span class=\"nx\">iterable</span><span class=\"p\">);</span>\n            <span class=\"kd\">const</span> <span class=\"nx\">result</span> <span class=\"o\">=</span> <span class=\"nx\">performPledgeAllSettled</span><span class=\"p\">(</span><span class=\"nx\">iteratorRecord</span><span class=\"p\">,</span> <span class=\"nx\">C</span><span class=\"p\">,</span> <span class=\"nx\">pledgeCapability</span><span class=\"p\">,</span> <span class=\"nx\">pledgeResolve</span><span class=\"p\">);</span>\n            <span class=\"k\">return</span> <span class=\"nx\">result</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span> <span class=\"k\">catch</span> <span class=\"p\">(</span><span class=\"nx\">error</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\n            <span class=\"kd\">let</span> <span class=\"nx\">result</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">ThrowCompletion</span><span class=\"p\">(</span><span class=\"nx\">error</span><span class=\"p\">);</span>\n\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">iteratorRecord</span> <span class=\"o\">&amp;&amp;</span> <span class=\"nx\">iteratorRecord</span><span class=\"p\">.</span><span class=\"nx\">done</span> <span class=\"o\">===</span> <span class=\"kc\">false</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                <span class=\"nx\">result</span> <span class=\"o\">=</span> <span class=\"nx\">iteratorClose</span><span class=\"p\">(</span><span class=\"nx\">iteratorRecord</span><span class=\"p\">,</span> <span class=\"nx\">result</span><span class=\"p\">);</span>\n            <span class=\"p\">}</span>\n\n            <span class=\"nx\">pledgeCapability</span><span class=\"p\">.</span><span class=\"nx\">reject</span><span class=\"p\">(</span><span class=\"nx\">result</span><span class=\"p\">.</span><span class=\"nx\">value</span><span class=\"p\">);</span>\n            <span class=\"k\">return</span> <span class=\"nx\">pledgeCapability</span><span class=\"p\">.</span><span class=\"nx\">pledge</span><span class=\"p\">;</span>\n\n        <span class=\"p\">}</span>\n\n    <span class=\"p\">}</span>\n\n    <span class=\"c1\">// other methods omitted for space</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>The algorithm for the <code class=\"highlighter-rouge\">PerformPromiseAllSettled()</code> operation<sup id=\"fnref:6\"><a href="https://humanwhocodes.com/feeds/\&quot;#fn:6\"" class=\"footnote\">6</a></sup> should look very familiar at this point. In fact, it is almost exactly the same as the <code class=\"highlighter-rouge\">PerformPromiseAll()</code> operation. Just like <code class=\"highlighter-rouge\">PerformPromiseAll()</code>, <code class=\"highlighter-rouge\">PerformPromiseAllSettled()</code> uses a <code class=\"highlighter-rouge\">remainingElementsCount</code> object to track how many promises must still be settled, and <code class=\"highlighter-rouge\">index</code> variable to track where each result should go in the <code class=\"highlighter-rouge\">values</code> array, and a <code class=\"highlighter-rouge\">values</code> array to keep track of promise results. Unlike <code class=\"highlighter-rouge\">PerformPromiseAll()</code>, the values stored in the <code class=\"highlighter-rouge\">values</code> array in <code class=\"highlighter-rouge\">PerformPromiseAllSettled()</code> are the result objects I mentioned in the previous section.</p>\n\n<p>The other significant difference between <code class=\"highlighter-rouge\">PerformPromiseAll()</code> and <code class=\"highlighter-rouge\">PerformPromiseAllSettled()</code> is that the latter creates a custom rejection handler for each promise in addition to a custom fulfillment handler. Those handlers are also created using the same basic algorithm you’ve already seen in other multi-promise methods.</p>\n\n<p>Without any further delay, here’s the implementation of <code class=\"highlighter-rouge\">performPledgeAllSettled()</code>:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">function</span> <span class=\"nx\">performPledgeAllSettled</span><span class=\"p\">(</span><span class=\"nx\">iteratorRecord</span><span class=\"p\">,</span> <span class=\"kd\">constructor</span><span class=\"p\">,</span> <span class=\"nx\">resultCapability</span><span class=\"p\">,</span> <span class=\"nx\">pledgeResolve</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\n    <span class=\"nx\">assertIsConstructor</span><span class=\"p\">(</span><span class=\"kd\">constructor</span><span class=\"p\">);</span>\n    <span class=\"nx\">assertIsCallable</span><span class=\"p\">(</span><span class=\"nx\">pledgeResolve</span><span class=\"p\">);</span>\n\n    <span class=\"kd\">const</span> <span class=\"nx\">values</span> <span class=\"o\">=</span> <span class=\"p\">[];</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">remainingElementsCount</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"na\">value</span><span class=\"p\">:</span> <span class=\"mi\">1</span> <span class=\"p\">};</span>\n    <span class=\"kd\">let</span> <span class=\"nx\">index</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n\n    <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"kd\">let</span> <span class=\"nx\">next</span><span class=\"p\">;</span>\n\n        <span class=\"k\">try</span> <span class=\"p\">{</span>\n            <span class=\"nx\">next</span> <span class=\"o\">=</span> <span class=\"nx\">iteratorStep</span><span class=\"p\">(</span><span class=\"nx\">iteratorRecord</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span> <span class=\"k\">catch</span> <span class=\"p\">(</span><span class=\"nx\">error</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"nx\">iteratorRecord</span><span class=\"p\">.</span><span class=\"nx\">done</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"p\">;</span>\n            <span class=\"nx\">resultCapability</span><span class=\"p\">.</span><span class=\"nx\">reject</span><span class=\"p\">(</span><span class=\"nx\">error</span><span class=\"p\">);</span>\n            <span class=\"k\">return</span> <span class=\"nx\">resultCapability</span><span class=\"p\">.</span><span class=\"nx\">pledge</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">next</span> <span class=\"o\">===</span> <span class=\"kc\">false</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"nx\">remainingElementsCount</span><span class=\"p\">.</span><span class=\"nx\">value</span> <span class=\"o\">=</span> <span class=\"nx\">remainingElementsCount</span><span class=\"p\">.</span><span class=\"nx\">value</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">remainingElementsCount</span><span class=\"p\">.</span><span class=\"nx\">value</span> <span class=\"o\">===</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                <span class=\"nx\">resultCapability</span><span class=\"p\">.</span><span class=\"nx\">resolve</span><span class=\"p\">(</span><span class=\"nx\">values</span><span class=\"p\">);</span>\n            <span class=\"p\">}</span>\n\n            <span class=\"k\">return</span> <span class=\"nx\">resultCapability</span><span class=\"p\">.</span><span class=\"nx\">pledge</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"kd\">let</span> <span class=\"nx\">nextValue</span><span class=\"p\">;</span>\n\n        <span class=\"k\">try</span> <span class=\"p\">{</span>\n            <span class=\"nx\">nextValue</span> <span class=\"o\">=</span> <span class=\"nx\">iteratorValue</span><span class=\"p\">(</span><span class=\"nx\">next</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span> <span class=\"k\">catch</span> <span class=\"p\">(</span><span class=\"nx\">error</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"nx\">iteratorRecord</span><span class=\"p\">.</span><span class=\"nx\">done</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"p\">;</span>\n            <span class=\"nx\">resultCapability</span><span class=\"p\">.</span><span class=\"nx\">reject</span><span class=\"p\">(</span><span class=\"nx\">error</span><span class=\"p\">);</span>\n            <span class=\"k\">return</span> <span class=\"nx\">resultCapability</span><span class=\"p\">.</span><span class=\"nx\">pledge</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"nx\">values</span><span class=\"p\">.</span><span class=\"nx\">push</span><span class=\"p\">(</span><span class=\"kc\">undefined</span><span class=\"p\">);</span>\n        <span class=\"kd\">const</span> <span class=\"nx\">nextPledge</span> <span class=\"o\">=</span> <span class=\"nx\">pledgeResolve</span><span class=\"p\">.</span><span class=\"nx\">call</span><span class=\"p\">(</span><span class=\"kd\">constructor</span><span class=\"p\">,</span> <span class=\"nx\">nextValue</span><span class=\"p\">);</span>\n        <span class=\"kd\">const</span> <span class=\"nx\">resolveElement</span> <span class=\"o\">=</span> <span class=\"nx\">createPledgeAllSettledResolveElement</span><span class=\"p\">(</span><span class=\"nx\">index</span><span class=\"p\">,</span> <span class=\"nx\">values</span><span class=\"p\">,</span> <span class=\"nx\">resultCapability</span><span class=\"p\">,</span> <span class=\"nx\">remainingElementsCount</span><span class=\"p\">);</span>\n\n        <span class=\"c1\">// the only significant difference from performPledgeAll is adding this</span>\n        <span class=\"c1\">// custom rejection handler to each promise instead of resultCapability.reject</span>\n        <span class=\"kd\">const</span> <span class=\"nx\">rejectElement</span> <span class=\"o\">=</span> <span class=\"nx\">createPledgeAllSettledRejectElement</span><span class=\"p\">(</span><span class=\"nx\">index</span><span class=\"p\">,</span> <span class=\"nx\">values</span><span class=\"p\">,</span> <span class=\"nx\">resultCapability</span><span class=\"p\">,</span> <span class=\"nx\">remainingElementsCount</span><span class=\"p\">);</span>\n\n        <span class=\"nx\">remainingElementsCount</span><span class=\"p\">.</span><span class=\"nx\">value</span> <span class=\"o\">=</span> <span class=\"nx\">remainingElementsCount</span><span class=\"p\">.</span><span class=\"nx\">value</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n        <span class=\"nx\">nextPledge</span><span class=\"p\">.</span><span class=\"nx\">then</span><span class=\"p\">(</span><span class=\"nx\">resolveElement</span><span class=\"p\">,</span> <span class=\"nx\">rejectElement</span><span class=\"p\">);</span>\n        <span class=\"nx\">index</span> <span class=\"o\">=</span> <span class=\"nx\">index</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>As you can see, the only significant change from <code class=\"highlighter-rouge\">performPledgeAll()</code> is the addition of the <code class=\"highlighter-rouge\">rejectElement</code> that is used instead of <code class=\"highlighter-rouge\">resultCapability.reject</code>. Otherwise, the functionality is exactly the same. The heavy lifting is really done by the <code class=\"highlighter-rouge\">createPledgeAllSettledResolveElement()</code> and <code class=\"highlighter-rouge\">createPledgeAllSettledRejectElement()</code> functions. These functions represent the corresponding steps in the specification for Promise.allSettled Resolve Element Functions<sup id=\"fnref:7\"><a href="https://humanwhocodes.com/feeds/\&quot;#fn:7\"" class=\"footnote\">7</a></sup> and Promise.allSettled Reject Element Functions<sup id=\"fnref:8\"><a href="https://humanwhocodes.com/feeds/\&quot;#fn:8\"" class=\"footnote\">8</a></sup> and are essentially the same function with the notable exception that one specifies the result as “fulfilled” and the other specifies the result as “rejected”. Here are the implementations:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">function</span> <span class=\"nx\">createPledgeAllSettledResolveElement</span><span class=\"p\">(</span><span class=\"nx\">index</span><span class=\"p\">,</span> <span class=\"nx\">values</span><span class=\"p\">,</span> <span class=\"nx\">pledgeCapability</span><span class=\"p\">,</span> <span class=\"nx\">remainingElementsCount</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\n    <span class=\"kd\">const</span> <span class=\"nx\">alreadyCalled</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"na\">value</span><span class=\"p\">:</span> <span class=\"kc\">false</span> <span class=\"p\">};</span>\n\n    <span class=\"k\">return</span> <span class=\"nx\">x</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">alreadyCalled</span><span class=\"p\">.</span><span class=\"nx\">value</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"k\">return</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"nx\">alreadyCalled</span><span class=\"p\">.</span><span class=\"nx\">value</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"p\">;</span>\n\n        <span class=\"nx\">values</span><span class=\"p\">[</span><span class=\"nx\">index</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n            <span class=\"na\">status</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">fulfilled</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n            <span class=\"na\">value</span><span class=\"p\">:</span> <span class=\"nx\">x</span>\n        <span class=\"p\">};</span>\n\n        <span class=\"nx\">remainingElementsCount</span><span class=\"p\">.</span><span class=\"nx\">value</span> <span class=\"o\">=</span> <span class=\"nx\">remainingElementsCount</span><span class=\"p\">.</span><span class=\"nx\">value</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">remainingElementsCount</span><span class=\"p\">.</span><span class=\"nx\">value</span> <span class=\"o\">===</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"k\">return</span> <span class=\"nx\">pledgeCapability</span><span class=\"p\">.</span><span class=\"nx\">resolve</span><span class=\"p\">(</span><span class=\"nx\">values</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span>\n\n    <span class=\"p\">};</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">function</span> <span class=\"nx\">createPledgeAllSettledRejectElement</span><span class=\"p\">(</span><span class=\"nx\">index</span><span class=\"p\">,</span> <span class=\"nx\">values</span><span class=\"p\">,</span> <span class=\"nx\">pledgeCapability</span><span class=\"p\">,</span> <span class=\"nx\">remainingElementsCount</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\n    <span class=\"kd\">const</span> <span class=\"nx\">alreadyCalled</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"na\">value</span><span class=\"p\">:</span> <span class=\"kc\">false</span> <span class=\"p\">};</span>\n\n    <span class=\"k\">return</span> <span class=\"nx\">x</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">alreadyCalled</span><span class=\"p\">.</span><span class=\"nx\">value</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"k\">return</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"nx\">alreadyCalled</span><span class=\"p\">.</span><span class=\"nx\">value</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"p\">;</span>\n\n        <span class=\"nx\">values</span><span class=\"p\">[</span><span class=\"nx\">index</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n            <span class=\"na\">status</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">rejected</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n            <span class=\"na\">value</span><span class=\"p\">:</span> <span class=\"nx\">x</span>\n        <span class=\"p\">};</span>\n        \n        <span class=\"nx\">remainingElementsCount</span><span class=\"p\">.</span><span class=\"nx\">value</span> <span class=\"o\">=</span> <span class=\"nx\">remainingElementsCount</span><span class=\"p\">.</span><span class=\"nx\">value</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">remainingElementsCount</span><span class=\"p\">.</span><span class=\"nx\">value</span> <span class=\"o\">===</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"k\">return</span> <span class=\"nx\">pledgeCapability</span><span class=\"p\">.</span><span class=\"nx\">resolve</span><span class=\"p\">(</span><span class=\"nx\">values</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span>\n\n    <span class=\"p\">};</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>You’ve already seen several of these functions at this point, so I’ll just point out how these are different. First, even the reject element calls <code class=\"highlighter-rouge\">pledgeCapability.resolve()</code> because the returned promise should never be rejected due to a passed-in promise being rejected. Next, the value inserted into the <code class=\"highlighter-rouge\">values</code> array is an object instead of just <code class=\"highlighter-rouge\">x</code> (as you saw in <code class=\"highlighter-rouge\">Promise.any()</code> and <code class=\"highlighter-rouge\">Promise.all()</code>). Both the resolve and reject elements are just inserting a result object into the <code class=\"highlighter-rouge\">values</code> and array, and when there are no further promises to wait for, returns a resolved promise.</p>\n\n<h2 id=\"wrapping-up\">Wrapping Up</h2>\n\n<p>This post covered creating <code class=\"highlighter-rouge\">Promise.all()</code> and <code class=\"highlighter-rouge\">Promise.allSettled()</code> from scratch. These are the last two of the built-in methods that work on multiple promises (the previous two were covered in part 5). The <code class=\"highlighter-rouge\">Promise.all()</code> method is essentially the inverse of the <code class=\"highlighter-rouge\">Promise.any()</code> method: it returns a rejected promise if any of the promises is rejected and returns a promise that is fulfilled to an array of promise results if all promises are fulfilled. The <code class=\"highlighter-rouge\">Promise.allSettled()</code> method combines aspects of <code class=\"highlighter-rouge\">Promise.all()</code> and <code class=\"highlighter-rouge\">Promise.any()</code> so that it almost always returns a fulfilled promise with an array of result objects containing the results of both fulfilled and rejected promises.</p>\n\n<p>In the next, and final, part of this series, I’ll be covering unhandled promise rejections.</p>\n\n<p>All of this code is available in the <a href="https://humanwhocodes.com/feeds/\&quot;https://github.com/humanwhocodes/pledge\&quot;">Pledge</a> on GitHub. I hope you’ll download it and try it out to get a better understanding of promises.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n  <ol>\n    <li id=\"fn:1\">\n      <p><a href="https://humanwhocodes.com/feeds/\&quot;https://tc39.es/ecma262/#sec-promise.all\"">Promise.all ( iterable )</a> <a href="https://humanwhocodes.com/feeds/\&quot;#fnref:1\"" class=\"reversefootnote\">&#8617;</a></p>\n    </li>\n    <li id=\"fn:2\">\n      <p><a href="https://humanwhocodes.com/feeds/\&quot;https://tc39.es/ecma262/#sec-performpromiseall\"">PerformPromiseAll ( iteratorRecord, constructor, resultCapability, promiseResolve )</a> <a href="https://humanwhocodes.com/feeds/\&quot;#fnref:2\"" class=\"reversefootnote\">&#8617;</a></p>\n    </li>\n    <li id=\"fn:3\">\n      <p><a href="https://humanwhocodes.com/feeds/\&quot;https://tc39.es/ecma262/#sec-performpromiseany\"">PerformPromiseAny ( iteratorRecord, constructor, resultCapability, promiseResolve )</a> <a href="https://humanwhocodes.com/feeds/\&quot;#fnref:3\"" class=\"reversefootnote\">&#8617;</a></p>\n    </li>\n    <li id=\"fn:4\">\n      <p><a href="https://humanwhocodes.com/feeds/\&quot;https://tc39.es/ecma262/#sec-promise.all-resolve-element-functions\"">Promise.all Resolve Element Functions</a> <a href="https://humanwhocodes.com/feeds/\&quot;#fnref:4\"" class=\"reversefootnote\">&#8617;</a></p>\n    </li>\n    <li id=\"fn:5\">\n      <p><a href="https://humanwhocodes.com/feeds/\&quot;https://tc39.es/ecma262/#sec-performpromiseallsettled\"">Promise.allSettled ( iterable )</a> <a href="https://humanwhocodes.com/feeds/\&quot;#fnref:5\"" class=\"reversefootnote\">&#8617;</a></p>\n    </li>\n    <li id=\"fn:6\">\n      <p><a href="https://humanwhocodes.com/feeds/\&quot;https://tc39.es/ecma262/#sec-performpromiseallsettled\"">PerformPromiseAllSettled ( iteratorRecord, constructor, resultCapability, promiseResolve )</a> <a href="https://humanwhocodes.com/feeds/\&quot;#fnref:6\"" class=\"reversefootnote\">&#8617;</a></p>\n    </li>\n    <li id=\"fn:7\">\n      <p><a href="https://humanwhocodes.com/feeds/\&quot;https://tc39.es/ecma262/#sec-promise.allsettled-resolve-element-functions\"">Promise.allSetled Resolve Element Functions</a> <a href="https://humanwhocodes.com/feeds/\&quot;#fnref:7\"" class=\"reversefootnote\">&#8617;</a></p>\n    </li>\n    <li id=\"fn:8\">\n      <p><a href="https://humanwhocodes.com/feeds/\&quot;https://tc39.es/ecma262/#sec-promise.allsettled-reject-element-functions\"">Promise.allSetled Reject Element Functions</a> <a href="https://humanwhocodes.com/feeds/\&quot;#fnref:8\"" class=\"reversefootnote\">&#8617;</a></p>\n    </li>\n  </ol>\n</div>\n",
            "url": "https://humanwhocodes.com/blog/2020/12/creating-javascript-promise-from-scratch-promise-all-allsettled/",
            
            
            
            "tags": ["JavaScript","Promises","ECMAScript 6"],
            
            "date_published": "2020-12-16T00:00:00+00:00",
            "date_modified": "2020-12-16T00:00:00+00:00",
            
                "author": 
                ""
                
            
        },
    
        {
            "id": "https://humanwhocodes.com/blog/2020/11/creating-javascript-promise-from-scratch-promise-race-any/",
            "title": "Creating a JavaScript promise from scratch, Part 5: Promise.race() and Promise.any()",
            "summary": "In the previous posts in this series, I discussed implementing a promise from scratch in JavaScript. Now that there’s a full promise implementation, it’s time to look at how you can monitor multiple promises at once using Promise.race() and Promise.any() (Promise.all() and Promise.allSettled() will be covered in the next post). You’ll see that, for the most part, all of the methods that work with multiple promises follow a similar algorithm, which makes it fairly easy to move from implementing one of these methods to the next.",
            "content_text": "In the previous posts in this series, I discussed implementing a promise from scratch in JavaScript. Now that there’s a full promise implementation, it’s time to look at how you can monitor multiple promises at once using Promise.race() and Promise.any() (Promise.all() and Promise.allSettled() will be covered in the next post). You’ll see that, for the most part, all of the methods that work with multiple promises follow a similar algorithm, which makes it fairly easy to move from implementing one of these methods to the next.\n\nNote: This is the fifth post in my series about creating JavaScript promises from scratch. If you haven’t already read the first post, the second post, the third post, and the fourth post, I would suggest you do so because this post builds on the topics covered in those posts.\n\nAs a reminder, this series is based on my promise library, Pledge. You can view and download all of the source code from GitHub.\n\nPrerequisite: Using iterators\n\nMost of the time you see examples using Promise.race() and Promise.any() with an array being passed as the only argument, like this:\n\nPromise.race([p1, p2, p3]).then(value =&gt; {\n    console.log(value);\n});\n\n\nBecause of this, it’s easy to assume that the argument to Promise.race() must be an array. In fact, the argument doesn’t need to be an array, but it must be an iterable. An iterable is just an object that has a Symbol.iterator method that returns an iterator. An iterator is an object with a next() method that returns an object containing two properties: value, the next value in the iterator or undefined if none are left, and done, a Boolean value that is set to true when there are no more values in the iterator.\n\nArrays are iterables by default, meaning they have a default Symbol.iterator method that returns an iterator. As such, you can pass an array anywhere an iterator is required and it just works. What that means for the implementations of Promise.race() and Promise.all() is that they must work with iterables, and unfortunately, ECMA-262 makes working with iterables a little bit opaque.\n\nThe first operation we need is GetIterator()1, which is the operation that retrieves the iterator for an iterable and returns an IteratorRecord containing the iterator, the next() method for that iterator, and a done flag. The algorithm is a bit difficult to understand, but fundamentally GetIterator() will attempt to retrieve either an async or sync iterator based on a hint that is passed. For the purposes of this post, just know that only sync iterators will be used, so you can effectively ignore the parts that have to do with async iterators. Here’s the operation translated into JavaScript:\n\nexport function getIterator(obj, hint=\"sync\", method) {\n\n    if (hint !== \"sync\" &amp;&amp; hint !== \"async\") {\n        throw new TypeError(\"Invalid hint.\");\n    }\n\n    if (method === undefined) {\n        \n        if (hint === \"async\") {\n        \n            method = obj[Symbol.asyncIterator];\n        \n            if (method === undefined) {\n                const syncMethod = obj[Symbol.iterator];\n                const syncIteratorRecord = getIterator(obj, \"sync\", syncMethod);\n\n                // can't accurately represent CreateAsyncFromSyncIterator()\n                return syncIteratorRecord;\n            }\n        } else {\n            method = obj[Symbol.iterator];\n        }\n    }\n\n    const iterator = method.call(obj);\n\n    if (!isObject(iterator)) {\n        throw new TypeError(\"Iterator must be an object.\");\n    }\n\n    const nextMethod = iterator.next;\n\n    return {\n        iterator,\n        nextMethod,\n        done: false\n    };\n\n}\n\n\nIn ECMA-262, you always use IteratorRecord to work with iterators instead of using the iterator directly. Similarly, there are several operations that are used to manually work with an iterator:\n\n\n  IteratorNext()2 - calls the next() method on an iterator and returns the result.\n  ItereatorComplete()3 - returns a Boolean indicating if the iterator is done (simply reads the done field of the given result from IteratorNext()).\n  IteratorValue()4 - returns the value field of the given result from IteratorNext().\n  IteratorStep()5 - returns the result from IteratorNext() if done is false; returns false if done is true (just for fun, I suppose).\n\n\nEach of these operations is pretty straightforward as they simply wrap built-in iterator operations. Here are the operations implemented in JavaScript:\n\nexport function iteratorNext(iteratorRecord, value) {\n\n    let result;\n\n    if (value === undefined) {\n        result = iteratorRecord.nextMethod.call(iteratorRecord.iterator);\n    } else {\n        result = iteratorRecord.nextMethod.call(iteratorRecord.iterator, value);\n    }\n\n    if (!isObject(result)) {\n        throw new TypeError(\"Result must be an object.\");\n    }\n\n    return result;\n\n}\n\nexport function iteratorComplete(iterResult) {\n\n    if (!isObject(iterResult)) {\n        throw new TypeError(\"Argument must be an object.\");\n    }\n\n    return Boolean(iterResult.done);\n}\n\nexport function iteratorValue(iterResult) {\n\n    if (!isObject(iterResult)) {\n        throw new TypeError(\"Argument must be an object.\");\n    }\n\n    return iterResult.value;\n}\n\nexport function iteratorStep(iteratorRecord) {\n\n    const result = iteratorNext(iteratorRecord);\n    const done = iteratorComplete(result);\n    \n    if (done) {\n        return false;\n    }\n\n    return result;\n}\n\n\nTo get an idea about how these operations are used, consider this simple loop using an array:\n\nconst values = [1, 2, 3];\n\nfor (const nextValue of values) {\n    console.log(nextValue);\n}\n\n\nThe for-of loop operates on the iterator creates for the values array. Here’s a similar loop using the iterator functions defined previously:\n\nconst values = [1, 2, 3];\nconst iteratorRecord = getIterator(values);\n\n// ECMA-262 always uses infinite loops that break\nwhile (true) {\n\n        let next;\n        \n        /*\n         * Get the next step in the iterator. If there's an error, don't forget\n         * to set the `done` property to `true` for posterity.\n         */\n        try {\n            next = iteratorStep(iteratorRecord);\n        } catch (error) {\n            iteratorRecord.done = true;\n            throw error;\n        }\n\n        // if `next` is false then we are done and can exit\n        if (next === false) {\n            iteratorRecord.done = true;\n            break;\n        }\n\n        let nextValue;\n\n        /*\n         * Try to retrieve the value of the next step. The spec says this might\n         * actually throw an error, so once again, catch that error, set the\n         * `done` field to `true`, and then re-throw the error.\n         */\n        try {\n            nextValue = iteratorValue(next);\n        } catch (error) {\n            iteratorRecord.done = true;\n            throw error;\n        }\n\n        // actually output the value\n        console.log(nextValue);\n    }\n}\n\n\nAs you can probably tell from this example, there’s a lot of unnecessary complexity involved with looping over an iterator in ECMA-262. Just know that all of these operations can be easily replaced with a for-of loop. I chose to use the iterator operations so that it’s easier to go back and forth between the code and the specification, but there are definitely more concise and less error-prone ways of implementing the same functionality.\n\nThe Promise.race() method\n\nThe Promise.race() method is the simplest of the methods that work on multiple promises: whichever promise settles first, regardless if it’s fulfilled or rejected, that result is passed through to the returned promise. So if the first promise to settle is fulfilled, then the returned promise is fulfilled with the same value; if the first promise to settle is rejected, then the returned promise is rejected with the same reason. Here are a couple examples:\n\nconst promise1 = Promise.race([\n    Promise.resolve(42),\n    Promise.reject(43),\n    Promise.resolve(44)\n]);\n\npromise1.then(value =&gt; {\n    console.log(value);     // 42\n});\n\nconst promise2 = Promise.race([\n    new Promise(resolve =&gt; {\n        setTimeout(() =&gt; {\n            resolve(42);\n        }, 500);\n    }),\n    Promise.reject(43),\n    Promise.resolve(44)\n]);\n\npromise2.catch(reason =&gt; {\n    console.log(reason);    // 43\n});\n\n\nThe behavior of Promise.race() makes it easier to implement than the other three methods that work on multiple promises, all of which require keeping at least one array to track results.\n\nCreating the Pledge.race() method\n\nThe specification6 for Promise.race() describes the algorithm as follows:\n\n\n  Let C be the this value.\n  Let promiseCapability be ? NewPromiseCapability(C).\n  Let promiseResolve be GetPromiseResolve(C).\n  IfAbruptRejectPromise(promiseResolve, promiseCapability).\n  Let iteratorRecord be GetIterator(iterable).\n  IfAbruptRejectPromise(iteratorRecord, promiseCapability).\n  Let result be PerformPromiseRace(iteratorRecord, C, promiseCapability, promiseResolve).\n  If result is an abrupt completion, then\n    \n      If iteratorRecord.[[Done]] is false, set result to IteratorClose(iteratorRecord, result).\n      IfAbruptRejectPromise(result, promiseCapability).\n    \n  \n  Return Completion(result).\n\n\nThe main algorithm for Promise.race() actually takes place in an operation called PerformPromiseRace. The rest is just setting up all of the appropriate data to pass to the operation and then interpreting the result of the operation. All four of the methods that deal with multiple promises, Promise.race(), Promise.any(), Promise.all(), and Promise.allSettled(), all follow this same basic algorithm for their methods with the only difference being the operations they delegate to. This will become clear later in this post when I discussed Promise.any().\n\nclass Pledge {\n\n    // other methods omitted for space\n\n    static race(iterable) {\n\n        const C = this;\n        const pledgeCapability = new PledgeCapability(C);\n        let iteratorRecord;\n\n        try {\n            const pledgeResolve = getPledgeResolve(C);\n            iteratorRecord = getIterator(iterable);\n            const result = performPledgeRace(iteratorRecord, C, pledgeCapability, pledgeResolve);\n            return result;\n        } catch (error) {\n\n            let result = new ThrowCompletion(error);\n\n            if (iteratorRecord &amp;&amp; iteratorRecord.done === false) {\n                result = iteratorClose(iteratorRecord, result);\n            }\n\n            pledgeCapability.reject(result.value);\n            return pledgeCapability.pledge;\n        }\n\n    }\n\n    // other methods omitted for space\n}\n\n\nLike many of the other methods in the Pledge class, this one starts by retrieving the this value and creating a PledgeCapability object. The next step is to retrieve the resolve method from the constructor, which basically means pledgeResolve is set equal to Pledge.resolve() (discussed in part 4). The getPledgeResolve() method is the equivalent of the GetPromiseResolve7 operation in the spec. Here’s the code:\n\nfunction getPledgeResolve(pledgeConstructor) {\n\n    assertIsConstructor(pledgeConstructor);\n    const pledgeResolve = pledgeConstructor.resolve;\n\n    if (!isCallable(pledgeResolve)) {\n        throw new TypeError(\"resolve is not callable.\");\n    }\n\n    return pledgeResolve;\n}\n\n\nAfter that, an iterator is retrieved for the iterable that was passed into the method. All of the important pieces of data are passed into performPledgeRace(), which I’ll cover in a moment.\n\nThe catch clause of the try-catch statement handles any errors that are thrown. In order to make the code easier to compare the specification, I’ve chosen to once again use completion records (completion records were introduced in part 3 of this series). This part isn’t very important to the overall algorithm, so I’m going to skip explaining it and the iteratorClose() function in detail. Just know that when an error is thrown, the iterator might not have completed and so iteratorClose() is used to close out the iterator, freeing up any memory associated with it. The iteratorClose() function may return its own error, and if so, that’s the error that should be rejected into the created pledge. If you’d like to learn more about iteratorClose(), please check out the source code on GitHub.\n\nThe next step is to implement the PerformPromiseRace()8 operation as performPledgeRace(). The algorithm for this operation seems more complicated than it actually is due to the iterator loop I described at the start of this post. See if you can figure out what is happening in this code:\n\nfunction performPledgeRace(iteratorRecord, constructor, resultCapability, pledgeResolve) {\n\n    assertIsConstructor(constructor);\n    assertIsCallable(pledgeResolve);\n\n    while (true) {\n\n        let next;\n        \n        try {\n            next = iteratorStep(iteratorRecord);\n        } catch (error) {\n            iteratorRecord.done = true;\n            resultCapability.reject(error);\n            return resultCapability.pledge;\n        }\n\n        if (next === false) {\n            iteratorRecord.done = true;\n            return resultCapability.pledge;\n        }\n\n        let nextValue;\n\n        try {\n            nextValue = iteratorValue(next);\n        } catch (error) {\n            iteratorRecord.done = true;\n            resultCapability.reject(error);\n            return resultCapability.pledge;\n        }\n\n        const nextPledge = pledgeResolve.call(constructor, nextValue);\n        nextPledge.then(resultCapability.resolve, resultCapability.reject);\n    }\n\n}\n\n\nThe first thing to notice is that, unlike the loops described in the first section of this post, no errors are thrown. Instead, any errors that occur are passed to the resultCapability.reject() method and the created pledge object is returned. All of the error checking really gets in the way of understanding what is a very simple algorithm, so here’s a version that better illustrates how the algorithm works using JavaScript you’d write in real life:\n\nfunction performPledgeRaceSimple(iteratorRecord, constructor, resultCapability, pledgeResolve) {\n\n    assertIsConstructor(constructor);\n    assertIsCallable(pledgeResolve);\n\n    // You could actually just pass the iterator instead of `iteratatorRecord`\n    const iterator = iteratorRecord.iterator;\n\n    try {\n\n        // loop over every value in the iterator\n        for (const nextValue of iterator) {\n            const nextPledge = pledgeResolve.call(constructor, nextValue);\n            nextPledge.then(resultCapability.resolve, resultCapability.reject);\n        }\n\n    } catch (error) {\n        resultCapability.reject(error);\n    }\n\n    iteratorRecord.done = true;\n    return resultCapability.pledge;\n}\n\n\nWith this stripped-down version of performPledgeRace(), you can see that the fundamental algorithm is take each value returned from the iterator and pass it to Pledge.resolve() to ensure you have an instance of Pledge to work with. The iterator can contain both Pledge objects and any other non-Pledge value, so the best way to ensure you have a Pledge object is to pass all values to Pledge.resolve() and use the result (nextPledge). Then, all you need to do is attach resultCapability.resolve() as the fulfillment handler and resultCapability.reject() as the rejection handler. Keep in mind that these methods only work once and otherwise do nothing, so there is no harm in assigning them to all pledges (see part 3 for detail on how this works).\n\nWith that, the Pledge.race() method is complete. This is the simplest of the static methods that work on multiple promises. The next method, Pledge.any(), uses some of the same logic but also adds a bit more complexity for handling rejections.\n\nThe Promise.any() method\n\nThe Promise.any() method is a variation of the Promise.race() method. Like Promise.race(), Promise.any() will return a promise that is fulfilled with the same value as the first promise to be fulfilled. In effect, there’s still a “race” to see which promise will be fulfilled first. The difference is when none of the promises are fulfilled, in which case the returned promise is rejected with an AggregateError object9 that contains an errors array with the rejection reasons of each promise. Here are some examples to better illustrate:\n\nconst promise1 = Promise.any([\n    Promise.resolve(42),\n    Promise.reject(43),\n    Promise.resolve(44)\n]);\n\npromise1.then(value =&gt; {\n    console.log(value);     // 42\n});\n\nconst promise2 = Promise.any([\n    new Promise(resolve =&gt; {\n        setTimeout(() =&gt; {\n            resolve(42);\n        }, 500);\n    }),\n    Promise.reject(43),\n    Promise.resolve(44)\n]);\n\npromise2.then(value =&gt; {\n    console.log(value);    // 44\n});\n\nconst promise3 = Promise.any([\n    Promise.reject(42),\n    Promise.reject(43),\n    Promise.reject(44)\n]);\n\npromise3.catch(reason =&gt; {\n    console.log(reason.errors[0]);    // 42\n    console.log(reason.errors[1]);    // 43\n    console.log(reason.errors[2]);    // 44\n});\n\n\nThe first two calls to Promise.any() in this code are resolved to a fulfilled promise because at least one promise was fulfilled; the last call resolves to an AggregateError object where the errors property is an array of all the rejected values.\n\nCreating an AggregateError object\n\nThe first step in implementing Pledge.any() is to create a representation of AggregateError. This class is new enough to JavaScript that it’s not present in a lot of runtimes yet, so it’s helpful to have a standalone representation. The specification9 indicates that AggregateError is not really a class, but rather a function that can be called with or without new. Here’s what a translation of the specification looks like:\n\nexport function PledgeAggregateError(errors=[], message) {\n\n    const O = new.target === undefined ? new PledgeAggregateError() : this;\n\n    if (typeof message !== \"undefined\") {\n        const msg = String(message);\n\n        Object.defineProperty(O, \"message\", {\n            value: msg,\n            writable: true,\n            enumerable: false,\n            configurable: true\n        });\n    }\n\n    // errors can be an iterable\n    const errorsList = [...errors];\n\n    Object.defineProperty(O, \"errors\", {\n        configurable: true,\n        enumerable: false,\n        writable: true,\n        value: errorsList\n    });\n\n    return O;\n}\n\n\nAn interesting note about this type of error is that the message parameter is optional and may not appear on the object. The errors parameter is also optional, however, the created object will always have an errors property. Due to this, and the fact that the implementation is done with a function, there are a variety of ways to create a new instance:\n\nconst error1 = new PledgeAggregateError();\nconst error2 = new PledgeAggregateError([42, 43, 44]);\nconst error3 = new PledgeAggregateError([42, 43, 44], \"Oops!\");\n\nconst error4 = PledgeAggregateError();\nconst error5 = PledgeAggregateError([42, 43, 44]);\nconst error6 = PledgeAggregateError([42, 43, 44], \"Oops!\");\n\n\nThis implementation matches how the specification defines AggregateError objects, so now it’s time to move on to implementing Pledge.any() itself.\n\nCreating the Pledge.any() method\n\nAs I mentioned in the previous section, all of the algorithms for the static methods that work on multiple promises are similar, with the only real exception being the name of the operation that it delegates to. The Promise.any() method10 follows the same structure as the Promise.race() method, and so the Pledge.any() method in this library should look familiar:\n\nclass Pledge {\n\n    // other methods omitted for space\n\n    static any(iterable) {\n\n        const C = this;\n        const pledgeCapability = new PledgeCapability(C);\n        let iteratorRecord;\n\n        try {\n            const pledgeResolve = getPledgeResolve(C);\n            iteratorRecord = getIterator(iterable);\n            const result = performPledgeAny(iteratorRecord, C, pledgeCapability, pledgeResolve);\n            return result;\n        } catch (error) {\n\n            let result = new ThrowCompletion(error);\n\n            if (iteratorRecord &amp;&amp; iteratorRecord.done === false) {\n                result = iteratorClose(iteratorRecord, result);\n            }\n\n            pledgeCapability.reject(result.value);\n            return pledgeCapability.pledge;\n        }\n\n    }\n\n    // other methods omitted for space\n}\n\n\nBecause you’re already familiar with this basic algorithm, I’ll skip directly to what the performPledgeAny() function does.\n\nThe algorithm for the PerformPromiseAny() method11 looks more complicated than it actually is. Part of the reason for that is the wacky way iterators are used, but you are already familiar with that. In fact, all this method does is attach resultCapability.resolve to be the fulfillment handler of each promise and attaches a special rejection handler that simply collects all of the rejection reasons in case they are needed.\n\nTo keep track of rejection reasons, the operation defines three variables:\n\n\n  errors - the array to keep track of all rejection reasons\n  remainingElementsCount - a record whose only purpose is to track how many promises still need to be fulfilled\n  index - the index in the errors array where each rejection reason should be placed\n\n\nThese three variables are the primary difference between performPledgeAny() and performPledgeRace(), and these will also appear in the implementations for Pledge.all() and Pledge.allSettled().\n\nWith that basic explanation out of the way, here’s the code:\n\nfunction performPledgeAny(iteratorRecord, constructor, resultCapability, pledgeResolve) {\n\n    assertIsConstructor(constructor);\n    assertIsCallable(pledgeResolve);\n\n    const errors = [];\n    const remainingElementsCount = { value: 1 };\n    let index = 0;\n\n    while (true) {\n        let next;\n        \n        try {\n            next = iteratorStep(iteratorRecord);\n        } catch (error) {\n            iteratorRecord.done = true;\n            resultCapability.reject(error);\n            return resultCapability.pledge;\n        }\n\n        if (next === false) {\n            remainingElementsCount.value = remainingElementsCount.value - 1;\n            if (remainingElementsCount.value === 0) {\n                const error = new PledgeAggregateError();\n                Object.defineProperty(error, \"errors\", {\n                    configurable: true,\n                    enumerable: false,\n                    writable: true,\n                    value: errors\n                });\n        \n                resultCapability.reject(error);\n            }\n        \n            return resultCapability.pledge;\n        }\n        \n        let nextValue;\n\n        try {\n            nextValue = iteratorValue(next);\n        } catch(error) {\n            iteratorRecord.done = true;\n            resultCapability.reject(error);\n            return resultCapability.pledge;\n        }\n\n        errors.push(undefined);\n        const nextPledge = pledgeResolve.call(constructor, nextValue);\n        const rejectElement = createPledgeAnyRejectElement(index, errors, resultCapability, remainingElementsCount);\n        \n        remainingElementsCount.value = remainingElementsCount.value + 1;\n        nextPledge.then(resultCapability.resolve, rejectElement);\n        index = index + 1;\n    }\n\n}\n\n\nThe first important part of this function is when remainingElementsCount.value is 0, then a new PledgeAggregateError object is created and passed to resultCapability.reject(). This is the condition where there are no more promises in the iterator and all of the promises have been rejected.\n\nThe next important part of the code is the createPledgeAnyRejectElement() function. This function doesn’t have a corresponding operation in the specification, but rather, is defined as a series of steps12 to take; I split it out into a function to make the code easier to understand. The “reject element” is the rejection handler that should be attached to each promise, and it’s job is to aggregate the rejection reason. Here’s the code:\n\nfunction createPledgeAnyRejectElement(index, errors, pledgeCapability, remainingElementsCount) {\n\n    const alreadyCalled = { value: false };\n\n    return x =&gt; {\n\n        if (alreadyCalled.value) {\n            return;\n        }\n\n        alreadyCalled.value = true;\n\n        errors[index] = x;\n        remainingElementsCount.value = remainingElementsCount.value - 1;\n\n        if (remainingElementsCount.value === 0) {\n            const error = new PledgeAggregateError();\n            Object.defineProperty(error, \"errors\", {\n                configurable: true,\n                enumerable: false,\n                writable: true,\n                value: errors\n            });\n\n            return pledgeCapability.reject(error);\n\n        }\n\n    };\n}\n\n\nAs with other fulfillment and rejection handlers, this function returns a function that first checks to make sure it’s not being called twice. The x parameter is the reason for the rejection and so is placed into the errors array at index. Then, remainingElementsCount.value is checked to see if it’s 0, and if so, a new PledgeAggregateError is created. This is necessary because the promises might be rejected long after the initial called to Pledge.any() has completed. So the check in performPledgeAny() handles the situation where all of the promises are rejected synchronously while the reject element functions handle the situation where all of the promises are rejected asynchronously.\n\nAnd for clarify, here is what the performPledgeAny() method would look like without the iterator craziness:\n\nfunction performPledgeAnySimple(iteratorRecord, constructor, resultCapability, pledgeResolve) {\n\n    assertIsConstructor(constructor);\n    assertIsCallable(pledgeResolve);\n\n    // You could actually just pass the iterator instead of `iteratatorRecord`\n    const iterator = iteratorRecord.iterator;\n\n    const errors = [];\n    const remainingElementsCount = { value: 1 };\n    let index = 0;\n\n    try {\n\n        // loop over every value in the iterator\n        for (const nextValue of iterator) {\n            errors.push(undefined);\n\n            const nextPledge = pledgeResolve.call(constructor, nextValue);\n            const rejectElement = createPledgeAnyRejectElement(index, errors, resultCapability, remainingElementsCount);\n\n            nextPledge.then(resultCapability.resolve, rejectElement);\n\n            remainingElementsCount.value = remainingElementsCount.value + 1;\n            index = index + 1;\n        }\n\n        remainingElementsCount.value = remainingElementsCount.value - 1;\n        if (remainingElementsCount.value === 0) {\n            const error = new PledgeAggregateError();\n            Object.defineProperty(error, \"errors\", {\n                configurable: true,\n                enumerable: false,\n                writable: true,\n                value: errors\n            });\n    \n            resultCapability.reject(error);\n        }\n\n    } catch (error) {\n        resultCapability.reject(error);\n    }\n\n    iteratorRecord.done = true;\n    return resultCapability.pledge;\n}\n\n\nThis version is not as straightforward as the performPledgeRace() equivalent, but hopefully you can see that the overall approach is still just looping over the promises and attaching appropriate fulfillment and rejection handlers.\n\nWrapping Up\n\nThis post covered creating Promise.race() and Promise.any() from scratch. These are just two of the built-in methods that work on multiple promises. The Promise.race() method is the simplest of these four methods because you don’t have to do any tracking; each promise is assigned the same fulfillment and rejection handlers, and that is all you need to worry about. The Promise.any() method is a bit more complex because you need to keep track of all the rejections in case none of the promises are fulfilled.\n\nAll of this code is available in the Pledge on GitHub. I hope you’ll download it and try it out to get a better understanding of promises.\n\nWant more posts in this series?\n\nIf you are enjoying this series and would like to see it continue, please sponsor me on GitHub. For every five new sponsors I receive, I’ll release a new post. Here’s what I plan on covering:\n\n\n  Part 6: Promise.all() and Promise.allSettled() (when I have 40 sponsors)\n  Part 7: Unhandled promise rejection tracking (when I have 45 sponsors)\n\n\nIt takes a significant amount of time to put together posts like these, and I appreciate your consideration in helping me continue to create quality content like this.\n\nReferences\n\n\n  \n    \n      GetIterator ( obj [ , hint [ , method ] ] ) &#8617;\n    \n    \n      IteratorNext (IteratorNext ( iteratorRecord [ , value ] )) &#8617;\n    \n    \n      IteratorComplete ( iterResult ) &#8617;\n    \n    \n      IteratorValue ( iterResult ) &#8617;\n    \n    \n      IteratorStep ( iteratorRecord ) &#8617;\n    \n    \n      Promise.race ( iterable ) &#8617;\n    \n    \n      GetPromiseResolve ( promiseConstructor ) &#8617;\n    \n    \n      PerformPromiseRace ( iteratorRecord, constructor, resultCapability, promiseResolve ) &#8617;\n    \n    \n      AggregateError Objects &#8617; &#8617;2\n    \n    \n      Promise.any ( iterable ) &#8617;\n    \n    \n      PerformPromiseAny ( iteratorRecord, constructor, resultCapability, promiseResolve ) &#8617;\n    \n    \n      Promise.any Reject Element Functions &#8617;\n    \n  \n\n",
            "content_html": "<p>In the previous posts in this series, I discussed implementing a promise from scratch in JavaScript. Now that there’s a full promise implementation, it’s time to look at how you can monitor multiple promises at once using <code class=\"highlighter-rouge\">Promise.race()</code> and <code class=\"highlighter-rouge\">Promise.any()</code> (<code class=\"highlighter-rouge\">Promise.all()</code> and <code class=\"highlighter-rouge\">Promise.allSettled()</code> will be covered in the next post). You’ll see that, for the most part, all of the methods that work with multiple promises follow a similar algorithm, which makes it fairly easy to move from implementing one of these methods to the next.</p>\n\n<p>Note: This is the fifth post in my series about creating JavaScript promises from scratch. If you haven’t already read the <a href="https://humanwhocodes.com/feeds/\&quot;https://humanwhocodes.com/blog/2020/09/creating-javascript-promise-from-scratch-constructor/\&quot;">first post</a>, the <a href="https://humanwhocodes.com/feeds/\&quot;https://humanwhocodes.com/blog/2020/09/creating-javascript-promise-from-scratch-resolving-to-a-promise/\&quot;">second post</a>, the <a href="https://humanwhocodes.com/feeds/\&quot;https://humanwhocodes.com/blog/2020/10/creating-javascript-promise-from-scratch-then-catch-finally/\&quot;">third post</a>, and the <a href="https://humanwhocodes.com/feeds/\&quot;https://humanwhocodes.com/blog/2020/10/creating-javascript-promise-from-scratch-promise-resolve-reject/\&quot;">fourth post</a>, I would suggest you do so because this post builds on the topics covered in those posts.</p>\n\n<p>As a reminder, this series is based on my promise library, <a href="https://humanwhocodes.com/feeds/\&quot;https://github.com/humanwhocodes/pledge\&quot;">Pledge</a>. You can view and download all of the source code from GitHub.</p>\n\n<h2 id=\"prerequisite-using-iterators\">Prerequisite: Using iterators</h2>\n\n<p>Most of the time you see examples using <code class=\"highlighter-rouge\">Promise.race()</code> and <code class=\"highlighter-rouge\">Promise.any()</code> with an array being passed as the only argument, like this:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">Promise</span><span class=\"p\">.</span><span class=\"nx\">race</span><span class=\"p\">([</span><span class=\"nx\">p1</span><span class=\"p\">,</span> <span class=\"nx\">p2</span><span class=\"p\">,</span> <span class=\"nx\">p3</span><span class=\"p\">]).</span><span class=\"nx\">then</span><span class=\"p\">(</span><span class=\"nx\">value</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">value</span><span class=\"p\">);</span>\n<span class=\"p\">});</span>\n</code></pre></div></div>\n\n<p>Because of this, it’s easy to assume that the argument to <code class=\"highlighter-rouge\">Promise.race()</code> must be an array. In fact, the argument doesn’t need to be an array, but it must be an <em>iterable</em>. An iterable is just an object that has a <code class=\"highlighter-rouge\">Symbol.iterator</code> method that returns an <em>iterator</em>. An iterator is an object with a <code class=\"highlighter-rouge\">next()</code> method that returns an object containing two properties: <code class=\"highlighter-rouge\">value</code>, the next value in the iterator or <code class=\"highlighter-rouge\">undefined</code> if none are left, and <code class=\"highlighter-rouge\">done</code>, a Boolean value that is set to <code class=\"highlighter-rouge\">true</code> when there are no more values in the iterator.</p>\n\n<p>Arrays are iterables by default, meaning they have a default <code class=\"highlighter-rouge\">Symbol.iterator</code> method that returns an iterator. As such, you can pass an array anywhere an iterator is required and it just works. What that means for the implementations of <code class=\"highlighter-rouge\">Promise.race()</code> and <code class=\"highlighter-rouge\">Promise.all()</code> is that they must work with iterables, and unfortunately, ECMA-262 makes working with iterables a little bit opaque.</p>\n\n<p>The first operation we need is <code class=\"highlighter-rouge\">GetIterator()</code><sup id=\"fnref:1\"><a href="https://humanwhocodes.com/feeds/\&quot;#fn:1\"" class=\"footnote\">1</a></sup>, which is the operation that retrieves the iterator for an iterable and returns an <code class=\"highlighter-rouge\">IteratorRecord</code> containing the iterator, the <code class=\"highlighter-rouge\">next()</code> method for that iterator, and a <code class=\"highlighter-rouge\">done</code> flag. The algorithm is a bit difficult to understand, but fundamentally <code class=\"highlighter-rouge\">GetIterator()</code> will attempt to retrieve either an async or sync iterator based on a <code class=\"highlighter-rouge\">hint</code> that is passed. For the purposes of this post, just know that only sync iterators will be used, so you can effectively ignore the parts that have to do with async iterators. Here’s the operation translated into JavaScript:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">export</span> <span class=\"kd\">function</span> <span class=\"nx\">getIterator</span><span class=\"p\">(</span><span class=\"nx\">obj</span><span class=\"p\">,</span> <span class=\"nx\">hint</span><span class=\"o\">=</span><span class=\"dl\">\"</span><span class=\"s2\">sync</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"nx\">method</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">hint</span> <span class=\"o\">!==</span> <span class=\"dl\">\"</span><span class=\"s2\">sync</span><span class=\"dl\">\"</span> <span class=\"o\">&amp;&amp;</span> <span class=\"nx\">hint</span> <span class=\"o\">!==</span> <span class=\"dl\">\"</span><span class=\"s2\">async</span><span class=\"dl\">\"</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">throw</span> <span class=\"k\">new</span> <span class=\"nx\">TypeError</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">Invalid hint.</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">method</span> <span class=\"o\">===</span> <span class=\"kc\">undefined</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        \n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">hint</span> <span class=\"o\">===</span> <span class=\"dl\">\"</span><span class=\"s2\">async</span><span class=\"dl\">\"</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        \n            <span class=\"nx\">method</span> <span class=\"o\">=</span> <span class=\"nx\">obj</span><span class=\"p\">[</span><span class=\"nb\">Symbol</span><span class=\"p\">.</span><span class=\"nx\">asyncIterator</span><span class=\"p\">];</span>\n        \n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">method</span> <span class=\"o\">===</span> <span class=\"kc\">undefined</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                <span class=\"kd\">const</span> <span class=\"nx\">syncMethod</span> <span class=\"o\">=</span> <span class=\"nx\">obj</span><span class=\"p\">[</span><span class=\"nb\">Symbol</span><span class=\"p\">.</span><span class=\"nx\">iterator</span><span class=\"p\">];</span>\n                <span class=\"kd\">const</span> <span class=\"nx\">syncIteratorRecord</span> <span class=\"o\">=</span> <span class=\"nx\">getIterator</span><span class=\"p\">(</span><span class=\"nx\">obj</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">sync</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"nx\">syncMethod</span><span class=\"p\">);</span>\n\n                <span class=\"c1\">// can't accurately represent CreateAsyncFromSyncIterator()</span>\n                <span class=\"k\">return</span> <span class=\"nx\">syncIteratorRecord</span><span class=\"p\">;</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n            <span class=\"nx\">method</span> <span class=\"o\">=</span> <span class=\"nx\">obj</span><span class=\"p\">[</span><span class=\"nb\">Symbol</span><span class=\"p\">.</span><span class=\"nx\">iterator</span><span class=\"p\">];</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"kd\">const</span> <span class=\"nx\">iterator</span> <span class=\"o\">=</span> <span class=\"nx\">method</span><span class=\"p\">.</span><span class=\"nx\">call</span><span class=\"p\">(</span><span class=\"nx\">obj</span><span class=\"p\">);</span>\n\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"nx\">isObject</span><span class=\"p\">(</span><span class=\"nx\">iterator</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n        <span class=\"k\">throw</span> <span class=\"k\">new</span> <span class=\"nx\">TypeError</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">Iterator must be an object.</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"kd\">const</span> <span class=\"nx\">nextMethod</span> <span class=\"o\">=</span> <span class=\"nx\">iterator</span><span class=\"p\">.</span><span class=\"nx\">next</span><span class=\"p\">;</span>\n\n    <span class=\"k\">return</span> <span class=\"p\">{</span>\n        <span class=\"nx\">iterator</span><span class=\"p\">,</span>\n        <span class=\"nx\">nextMethod</span><span class=\"p\">,</span>\n        <span class=\"na\">done</span><span class=\"p\">:</span> <span class=\"kc\">false</span>\n    <span class=\"p\">};</span>\n\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>In ECMA-262, you always use <code class=\"highlighter-rouge\">IteratorRecord</code> to work with iterators instead of using the iterator directly. Similarly, there are several operations that are used to manually work with an iterator:</p>\n\n<ul>\n  <li><code class=\"highlighter-rouge\">IteratorNext()</code><sup id=\"fnref:2\"><a href="https://humanwhocodes.com/feeds/\&quot;#fn:2\"" class=\"footnote\">2</a></sup> - calls the <code class=\"highlighter-rouge\">next()</code> method on an iterator and returns the result.</li>\n  <li><code class=\"highlighter-rouge\">ItereatorComplete()</code><sup id=\"fnref:3\"><a href="https://humanwhocodes.com/feeds/\&quot;#fn:3\"" class=\"footnote\">3</a></sup> - returns a Boolean indicating if the iterator is done (simply reads the <code class=\"highlighter-rouge\">done</code> field of the given result from <code class=\"highlighter-rouge\">IteratorNext()</code>).</li>\n  <li><code class=\"highlighter-rouge\">IteratorValue()</code><sup id=\"fnref:4\"><a href="https://humanwhocodes.com/feeds/\&quot;#fn:4\"" class=\"footnote\">4</a></sup> - returns the <code class=\"highlighter-rouge\">value</code> field of the given result from <code class=\"highlighter-rouge\">IteratorNext()</code>.</li>\n  <li><code class=\"highlighter-rouge\">IteratorStep()</code><sup id=\"fnref:5\"><a href="https://humanwhocodes.com/feeds/\&quot;#fn:5\"" class=\"footnote\">5</a></sup> - returns the result from <code class=\"highlighter-rouge\">IteratorNext()</code> if <code class=\"highlighter-rouge\">done</code> is <code class=\"highlighter-rouge\">false</code>; returns <code class=\"highlighter-rouge\">false</code> if <code class=\"highlighter-rouge\">done</code> is <code class=\"highlighter-rouge\">true</code> (just for fun, I suppose).</li>\n</ul>\n\n<p>Each of these operations is pretty straightforward as they simply wrap built-in iterator operations. Here are the operations implemented in JavaScript:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">export</span> <span class=\"kd\">function</span> <span class=\"nx\">iteratorNext</span><span class=\"p\">(</span><span class=\"nx\">iteratorRecord</span><span class=\"p\">,</span> <span class=\"nx\">value</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\n    <span class=\"kd\">let</span> <span class=\"nx\">result</span><span class=\"p\">;</span>\n\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">value</span> <span class=\"o\">===</span> <span class=\"kc\">undefined</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"nx\">result</span> <span class=\"o\">=</span> <span class=\"nx\">iteratorRecord</span><span class=\"p\">.</span><span class=\"nx\">nextMethod</span><span class=\"p\">.</span><span class=\"nx\">call</span><span class=\"p\">(</span><span class=\"nx\">iteratorRecord</span><span class=\"p\">.</span><span class=\"nx\">iterator</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n        <span class=\"nx\">result</span> <span class=\"o\">=</span> <span class=\"nx\">iteratorRecord</span><span class=\"p\">.</span><span class=\"nx\">nextMethod</span><span class=\"p\">.</span><span class=\"nx\">call</span><span class=\"p\">(</span><span class=\"nx\">iteratorRecord</span><span class=\"p\">.</span><span class=\"nx\">iterator</span><span class=\"p\">,</span> <span class=\"nx\">value</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"nx\">isObject</span><span class=\"p\">(</span><span class=\"nx\">result</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n        <span class=\"k\">throw</span> <span class=\"k\">new</span> <span class=\"nx\">TypeError</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">Result must be an object.</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">return</span> <span class=\"nx\">result</span><span class=\"p\">;</span>\n\n<span class=\"p\">}</span>\n\n<span class=\"k\">export</span> <span class=\"kd\">function</span> <span class=\"nx\">iteratorComplete</span><span class=\"p\">(</span><span class=\"nx\">iterResult</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"nx\">isObject</span><span class=\"p\">(</span><span class=\"nx\">iterResult</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n        <span class=\"k\">throw</span> <span class=\"k\">new</span> <span class=\"nx\">TypeError</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">Argument must be an object.</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">return</span> <span class=\"nb\">Boolean</span><span class=\"p\">(</span><span class=\"nx\">iterResult</span><span class=\"p\">.</span><span class=\"nx\">done</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">export</span> <span class=\"kd\">function</span> <span class=\"nx\">iteratorValue</span><span class=\"p\">(</span><span class=\"nx\">iterResult</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"nx\">isObject</span><span class=\"p\">(</span><span class=\"nx\">iterResult</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n        <span class=\"k\">throw</span> <span class=\"k\">new</span> <span class=\"nx\">TypeError</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">Argument must be an object.</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">return</span> <span class=\"nx\">iterResult</span><span class=\"p\">.</span><span class=\"nx\">value</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">export</span> <span class=\"kd\">function</span> <span class=\"nx\">iteratorStep</span><span class=\"p\">(</span><span class=\"nx\">iteratorRecord</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\n    <span class=\"kd\">const</span> <span class=\"nx\">result</span> <span class=\"o\">=</span> <span class=\"nx\">iteratorNext</span><span class=\"p\">(</span><span class=\"nx\">iteratorRecord</span><span class=\"p\">);</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">done</span> <span class=\"o\">=</span> <span class=\"nx\">iteratorComplete</span><span class=\"p\">(</span><span class=\"nx\">result</span><span class=\"p\">);</span>\n    \n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">done</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"kc\">false</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">return</span> <span class=\"nx\">result</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>To get an idea about how these operations are used, consider this simple loop using an array:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">const</span> <span class=\"nx\">values</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">];</span>\n\n<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kd\">const</span> <span class=\"nx\">nextValue</span> <span class=\"k\">of</span> <span class=\"nx\">values</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">nextValue</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>The <code class=\"highlighter-rouge\">for-of</code> loop operates on the iterator creates for the <code class=\"highlighter-rouge\">values</code> array. Here’s a similar loop using the iterator functions defined previously:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">const</span> <span class=\"nx\">values</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">];</span>\n<span class=\"kd\">const</span> <span class=\"nx\">iteratorRecord</span> <span class=\"o\">=</span> <span class=\"nx\">getIterator</span><span class=\"p\">(</span><span class=\"nx\">values</span><span class=\"p\">);</span>\n\n<span class=\"c1\">// ECMA-262 always uses infinite loops that break</span>\n<span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\n        <span class=\"kd\">let</span> <span class=\"nx\">next</span><span class=\"p\">;</span>\n        \n        <span class=\"cm\">/*\n         * Get the next step in the iterator. If there's an error, don't forget\n         * to set the `done` property to `true` for posterity.\n         */</span>\n        <span class=\"k\">try</span> <span class=\"p\">{</span>\n            <span class=\"nx\">next</span> <span class=\"o\">=</span> <span class=\"nx\">iteratorStep</span><span class=\"p\">(</span><span class=\"nx\">iteratorRecord</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span> <span class=\"k\">catch</span> <span class=\"p\">(</span><span class=\"nx\">error</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"nx\">iteratorRecord</span><span class=\"p\">.</span><span class=\"nx\">done</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"p\">;</span>\n            <span class=\"k\">throw</span> <span class=\"nx\">error</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"c1\">// if `next` is false then we are done and can exit</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">next</span> <span class=\"o\">===</span> <span class=\"kc\">false</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"nx\">iteratorRecord</span><span class=\"p\">.</span><span class=\"nx\">done</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"p\">;</span>\n            <span class=\"k\">break</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"kd\">let</span> <span class=\"nx\">nextValue</span><span class=\"p\">;</span>\n\n        <span class=\"cm\">/*\n         * Try to retrieve the value of the next step. The spec says this might\n         * actually throw an error, so once again, catch that error, set the\n         * `done` field to `true`, and then re-throw the error.\n         */</span>\n        <span class=\"k\">try</span> <span class=\"p\">{</span>\n            <span class=\"nx\">nextValue</span> <span class=\"o\">=</span> <span class=\"nx\">iteratorValue</span><span class=\"p\">(</span><span class=\"nx\">next</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span> <span class=\"k\">catch</span> <span class=\"p\">(</span><span class=\"nx\">error</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"nx\">iteratorRecord</span><span class=\"p\">.</span><span class=\"nx\">done</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"p\">;</span>\n            <span class=\"k\">throw</span> <span class=\"nx\">error</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"c1\">// actually output the value</span>\n        <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">nextValue</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>As you can probably tell from this example, there’s a lot of unnecessary complexity involved with looping over an iterator in ECMA-262. Just know that all of these operations can be easily replaced with a <code class=\"highlighter-rouge\">for-of</code> loop. I chose to use the iterator operations so that it’s easier to go back and forth between the code and the specification, but there are definitely more concise and less error-prone ways of implementing the same functionality.</p>\n\n<h2 id=\"the-promiserace-method\">The <code class=\"highlighter-rouge\">Promise.race()</code> method</h2>\n\n<p>The <code class=\"highlighter-rouge\">Promise.race()</code> method is the simplest of the methods that work on multiple promises: whichever promise settles first, regardless if it’s fulfilled or rejected, that result is passed through to the returned promise. So if the first promise to settle is fulfilled, then the returned promise is fulfilled with the same value; if the first promise to settle is rejected, then the returned promise is rejected with the same reason. Here are a couple examples:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">const</span> <span class=\"nx\">promise1</span> <span class=\"o\">=</span> <span class=\"nb\">Promise</span><span class=\"p\">.</span><span class=\"nx\">race</span><span class=\"p\">([</span>\n    <span class=\"nb\">Promise</span><span class=\"p\">.</span><span class=\"nx\">resolve</span><span class=\"p\">(</span><span class=\"mi\">42</span><span class=\"p\">),</span>\n    <span class=\"nb\">Promise</span><span class=\"p\">.</span><span class=\"nx\">reject</span><span class=\"p\">(</span><span class=\"mi\">43</span><span class=\"p\">),</span>\n    <span class=\"nb\">Promise</span><span class=\"p\">.</span><span class=\"nx\">resolve</span><span class=\"p\">(</span><span class=\"mi\">44</span><span class=\"p\">)</span>\n<span class=\"p\">]);</span>\n\n<span class=\"nx\">promise1</span><span class=\"p\">.</span><span class=\"nx\">then</span><span class=\"p\">(</span><span class=\"nx\">value</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">value</span><span class=\"p\">);</span>     <span class=\"c1\">// 42</span>\n<span class=\"p\">});</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">promise2</span> <span class=\"o\">=</span> <span class=\"nb\">Promise</span><span class=\"p\">.</span><span class=\"nx\">race</span><span class=\"p\">([</span>\n    <span class=\"k\">new</span> <span class=\"nb\">Promise</span><span class=\"p\">(</span><span class=\"nx\">resolve</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n        <span class=\"nx\">setTimeout</span><span class=\"p\">(()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n            <span class=\"nx\">resolve</span><span class=\"p\">(</span><span class=\"mi\">42</span><span class=\"p\">);</span>\n        <span class=\"p\">},</span> <span class=\"mi\">500</span><span class=\"p\">);</span>\n    <span class=\"p\">}),</span>\n    <span class=\"nb\">Promise</span><span class=\"p\">.</span><span class=\"nx\">reject</span><span class=\"p\">(</span><span class=\"mi\">43</span><span class=\"p\">),</span>\n    <span class=\"nb\">Promise</span><span class=\"p\">.</span><span class=\"nx\">resolve</span><span class=\"p\">(</span><span class=\"mi\">44</span><span class=\"p\">)</span>\n<span class=\"p\">]);</span>\n\n<span class=\"nx\">promise2</span><span class=\"p\">.</span><span class=\"k\">catch</span><span class=\"p\">(</span><span class=\"nx\">reason</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">reason</span><span class=\"p\">);</span>    <span class=\"c1\">// 43</span>\n<span class=\"p\">});</span>\n</code></pre></div></div>\n\n<p>The behavior of <code class=\"highlighter-rouge\">Promise.race()</code> makes it easier to implement than the other three methods that work on multiple promises, all of which require keeping at least one array to track results.</p>\n\n<h3 id=\"creating-the-pledgerace-method\">Creating the <code class=\"highlighter-rouge\">Pledge.race()</code> method</h3>\n\n<p>The specification<sup id=\"fnref:6\"><a href="https://humanwhocodes.com/feeds/\&quot;#fn:6\"" class=\"footnote\">6</a></sup> for <code class=\"highlighter-rouge\">Promise.race()</code> describes the algorithm as follows:</p>\n\n<ol>\n  <li>Let <code class=\"highlighter-rouge\">C</code> be the <code class=\"highlighter-rouge\">this</code> value.</li>\n  <li>Let <code class=\"highlighter-rouge\">promiseCapability</code> be <code class=\"highlighter-rouge\">?</code> <code class=\"highlighter-rouge\">NewPromiseCapability(C)</code>.</li>\n  <li>Let <code class=\"highlighter-rouge\">promiseResolve</code> be <code class=\"highlighter-rouge\">GetPromiseResolve(C)</code>.</li>\n  <li><code class=\"highlighter-rouge\">IfAbruptRejectPromise(promiseResolve, promiseCapability)</code>.</li>\n  <li>Let <code class=\"highlighter-rouge\">iteratorRecord</code> be <code class=\"highlighter-rouge\">GetIterator(iterable)</code>.</li>\n  <li><code class=\"highlighter-rouge\">IfAbruptRejectPromise(iteratorRecord, promiseCapability)</code>.</li>\n  <li>Let <code class=\"highlighter-rouge\">result</code> be <code class=\"highlighter-rouge\">PerformPromiseRace(iteratorRecord, C, promiseCapability, promiseResolve)</code>.</li>\n  <li>If <code class=\"highlighter-rouge\">result</code> is an abrupt completion, then\n    <ol>\n      <li>If <code class=\"highlighter-rouge\">iteratorRecord.[[Done]]</code> is <code class=\"highlighter-rouge\">false</code>, set <code class=\"highlighter-rouge\">result</code> to <code class=\"highlighter-rouge\">IteratorClose(iteratorRecord, result)</code>.</li>\n      <li><code class=\"highlighter-rouge\">IfAbruptRejectPromise(result, promiseCapability)</code>.</li>\n    </ol>\n  </li>\n  <li>Return <code class=\"highlighter-rouge\">Completion(result)</code>.</li>\n</ol>\n\n<p>The main algorithm for <code class=\"highlighter-rouge\">Promise.race()</code> actually takes place in an operation called <code class=\"highlighter-rouge\">PerformPromiseRace</code>. The rest is just setting up all of the appropriate data to pass to the operation and then interpreting the result of the operation. All four of the methods that deal with multiple promises, <code class=\"highlighter-rouge\">Promise.race()</code>, <code class=\"highlighter-rouge\">Promise.any()</code>, <code class=\"highlighter-rouge\">Promise.all()</code>, and <code class=\"highlighter-rouge\">Promise.allSettled()</code>, all follow this same basic algorithm for their methods with the only difference being the operations they delegate to. This will become clear later in this post when I discussed <code class=\"highlighter-rouge\">Promise.any()</code>.</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">class</span> <span class=\"nx\">Pledge</span> <span class=\"p\">{</span>\n\n    <span class=\"c1\">// other methods omitted for space</span>\n\n    <span class=\"kd\">static</span> <span class=\"nx\">race</span><span class=\"p\">(</span><span class=\"nx\">iterable</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\n        <span class=\"kd\">const</span> <span class=\"nx\">C</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">;</span>\n        <span class=\"kd\">const</span> <span class=\"nx\">pledgeCapability</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">PledgeCapability</span><span class=\"p\">(</span><span class=\"nx\">C</span><span class=\"p\">);</span>\n        <span class=\"kd\">let</span> <span class=\"nx\">iteratorRecord</span><span class=\"p\">;</span>\n\n        <span class=\"k\">try</span> <span class=\"p\">{</span>\n            <span class=\"kd\">const</span> <span class=\"nx\">pledgeResolve</span> <span class=\"o\">=</span> <span class=\"nx\">getPledgeResolve</span><span class=\"p\">(</span><span class=\"nx\">C</span><span class=\"p\">);</span>\n            <span class=\"nx\">iteratorRecord</span> <span class=\"o\">=</span> <span class=\"nx\">getIterator</span><span class=\"p\">(</span><span class=\"nx\">iterable</span><span class=\"p\">);</span>\n            <span class=\"kd\">const</span> <span class=\"nx\">result</span> <span class=\"o\">=</span> <span class=\"nx\">performPledgeRace</span><span class=\"p\">(</span><span class=\"nx\">iteratorRecord</span><span class=\"p\">,</span> <span class=\"nx\">C</span><span class=\"p\">,</span> <span class=\"nx\">pledgeCapability</span><span class=\"p\">,</span> <span class=\"nx\">pledgeResolve</span><span class=\"p\">);</span>\n            <span class=\"k\">return</span> <span class=\"nx\">result</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span> <span class=\"k\">catch</span> <span class=\"p\">(</span><span class=\"nx\">error</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\n            <span class=\"kd\">let</span> <span class=\"nx\">result</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">ThrowCompletion</span><span class=\"p\">(</span><span class=\"nx\">error</span><span class=\"p\">);</span>\n\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">iteratorRecord</span> <span class=\"o\">&amp;&amp;</span> <span class=\"nx\">iteratorRecord</span><span class=\"p\">.</span><span class=\"nx\">done</span> <span class=\"o\">===</span> <span class=\"kc\">false</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                <span class=\"nx\">result</span> <span class=\"o\">=</span> <span class=\"nx\">iteratorClose</span><span class=\"p\">(</span><span class=\"nx\">iteratorRecord</span><span class=\"p\">,</span> <span class=\"nx\">result</span><span class=\"p\">);</span>\n            <span class=\"p\">}</span>\n\n            <span class=\"nx\">pledgeCapability</span><span class=\"p\">.</span><span class=\"nx\">reject</span><span class=\"p\">(</span><span class=\"nx\">result</span><span class=\"p\">.</span><span class=\"nx\">value</span><span class=\"p\">);</span>\n            <span class=\"k\">return</span> <span class=\"nx\">pledgeCapability</span><span class=\"p\">.</span><span class=\"nx\">pledge</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n\n    <span class=\"p\">}</span>\n\n    <span class=\"c1\">// other methods omitted for space</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>Like many of the other methods in the <code class=\"highlighter-rouge\">Pledge</code> class, this one starts by retrieving the <code class=\"highlighter-rouge\">this</code> value and creating a <code class=\"highlighter-rouge\">PledgeCapability</code> object. The next step is to retrieve the <code class=\"highlighter-rouge\">resolve</code> method from the constructor, which basically means <code class=\"highlighter-rouge\">pledgeResolve</code> is set equal to <code class=\"highlighter-rouge\">Pledge.resolve()</code> (discussed in part 4). The <code class=\"highlighter-rouge\">getPledgeResolve()</code> method is the equivalent of the <code class=\"highlighter-rouge\">GetPromiseResolve</code><sup id=\"fnref:7\"><a href="https://humanwhocodes.com/feeds/\&quot;#fn:7\"" class=\"footnote\">7</a></sup> operation in the spec. Here’s the code:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">function</span> <span class=\"nx\">getPledgeResolve</span><span class=\"p\">(</span><span class=\"nx\">pledgeConstructor</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\n    <span class=\"nx\">assertIsConstructor</span><span class=\"p\">(</span><span class=\"nx\">pledgeConstructor</span><span class=\"p\">);</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">pledgeResolve</span> <span class=\"o\">=</span> <span class=\"nx\">pledgeConstructor</span><span class=\"p\">.</span><span class=\"nx\">resolve</span><span class=\"p\">;</span>\n\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"nx\">isCallable</span><span class=\"p\">(</span><span class=\"nx\">pledgeResolve</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n        <span class=\"k\">throw</span> <span class=\"k\">new</span> <span class=\"nx\">TypeError</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">resolve is not callable.</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">return</span> <span class=\"nx\">pledgeResolve</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>After that, an iterator is retrieved for the iterable that was passed into the method. All of the important pieces of data are passed into <code class=\"highlighter-rouge\">performPledgeRace()</code>, which I’ll cover in a moment.</p>\n\n<p>The <code class=\"highlighter-rouge\">catch</code> clause of the <code class=\"highlighter-rouge\">try-catch</code> statement handles any errors that are thrown. In order to make the code easier to compare the specification, I’ve chosen to once again use completion records (completion records were introduced in part 3 of this series). This part isn’t very important to the overall algorithm, so I’m going to skip explaining it and the <code class=\"highlighter-rouge\">iteratorClose()</code> function in detail. Just know that when an error is thrown, the iterator might not have completed and so <code class=\"highlighter-rouge\">iteratorClose()</code> is used to close out the iterator, freeing up any memory associated with it. The <code class=\"highlighter-rouge\">iteratorClose()</code> function may return its own error, and if so, that’s the error that should be rejected into the created pledge. If you’d like to learn more about <code class=\"highlighter-rouge\">iteratorClose()</code>, please check out the source code on GitHub.</p>\n\n<p>The next step is to implement the <code class=\"highlighter-rouge\">PerformPromiseRace()</code><sup id=\"fnref:8\"><a href="https://humanwhocodes.com/feeds/\&quot;#fn:8\"" class=\"footnote\">8</a></sup> operation as <code class=\"highlighter-rouge\">performPledgeRace()</code>. The algorithm for this operation seems more complicated than it actually is due to the iterator loop I described at the start of this post. See if you can figure out what is happening in this code:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">function</span> <span class=\"nx\">performPledgeRace</span><span class=\"p\">(</span><span class=\"nx\">iteratorRecord</span><span class=\"p\">,</span> <span class=\"kd\">constructor</span><span class=\"p\">,</span> <span class=\"nx\">resultCapability</span><span class=\"p\">,</span> <span class=\"nx\">pledgeResolve</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\n    <span class=\"nx\">assertIsConstructor</span><span class=\"p\">(</span><span class=\"kd\">constructor</span><span class=\"p\">);</span>\n    <span class=\"nx\">assertIsCallable</span><span class=\"p\">(</span><span class=\"nx\">pledgeResolve</span><span class=\"p\">);</span>\n\n    <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\n        <span class=\"kd\">let</span> <span class=\"nx\">next</span><span class=\"p\">;</span>\n        \n        <span class=\"k\">try</span> <span class=\"p\">{</span>\n            <span class=\"nx\">next</span> <span class=\"o\">=</span> <span class=\"nx\">iteratorStep</span><span class=\"p\">(</span><span class=\"nx\">iteratorRecord</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span> <span class=\"k\">catch</span> <span class=\"p\">(</span><span class=\"nx\">error</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"nx\">iteratorRecord</span><span class=\"p\">.</span><span class=\"nx\">done</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"p\">;</span>\n            <span class=\"nx\">resultCapability</span><span class=\"p\">.</span><span class=\"nx\">reject</span><span class=\"p\">(</span><span class=\"nx\">error</span><span class=\"p\">);</span>\n            <span class=\"k\">return</span> <span class=\"nx\">resultCapability</span><span class=\"p\">.</span><span class=\"nx\">pledge</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">next</span> <span class=\"o\">===</span> <span class=\"kc\">false</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"nx\">iteratorRecord</span><span class=\"p\">.</span><span class=\"nx\">done</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"p\">;</span>\n            <span class=\"k\">return</span> <span class=\"nx\">resultCapability</span><span class=\"p\">.</span><span class=\"nx\">pledge</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"kd\">let</span> <span class=\"nx\">nextValue</span><span class=\"p\">;</span>\n\n        <span class=\"k\">try</span> <span class=\"p\">{</span>\n            <span class=\"nx\">nextValue</span> <span class=\"o\">=</span> <span class=\"nx\">iteratorValue</span><span class=\"p\">(</span><span class=\"nx\">next</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span> <span class=\"k\">catch</span> <span class=\"p\">(</span><span class=\"nx\">error</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"nx\">iteratorRecord</span><span class=\"p\">.</span><span class=\"nx\">done</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"p\">;</span>\n            <span class=\"nx\">resultCapability</span><span class=\"p\">.</span><span class=\"nx\">reject</span><span class=\"p\">(</span><span class=\"nx\">error</span><span class=\"p\">);</span>\n            <span class=\"k\">return</span> <span class=\"nx\">resultCapability</span><span class=\"p\">.</span><span class=\"nx\">pledge</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"kd\">const</span> <span class=\"nx\">nextPledge</span> <span class=\"o\">=</span> <span class=\"nx\">pledgeResolve</span><span class=\"p\">.</span><span class=\"nx\">call</span><span class=\"p\">(</span><span class=\"kd\">constructor</span><span class=\"p\">,</span> <span class=\"nx\">nextValue</span><span class=\"p\">);</span>\n        <span class=\"nx\">nextPledge</span><span class=\"p\">.</span><span class=\"nx\">then</span><span class=\"p\">(</span><span class=\"nx\">resultCapability</span><span class=\"p\">.</span><span class=\"nx\">resolve</span><span class=\"p\">,</span> <span class=\"nx\">resultCapability</span><span class=\"p\">.</span><span class=\"nx\">reject</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>The first thing to notice is that, unlike the loops described in the first section of this post, no errors are thrown. Instead, any errors that occur are passed to the <code class=\"highlighter-rouge\">resultCapability.reject()</code> method and the created pledge object is returned. All of the error checking really gets in the way of understanding what is a very simple algorithm, so here’s a version that better illustrates how the algorithm works using JavaScript you’d write in real life:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">function</span> <span class=\"nx\">performPledgeRaceSimple</span><span class=\"p\">(</span><span class=\"nx\">iteratorRecord</span><span class=\"p\">,</span> <span class=\"kd\">constructor</span><span class=\"p\">,</span> <span class=\"nx\">resultCapability</span><span class=\"p\">,</span> <span class=\"nx\">pledgeResolve</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\n    <span class=\"nx\">assertIsConstructor</span><span class=\"p\">(</span><span class=\"kd\">constructor</span><span class=\"p\">);</span>\n    <span class=\"nx\">assertIsCallable</span><span class=\"p\">(</span><span class=\"nx\">pledgeResolve</span><span class=\"p\">);</span>\n\n    <span class=\"c1\">// You could actually just pass the iterator instead of `iteratatorRecord`</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">iterator</span> <span class=\"o\">=</span> <span class=\"nx\">iteratorRecord</span><span class=\"p\">.</span><span class=\"nx\">iterator</span><span class=\"p\">;</span>\n\n    <span class=\"k\">try</span> <span class=\"p\">{</span>\n\n        <span class=\"c1\">// loop over every value in the iterator</span>\n        <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kd\">const</span> <span class=\"nx\">nextValue</span> <span class=\"k\">of</span> <span class=\"nx\">iterator</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"kd\">const</span> <span class=\"nx\">nextPledge</span> <span class=\"o\">=</span> <span class=\"nx\">pledgeResolve</span><span class=\"p\">.</span><span class=\"nx\">call</span><span class=\"p\">(</span><span class=\"kd\">constructor</span><span class=\"p\">,</span> <span class=\"nx\">nextValue</span><span class=\"p\">);</span>\n            <span class=\"nx\">nextPledge</span><span class=\"p\">.</span><span class=\"nx\">then</span><span class=\"p\">(</span><span class=\"nx\">resultCapability</span><span class=\"p\">.</span><span class=\"nx\">resolve</span><span class=\"p\">,</span> <span class=\"nx\">resultCapability</span><span class=\"p\">.</span><span class=\"nx\">reject</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span>\n\n    <span class=\"p\">}</span> <span class=\"k\">catch</span> <span class=\"p\">(</span><span class=\"nx\">error</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"nx\">resultCapability</span><span class=\"p\">.</span><span class=\"nx\">reject</span><span class=\"p\">(</span><span class=\"nx\">error</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"nx\">iteratorRecord</span><span class=\"p\">.</span><span class=\"nx\">done</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"p\">;</span>\n    <span class=\"k\">return</span> <span class=\"nx\">resultCapability</span><span class=\"p\">.</span><span class=\"nx\">pledge</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>With this stripped-down version of <code class=\"highlighter-rouge\">performPledgeRace()</code>, you can see that the fundamental algorithm is take each value returned from the iterator and pass it to <code class=\"highlighter-rouge\">Pledge.resolve()</code> to ensure you have an instance of <code class=\"highlighter-rouge\">Pledge</code> to work with. The iterator can contain both <code class=\"highlighter-rouge\">Pledge</code> objects and any other non-<code class=\"highlighter-rouge\">Pledge</code> value, so the best way to ensure you have a <code class=\"highlighter-rouge\">Pledge</code> object is to pass all values to <code class=\"highlighter-rouge\">Pledge.resolve()</code> and use the result (<code class=\"highlighter-rouge\">nextPledge</code>). Then, all you need to do is attach <code class=\"highlighter-rouge\">resultCapability.resolve()</code> as the fulfillment handler and <code class=\"highlighter-rouge\">resultCapability.reject()</code> as the rejection handler. Keep in mind that these methods only work once and otherwise do nothing, so there is no harm in assigning them to all pledges (see part 3 for detail on how this works).</p>\n\n<p>With that, the <code class=\"highlighter-rouge\">Pledge.race()</code> method is complete. This is the simplest of the static methods that work on multiple promises. The next method, <code class=\"highlighter-rouge\">Pledge.any()</code>, uses some of the same logic but also adds a bit more complexity for handling rejections.</p>\n\n<h2 id=\"the-promiseany-method\">The <code class=\"highlighter-rouge\">Promise.any()</code> method</h2>\n\n<p>The <code class=\"highlighter-rouge\">Promise.any()</code> method is a variation of the <code class=\"highlighter-rouge\">Promise.race()</code> method. Like <code class=\"highlighter-rouge\">Promise.race()</code>, <code class=\"highlighter-rouge\">Promise.any()</code> will return a promise that is fulfilled with the same value as the first promise to be fulfilled. In effect, there’s still a “race” to see which promise will be fulfilled first. The difference is when none of the promises are fulfilled, in which case the returned promise is rejected with an <code class=\"highlighter-rouge\">AggregateError</code> object<sup id=\"fnref:9\"><a href="https://humanwhocodes.com/feeds/\&quot;#fn:9\"" class=\"footnote\">9</a></sup> that contains an <code class=\"highlighter-rouge\">errors</code> array with the rejection reasons of each promise. Here are some examples to better illustrate:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">const</span> <span class=\"nx\">promise1</span> <span class=\"o\">=</span> <span class=\"nb\">Promise</span><span class=\"p\">.</span><span class=\"nx\">any</span><span class=\"p\">([</span>\n    <span class=\"nb\">Promise</span><span class=\"p\">.</span><span class=\"nx\">resolve</span><span class=\"p\">(</span><span class=\"mi\">42</span><span class=\"p\">),</span>\n    <span class=\"nb\">Promise</span><span class=\"p\">.</span><span class=\"nx\">reject</span><span class=\"p\">(</span><span class=\"mi\">43</span><span class=\"p\">),</span>\n    <span class=\"nb\">Promise</span><span class=\"p\">.</span><span class=\"nx\">resolve</span><span class=\"p\">(</span><span class=\"mi\">44</span><span class=\"p\">)</span>\n<span class=\"p\">]);</span>\n\n<span class=\"nx\">promise1</span><span class=\"p\">.</span><span class=\"nx\">then</span><span class=\"p\">(</span><span class=\"nx\">value</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">value</span><span class=\"p\">);</span>     <span class=\"c1\">// 42</span>\n<span class=\"p\">});</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">promise2</span> <span class=\"o\">=</span> <span class=\"nb\">Promise</span><span class=\"p\">.</span><span class=\"nx\">any</span><span class=\"p\">([</span>\n    <span class=\"k\">new</span> <span class=\"nb\">Promise</span><span class=\"p\">(</span><span class=\"nx\">resolve</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n        <span class=\"nx\">setTimeout</span><span class=\"p\">(()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n            <span class=\"nx\">resolve</span><span class=\"p\">(</span><span class=\"mi\">42</span><span class=\"p\">);</span>\n        <span class=\"p\">},</span> <span class=\"mi\">500</span><span class=\"p\">);</span>\n    <span class=\"p\">}),</span>\n    <span class=\"nb\">Promise</span><span class=\"p\">.</span><span class=\"nx\">reject</span><span class=\"p\">(</span><span class=\"mi\">43</span><span class=\"p\">),</span>\n    <span class=\"nb\">Promise</span><span class=\"p\">.</span><span class=\"nx\">resolve</span><span class=\"p\">(</span><span class=\"mi\">44</span><span class=\"p\">)</span>\n<span class=\"p\">]);</span>\n\n<span class=\"nx\">promise2</span><span class=\"p\">.</span><span class=\"nx\">then</span><span class=\"p\">(</span><span class=\"nx\">value</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">value</span><span class=\"p\">);</span>    <span class=\"c1\">// 44</span>\n<span class=\"p\">});</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">promise3</span> <span class=\"o\">=</span> <span class=\"nb\">Promise</span><span class=\"p\">.</span><span class=\"nx\">any</span><span class=\"p\">([</span>\n    <span class=\"nb\">Promise</span><span class=\"p\">.</span><span class=\"nx\">reject</span><span class=\"p\">(</span><span class=\"mi\">42</span><span class=\"p\">),</span>\n    <span class=\"nb\">Promise</span><span class=\"p\">.</span><span class=\"nx\">reject</span><span class=\"p\">(</span><span class=\"mi\">43</span><span class=\"p\">),</span>\n    <span class=\"nb\">Promise</span><span class=\"p\">.</span><span class=\"nx\">reject</span><span class=\"p\">(</span><span class=\"mi\">44</span><span class=\"p\">)</span>\n<span class=\"p\">]);</span>\n\n<span class=\"nx\">promise3</span><span class=\"p\">.</span><span class=\"k\">catch</span><span class=\"p\">(</span><span class=\"nx\">reason</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">reason</span><span class=\"p\">.</span><span class=\"nx\">errors</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]);</span>    <span class=\"c1\">// 42</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">reason</span><span class=\"p\">.</span><span class=\"nx\">errors</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]);</span>    <span class=\"c1\">// 43</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">reason</span><span class=\"p\">.</span><span class=\"nx\">errors</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]);</span>    <span class=\"c1\">// 44</span>\n<span class=\"p\">});</span>\n</code></pre></div></div>\n\n<p>The first two calls to <code class=\"highlighter-rouge\">Promise.any()</code> in this code are resolved to a fulfilled promise because at least one promise was fulfilled; the last call resolves to an <code class=\"highlighter-rouge\">AggregateError</code> object where the <code class=\"highlighter-rouge\">errors</code> property is an array of all the rejected values.</p>\n\n<h3 id=\"creating-an-aggregateerror-object\">Creating an <code class=\"highlighter-rouge\">AggregateError</code> object</h3>\n\n<p>The first step in implementing <code class=\"highlighter-rouge\">Pledge.any()</code> is to create a representation of <code class=\"highlighter-rouge\">AggregateError</code>. This class is new enough to JavaScript that it’s not present in a lot of runtimes yet, so it’s helpful to have a standalone representation. The specification<sup id=\"fnref:9:1\"><a href="https://humanwhocodes.com/feeds/\&quot;#fn:9\"" class=\"footnote\">9</a></sup> indicates that <code class=\"highlighter-rouge\">AggregateError</code> is not really a class, but rather a function that can be called with or without <code class=\"highlighter-rouge\">new</code>. Here’s what a translation of the specification looks like:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">export</span> <span class=\"kd\">function</span> <span class=\"nx\">PledgeAggregateError</span><span class=\"p\">(</span><span class=\"nx\">errors</span><span class=\"o\">=</span><span class=\"p\">[],</span> <span class=\"nx\">message</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\n    <span class=\"kd\">const</span> <span class=\"nx\">O</span> <span class=\"o\">=</span> <span class=\"k\">new</span><span class=\"p\">.</span><span class=\"nx\">target</span> <span class=\"o\">===</span> <span class=\"kc\">undefined</span> <span class=\"p\">?</span> <span class=\"k\">new</span> <span class=\"nx\">PledgeAggregateError</span><span class=\"p\">()</span> <span class=\"p\">:</span> <span class=\"k\">this</span><span class=\"p\">;</span>\n\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"k\">typeof</span> <span class=\"nx\">message</span> <span class=\"o\">!==</span> <span class=\"dl\">\"</span><span class=\"s2\">undefined</span><span class=\"dl\">\"</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"kd\">const</span> <span class=\"nx\">msg</span> <span class=\"o\">=</span> <span class=\"nb\">String</span><span class=\"p\">(</span><span class=\"nx\">message</span><span class=\"p\">);</span>\n\n        <span class=\"nb\">Object</span><span class=\"p\">.</span><span class=\"nx\">defineProperty</span><span class=\"p\">(</span><span class=\"nx\">O</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">message</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n            <span class=\"na\">value</span><span class=\"p\">:</span> <span class=\"nx\">msg</span><span class=\"p\">,</span>\n            <span class=\"na\">writable</span><span class=\"p\">:</span> <span class=\"kc\">true</span><span class=\"p\">,</span>\n            <span class=\"na\">enumerable</span><span class=\"p\">:</span> <span class=\"kc\">false</span><span class=\"p\">,</span>\n            <span class=\"na\">configurable</span><span class=\"p\">:</span> <span class=\"kc\">true</span>\n        <span class=\"p\">});</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"c1\">// errors can be an iterable</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">errorsList</span> <span class=\"o\">=</span> <span class=\"p\">[...</span><span class=\"nx\">errors</span><span class=\"p\">];</span>\n\n    <span class=\"nb\">Object</span><span class=\"p\">.</span><span class=\"nx\">defineProperty</span><span class=\"p\">(</span><span class=\"nx\">O</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">errors</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n        <span class=\"na\">configurable</span><span class=\"p\">:</span> <span class=\"kc\">true</span><span class=\"p\">,</span>\n        <span class=\"na\">enumerable</span><span class=\"p\">:</span> <span class=\"kc\">false</span><span class=\"p\">,</span>\n        <span class=\"na\">writable</span><span class=\"p\">:</span> <span class=\"kc\">true</span><span class=\"p\">,</span>\n        <span class=\"na\">value</span><span class=\"p\">:</span> <span class=\"nx\">errorsList</span>\n    <span class=\"p\">});</span>\n\n    <span class=\"k\">return</span> <span class=\"nx\">O</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>An interesting note about this type of error is that the <code class=\"highlighter-rouge\">message</code> parameter is optional and may not appear on the object. The <code class=\"highlighter-rouge\">errors</code> parameter is also optional, however, the created object will always have an <code class=\"highlighter-rouge\">errors</code> property. Due to this, and the fact that the implementation is done with a function, there are a variety of ways to create a new instance:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">const</span> <span class=\"nx\">error1</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">PledgeAggregateError</span><span class=\"p\">();</span>\n<span class=\"kd\">const</span> <span class=\"nx\">error2</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">PledgeAggregateError</span><span class=\"p\">([</span><span class=\"mi\">42</span><span class=\"p\">,</span> <span class=\"mi\">43</span><span class=\"p\">,</span> <span class=\"mi\">44</span><span class=\"p\">]);</span>\n<span class=\"kd\">const</span> <span class=\"nx\">error3</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">PledgeAggregateError</span><span class=\"p\">([</span><span class=\"mi\">42</span><span class=\"p\">,</span> <span class=\"mi\">43</span><span class=\"p\">,</span> <span class=\"mi\">44</span><span class=\"p\">],</span> <span class=\"dl\">\"</span><span class=\"s2\">Oops!</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">error4</span> <span class=\"o\">=</span> <span class=\"nx\">PledgeAggregateError</span><span class=\"p\">();</span>\n<span class=\"kd\">const</span> <span class=\"nx\">error5</span> <span class=\"o\">=</span> <span class=\"nx\">PledgeAggregateError</span><span class=\"p\">([</span><span class=\"mi\">42</span><span class=\"p\">,</span> <span class=\"mi\">43</span><span class=\"p\">,</span> <span class=\"mi\">44</span><span class=\"p\">]);</span>\n<span class=\"kd\">const</span> <span class=\"nx\">error6</span> <span class=\"o\">=</span> <span class=\"nx\">PledgeAggregateError</span><span class=\"p\">([</span><span class=\"mi\">42</span><span class=\"p\">,</span> <span class=\"mi\">43</span><span class=\"p\">,</span> <span class=\"mi\">44</span><span class=\"p\">],</span> <span class=\"dl\">\"</span><span class=\"s2\">Oops!</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n</code></pre></div></div>\n\n<p>This implementation matches how the specification defines <code class=\"highlighter-rouge\">AggregateError</code> objects, so now it’s time to move on to implementing <code class=\"highlighter-rouge\">Pledge.any()</code> itself.</p>\n\n<h3 id=\"creating-the-pledgeany-method\">Creating the <code class=\"highlighter-rouge\">Pledge.any()</code> method</h3>\n\n<p>As I mentioned in the previous section, all of the algorithms for the static methods that work on multiple promises are similar, with the only real exception being the name of the operation that it delegates to. The <code class=\"highlighter-rouge\">Promise.any()</code> method<sup id=\"fnref:10\"><a href="https://humanwhocodes.com/feeds/\&quot;#fn:10\"" class=\"footnote\">10</a></sup> follows the same structure as the <code class=\"highlighter-rouge\">Promise.race()</code> method, and so the <code class=\"highlighter-rouge\">Pledge.any()</code> method in this library should look familiar:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">class</span> <span class=\"nx\">Pledge</span> <span class=\"p\">{</span>\n\n    <span class=\"c1\">// other methods omitted for space</span>\n\n    <span class=\"kd\">static</span> <span class=\"nx\">any</span><span class=\"p\">(</span><span class=\"nx\">iterable</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\n        <span class=\"kd\">const</span> <span class=\"nx\">C</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">;</span>\n        <span class=\"kd\">const</span> <span class=\"nx\">pledgeCapability</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">PledgeCapability</span><span class=\"p\">(</span><span class=\"nx\">C</span><span class=\"p\">);</span>\n        <span class=\"kd\">let</span> <span class=\"nx\">iteratorRecord</span><span class=\"p\">;</span>\n\n        <span class=\"k\">try</span> <span class=\"p\">{</span>\n            <span class=\"kd\">const</span> <span class=\"nx\">pledgeResolve</span> <span class=\"o\">=</span> <span class=\"nx\">getPledgeResolve</span><span class=\"p\">(</span><span class=\"nx\">C</span><span class=\"p\">);</span>\n            <span class=\"nx\">iteratorRecord</span> <span class=\"o\">=</span> <span class=\"nx\">getIterator</span><span class=\"p\">(</span><span class=\"nx\">iterable</span><span class=\"p\">);</span>\n            <span class=\"kd\">const</span> <span class=\"nx\">result</span> <span class=\"o\">=</span> <span class=\"nx\">performPledgeAny</span><span class=\"p\">(</span><span class=\"nx\">iteratorRecord</span><span class=\"p\">,</span> <span class=\"nx\">C</span><span class=\"p\">,</span> <span class=\"nx\">pledgeCapability</span><span class=\"p\">,</span> <span class=\"nx\">pledgeResolve</span><span class=\"p\">);</span>\n            <span class=\"k\">return</span> <span class=\"nx\">result</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span> <span class=\"k\">catch</span> <span class=\"p\">(</span><span class=\"nx\">error</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\n            <span class=\"kd\">let</span> <span class=\"nx\">result</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">ThrowCompletion</span><span class=\"p\">(</span><span class=\"nx\">error</span><span class=\"p\">);</span>\n\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">iteratorRecord</span> <span class=\"o\">&amp;&amp;</span> <span class=\"nx\">iteratorRecord</span><span class=\"p\">.</span><span class=\"nx\">done</span> <span class=\"o\">===</span> <span class=\"kc\">false</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                <span class=\"nx\">result</span> <span class=\"o\">=</span> <span class=\"nx\">iteratorClose</span><span class=\"p\">(</span><span class=\"nx\">iteratorRecord</span><span class=\"p\">,</span> <span class=\"nx\">result</span><span class=\"p\">);</span>\n            <span class=\"p\">}</span>\n\n            <span class=\"nx\">pledgeCapability</span><span class=\"p\">.</span><span class=\"nx\">reject</span><span class=\"p\">(</span><span class=\"nx\">result</span><span class=\"p\">.</span><span class=\"nx\">value</span><span class=\"p\">);</span>\n            <span class=\"k\">return</span> <span class=\"nx\">pledgeCapability</span><span class=\"p\">.</span><span class=\"nx\">pledge</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n\n    <span class=\"p\">}</span>\n\n    <span class=\"c1\">// other methods omitted for space</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>Because you’re already familiar with this basic algorithm, I’ll skip directly to what the <code class=\"highlighter-rouge\">performPledgeAny()</code> function does.</p>\n\n<p>The algorithm for the <code class=\"highlighter-rouge\">PerformPromiseAny()</code> method<sup id=\"fnref:11\"><a href="https://humanwhocodes.com/feeds/\&quot;#fn:11\"" class=\"footnote\">11</a></sup> looks more complicated than it actually is. Part of the reason for that is the wacky way iterators are used, but you are already familiar with that. In fact, all this method does is attach <code class=\"highlighter-rouge\">resultCapability.resolve</code> to be the fulfillment handler of each promise and attaches a special rejection handler that simply collects all of the rejection reasons in case they are needed.</p>\n\n<p>To keep track of rejection reasons, the operation defines three variables:</p>\n\n<ol>\n  <li><code class=\"highlighter-rouge\">errors</code> - the array to keep track of all rejection reasons</li>\n  <li><code class=\"highlighter-rouge\">remainingElementsCount</code> - a record whose only purpose is to track how many promises still need to be fulfilled</li>\n  <li><code class=\"highlighter-rouge\">index</code> - the index in the <code class=\"highlighter-rouge\">errors</code> array where each rejection reason should be placed</li>\n</ol>\n\n<p>These three variables are the primary difference between <code class=\"highlighter-rouge\">performPledgeAny()</code> and <code class=\"highlighter-rouge\">performPledgeRace()</code>, and these will also appear in the implementations for <code class=\"highlighter-rouge\">Pledge.all()</code> and <code class=\"highlighter-rouge\">Pledge.allSettled()</code>.</p>\n\n<p>With that basic explanation out of the way, here’s the code:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">function</span> <span class=\"nx\">performPledgeAny</span><span class=\"p\">(</span><span class=\"nx\">iteratorRecord</span><span class=\"p\">,</span> <span class=\"kd\">constructor</span><span class=\"p\">,</span> <span class=\"nx\">resultCapability</span><span class=\"p\">,</span> <span class=\"nx\">pledgeResolve</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\n    <span class=\"nx\">assertIsConstructor</span><span class=\"p\">(</span><span class=\"kd\">constructor</span><span class=\"p\">);</span>\n    <span class=\"nx\">assertIsCallable</span><span class=\"p\">(</span><span class=\"nx\">pledgeResolve</span><span class=\"p\">);</span>\n\n    <span class=\"kd\">const</span> <span class=\"nx\">errors</span> <span class=\"o\">=</span> <span class=\"p\">[];</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">remainingElementsCount</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"na\">value</span><span class=\"p\">:</span> <span class=\"mi\">1</span> <span class=\"p\">};</span>\n    <span class=\"kd\">let</span> <span class=\"nx\">index</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n\n    <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"kd\">let</span> <span class=\"nx\">next</span><span class=\"p\">;</span>\n        \n        <span class=\"k\">try</span> <span class=\"p\">{</span>\n            <span class=\"nx\">next</span> <span class=\"o\">=</span> <span class=\"nx\">iteratorStep</span><span class=\"p\">(</span><span class=\"nx\">iteratorRecord</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span> <span class=\"k\">catch</span> <span class=\"p\">(</span><span class=\"nx\">error</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"nx\">iteratorRecord</span><span class=\"p\">.</span><span class=\"nx\">done</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"p\">;</span>\n            <span class=\"nx\">resultCapability</span><span class=\"p\">.</span><span class=\"nx\">reject</span><span class=\"p\">(</span><span class=\"nx\">error</span><span class=\"p\">);</span>\n            <span class=\"k\">return</span> <span class=\"nx\">resultCapability</span><span class=\"p\">.</span><span class=\"nx\">pledge</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">next</span> <span class=\"o\">===</span> <span class=\"kc\">false</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"nx\">remainingElementsCount</span><span class=\"p\">.</span><span class=\"nx\">value</span> <span class=\"o\">=</span> <span class=\"nx\">remainingElementsCount</span><span class=\"p\">.</span><span class=\"nx\">value</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">remainingElementsCount</span><span class=\"p\">.</span><span class=\"nx\">value</span> <span class=\"o\">===</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                <span class=\"kd\">const</span> <span class=\"nx\">error</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">PledgeAggregateError</span><span class=\"p\">();</span>\n                <span class=\"nb\">Object</span><span class=\"p\">.</span><span class=\"nx\">defineProperty</span><span class=\"p\">(</span><span class=\"nx\">error</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">errors</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n                    <span class=\"na\">configurable</span><span class=\"p\">:</span> <span class=\"kc\">true</span><span class=\"p\">,</span>\n                    <span class=\"na\">enumerable</span><span class=\"p\">:</span> <span class=\"kc\">false</span><span class=\"p\">,</span>\n                    <span class=\"na\">writable</span><span class=\"p\">:</span> <span class=\"kc\">true</span><span class=\"p\">,</span>\n                    <span class=\"na\">value</span><span class=\"p\">:</span> <span class=\"nx\">errors</span>\n                <span class=\"p\">});</span>\n        \n                <span class=\"nx\">resultCapability</span><span class=\"p\">.</span><span class=\"nx\">reject</span><span class=\"p\">(</span><span class=\"nx\">error</span><span class=\"p\">);</span>\n            <span class=\"p\">}</span>\n        \n            <span class=\"k\">return</span> <span class=\"nx\">resultCapability</span><span class=\"p\">.</span><span class=\"nx\">pledge</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n        \n        <span class=\"kd\">let</span> <span class=\"nx\">nextValue</span><span class=\"p\">;</span>\n\n        <span class=\"k\">try</span> <span class=\"p\">{</span>\n            <span class=\"nx\">nextValue</span> <span class=\"o\">=</span> <span class=\"nx\">iteratorValue</span><span class=\"p\">(</span><span class=\"nx\">next</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span> <span class=\"k\">catch</span><span class=\"p\">(</span><span class=\"nx\">error</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"nx\">iteratorRecord</span><span class=\"p\">.</span><span class=\"nx\">done</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"p\">;</span>\n            <span class=\"nx\">resultCapability</span><span class=\"p\">.</span><span class=\"nx\">reject</span><span class=\"p\">(</span><span class=\"nx\">error</span><span class=\"p\">);</span>\n            <span class=\"k\">return</span> <span class=\"nx\">resultCapability</span><span class=\"p\">.</span><span class=\"nx\">pledge</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"nx\">errors</span><span class=\"p\">.</span><span class=\"nx\">push</span><span class=\"p\">(</span><span class=\"kc\">undefined</span><span class=\"p\">);</span>\n        <span class=\"kd\">const</span> <span class=\"nx\">nextPledge</span> <span class=\"o\">=</span> <span class=\"nx\">pledgeResolve</span><span class=\"p\">.</span><span class=\"nx\">call</span><span class=\"p\">(</span><span class=\"kd\">constructor</span><span class=\"p\">,</span> <span class=\"nx\">nextValue</span><span class=\"p\">);</span>\n        <span class=\"kd\">const</span> <span class=\"nx\">rejectElement</span> <span class=\"o\">=</span> <span class=\"nx\">createPledgeAnyRejectElement</span><span class=\"p\">(</span><span class=\"nx\">index</span><span class=\"p\">,</span> <span class=\"nx\">errors</span><span class=\"p\">,</span> <span class=\"nx\">resultCapability</span><span class=\"p\">,</span> <span class=\"nx\">remainingElementsCount</span><span class=\"p\">);</span>\n        \n        <span class=\"nx\">remainingElementsCount</span><span class=\"p\">.</span><span class=\"nx\">value</span> <span class=\"o\">=</span> <span class=\"nx\">remainingElementsCount</span><span class=\"p\">.</span><span class=\"nx\">value</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n        <span class=\"nx\">nextPledge</span><span class=\"p\">.</span><span class=\"nx\">then</span><span class=\"p\">(</span><span class=\"nx\">resultCapability</span><span class=\"p\">.</span><span class=\"nx\">resolve</span><span class=\"p\">,</span> <span class=\"nx\">rejectElement</span><span class=\"p\">);</span>\n        <span class=\"nx\">index</span> <span class=\"o\">=</span> <span class=\"nx\">index</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>The first important part of this function is when <code class=\"highlighter-rouge\">remainingElementsCount.value</code> is <code class=\"highlighter-rouge\">0</code>, then a new <code class=\"highlighter-rouge\">PledgeAggregateError</code> object is created and passed to <code class=\"highlighter-rouge\">resultCapability.reject()</code>. This is the condition where there are no more promises in the iterator and all of the promises have been rejected.</p>\n\n<p>The next important part of the code is the <code class=\"highlighter-rouge\">createPledgeAnyRejectElement()</code> function. This function doesn’t have a corresponding operation in the specification, but rather, is defined as a series of steps<sup id=\"fnref:12\"><a href="https://humanwhocodes.com/feeds/\&quot;#fn:12\"" class=\"footnote\">12</a></sup> to take; I split it out into a function to make the code easier to understand. The “reject element” is the rejection handler that should be attached to each promise, and it’s job is to aggregate the rejection reason. Here’s the code:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">function</span> <span class=\"nx\">createPledgeAnyRejectElement</span><span class=\"p\">(</span><span class=\"nx\">index</span><span class=\"p\">,</span> <span class=\"nx\">errors</span><span class=\"p\">,</span> <span class=\"nx\">pledgeCapability</span><span class=\"p\">,</span> <span class=\"nx\">remainingElementsCount</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\n    <span class=\"kd\">const</span> <span class=\"nx\">alreadyCalled</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"na\">value</span><span class=\"p\">:</span> <span class=\"kc\">false</span> <span class=\"p\">};</span>\n\n    <span class=\"k\">return</span> <span class=\"nx\">x</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">alreadyCalled</span><span class=\"p\">.</span><span class=\"nx\">value</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"k\">return</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"nx\">alreadyCalled</span><span class=\"p\">.</span><span class=\"nx\">value</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"p\">;</span>\n\n        <span class=\"nx\">errors</span><span class=\"p\">[</span><span class=\"nx\">index</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nx\">x</span><span class=\"p\">;</span>\n        <span class=\"nx\">remainingElementsCount</span><span class=\"p\">.</span><span class=\"nx\">value</span> <span class=\"o\">=</span> <span class=\"nx\">remainingElementsCount</span><span class=\"p\">.</span><span class=\"nx\">value</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">remainingElementsCount</span><span class=\"p\">.</span><span class=\"nx\">value</span> <span class=\"o\">===</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"kd\">const</span> <span class=\"nx\">error</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">PledgeAggregateError</span><span class=\"p\">();</span>\n            <span class=\"nb\">Object</span><span class=\"p\">.</span><span class=\"nx\">defineProperty</span><span class=\"p\">(</span><span class=\"nx\">error</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">errors</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n                <span class=\"na\">configurable</span><span class=\"p\">:</span> <span class=\"kc\">true</span><span class=\"p\">,</span>\n                <span class=\"na\">enumerable</span><span class=\"p\">:</span> <span class=\"kc\">false</span><span class=\"p\">,</span>\n                <span class=\"na\">writable</span><span class=\"p\">:</span> <span class=\"kc\">true</span><span class=\"p\">,</span>\n                <span class=\"na\">value</span><span class=\"p\">:</span> <span class=\"nx\">errors</span>\n            <span class=\"p\">});</span>\n\n            <span class=\"k\">return</span> <span class=\"nx\">pledgeCapability</span><span class=\"p\">.</span><span class=\"nx\">reject</span><span class=\"p\">(</span><span class=\"nx\">error</span><span class=\"p\">);</span>\n\n        <span class=\"p\">}</span>\n\n    <span class=\"p\">};</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>As with other fulfillment and rejection handlers, this function returns a function that first checks to make sure it’s not being called twice. The <code class=\"highlighter-rouge\">x</code> parameter is the reason for the rejection and so is placed into the <code class=\"highlighter-rouge\">errors</code> array at <code class=\"highlighter-rouge\">index</code>. Then, <code class=\"highlighter-rouge\">remainingElementsCount.value</code> is checked to see if it’s <code class=\"highlighter-rouge\">0</code>, and if so, a new <code class=\"highlighter-rouge\">PledgeAggregateError</code> is created. This is necessary because the promises might be rejected long after the initial called to <code class=\"highlighter-rouge\">Pledge.any()</code> has completed. So the check in <code class=\"highlighter-rouge\">performPledgeAny()</code> handles the situation where all of the promises are rejected synchronously while the reject element functions handle the situation where all of the promises are rejected asynchronously.</p>\n\n<p>And for clarify, here is what the <code class=\"highlighter-rouge\">performPledgeAny()</code> method would look like without the iterator craziness:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">function</span> <span class=\"nx\">performPledgeAnySimple</span><span class=\"p\">(</span><span class=\"nx\">iteratorRecord</span><span class=\"p\">,</span> <span class=\"kd\">constructor</span><span class=\"p\">,</span> <span class=\"nx\">resultCapability</span><span class=\"p\">,</span> <span class=\"nx\">pledgeResolve</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\n    <span class=\"nx\">assertIsConstructor</span><span class=\"p\">(</span><span class=\"kd\">constructor</span><span class=\"p\">);</span>\n    <span class=\"nx\">assertIsCallable</span><span class=\"p\">(</span><span class=\"nx\">pledgeResolve</span><span class=\"p\">);</span>\n\n    <span class=\"c1\">// You could actually just pass the iterator instead of `iteratatorRecord`</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">iterator</span> <span class=\"o\">=</span> <span class=\"nx\">iteratorRecord</span><span class=\"p\">.</span><span class=\"nx\">iterator</span><span class=\"p\">;</span>\n\n    <span class=\"kd\">const</span> <span class=\"nx\">errors</span> <span class=\"o\">=</span> <span class=\"p\">[];</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">remainingElementsCount</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"na\">value</span><span class=\"p\">:</span> <span class=\"mi\">1</span> <span class=\"p\">};</span>\n    <span class=\"kd\">let</span> <span class=\"nx\">index</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n\n    <span class=\"k\">try</span> <span class=\"p\">{</span>\n\n        <span class=\"c1\">// loop over every value in the iterator</span>\n        <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kd\">const</span> <span class=\"nx\">nextValue</span> <span class=\"k\">of</span> <span class=\"nx\">iterator</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"nx\">errors</span><span class=\"p\">.</span><span class=\"nx\">push</span><span class=\"p\">(</span><span class=\"kc\">undefined</span><span class=\"p\">);</span>\n\n            <span class=\"kd\">const</span> <span class=\"nx\">nextPledge</span> <span class=\"o\">=</span> <span class=\"nx\">pledgeResolve</span><span class=\"p\">.</span><span class=\"nx\">call</span><span class=\"p\">(</span><span class=\"kd\">constructor</span><span class=\"p\">,</span> <span class=\"nx\">nextValue</span><span class=\"p\">);</span>\n            <span class=\"kd\">const</span> <span class=\"nx\">rejectElement</span> <span class=\"o\">=</span> <span class=\"nx\">createPledgeAnyRejectElement</span><span class=\"p\">(</span><span class=\"nx\">index</span><span class=\"p\">,</span> <span class=\"nx\">errors</span><span class=\"p\">,</span> <span class=\"nx\">resultCapability</span><span class=\"p\">,</span> <span class=\"nx\">remainingElementsCount</span><span class=\"p\">);</span>\n\n            <span class=\"nx\">nextPledge</span><span class=\"p\">.</span><span class=\"nx\">then</span><span class=\"p\">(</span><span class=\"nx\">resultCapability</span><span class=\"p\">.</span><span class=\"nx\">resolve</span><span class=\"p\">,</span> <span class=\"nx\">rejectElement</span><span class=\"p\">);</span>\n\n            <span class=\"nx\">remainingElementsCount</span><span class=\"p\">.</span><span class=\"nx\">value</span> <span class=\"o\">=</span> <span class=\"nx\">remainingElementsCount</span><span class=\"p\">.</span><span class=\"nx\">value</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n            <span class=\"nx\">index</span> <span class=\"o\">=</span> <span class=\"nx\">index</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"nx\">remainingElementsCount</span><span class=\"p\">.</span><span class=\"nx\">value</span> <span class=\"o\">=</span> <span class=\"nx\">remainingElementsCount</span><span class=\"p\">.</span><span class=\"nx\">value</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">remainingElementsCount</span><span class=\"p\">.</span><span class=\"nx\">value</span> <span class=\"o\">===</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"kd\">const</span> <span class=\"nx\">error</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">PledgeAggregateError</span><span class=\"p\">();</span>\n            <span class=\"nb\">Object</span><span class=\"p\">.</span><span class=\"nx\">defineProperty</span><span class=\"p\">(</span><span class=\"nx\">error</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">errors</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n                <span class=\"na\">configurable</span><span class=\"p\">:</span> <span class=\"kc\">true</span><span class=\"p\">,</span>\n                <span class=\"na\">enumerable</span><span class=\"p\">:</span> <span class=\"kc\">false</span><span class=\"p\">,</span>\n                <span class=\"na\">writable</span><span class=\"p\">:</span> <span class=\"kc\">true</span><span class=\"p\">,</span>\n                <span class=\"na\">value</span><span class=\"p\">:</span> <span class=\"nx\">errors</span>\n            <span class=\"p\">});</span>\n    \n            <span class=\"nx\">resultCapability</span><span class=\"p\">.</span><span class=\"nx\">reject</span><span class=\"p\">(</span><span class=\"nx\">error</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span>\n\n    <span class=\"p\">}</span> <span class=\"k\">catch</span> <span class=\"p\">(</span><span class=\"nx\">error</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"nx\">resultCapability</span><span class=\"p\">.</span><span class=\"nx\">reject</span><span class=\"p\">(</span><span class=\"nx\">error</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"nx\">iteratorRecord</span><span class=\"p\">.</span><span class=\"nx\">done</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"p\">;</span>\n    <span class=\"k\">return</span> <span class=\"nx\">resultCapability</span><span class=\"p\">.</span><span class=\"nx\">pledge</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>This version is not as straightforward as the <code class=\"highlighter-rouge\">performPledgeRace()</code> equivalent, but hopefully you can see that the overall approach is still just looping over the promises and attaching appropriate fulfillment and rejection handlers.</p>\n\n<h2 id=\"wrapping-up\">Wrapping Up</h2>\n\n<p>This post covered creating <code class=\"highlighter-rouge\">Promise.race()</code> and <code class=\"highlighter-rouge\">Promise.any()</code> from scratch. These are just two of the built-in methods that work on multiple promises. The <code class=\"highlighter-rouge\">Promise.race()</code> method is the simplest of these four methods because you don’t have to do any tracking; each promise is assigned the same fulfillment and rejection handlers, and that is all you need to worry about. The <code class=\"highlighter-rouge\">Promise.any()</code> method is a bit more complex because you need to keep track of all the rejections in case none of the promises are fulfilled.</p>\n\n<p>All of this code is available in the <a href="https://humanwhocodes.com/feeds/\&quot;https://github.com/humanwhocodes/pledge\&quot;">Pledge</a> on GitHub. I hope you’ll download it and try it out to get a better understanding of promises.</p>\n\n<h2 id=\"want-more-posts-in-this-series\">Want more posts in this series?</h2>\n\n<p>If you are enjoying this series and would like to see it continue, please <a href="https://humanwhocodes.com/feeds/\&quot;https://github.com/sponsors/nzakas\&quot;">sponsor me</a> on GitHub. For every five new sponsors I receive, I’ll release a new post. Here’s what I plan on covering:</p>\n\n<ul>\n  <li>Part 6: <code class=\"highlighter-rouge\">Promise.all()</code> and <code class=\"highlighter-rouge\">Promise.allSettled()</code> (when I have 40 sponsors)</li>\n  <li>Part 7: Unhandled promise rejection tracking (when I have 45 sponsors)</li>\n</ul>\n\n<p>It takes a significant amount of time to put together posts like these, and I appreciate your consideration in helping me continue to create quality content like this.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n  <ol>\n    <li id=\"fn:1\">\n      <p><a href="https://humanwhocodes.com/feeds/\&quot;https://tc39.es/ecma262/#sec-getiterator\"">GetIterator ( obj [ , hint [ , method ] ] )</a> <a href="https://humanwhocodes.com/feeds/\&quot;#fnref:1\"" class=\"reversefootnote\">&#8617;</a></p>\n    </li>\n    <li id=\"fn:2\">\n      <p><a href="https://humanwhocodes.com/feeds/\&quot;https://tc39.es/ecma262/#sec-iteratornext\"">IteratorNext (IteratorNext ( iteratorRecord [ , value ] ))</a> <a href="https://humanwhocodes.com/feeds/\&quot;#fnref:2\"" class=\"reversefootnote\">&#8617;</a></p>\n    </li>\n    <li id=\"fn:3\">\n      <p><a href="https://humanwhocodes.com/feeds/\&quot;https://tc39.es/ecma262/#sec-iteratorcomplete\"">IteratorComplete ( iterResult )</a> <a href="https://humanwhocodes.com/feeds/\&quot;#fnref:3\"" class=\"reversefootnote\">&#8617;</a></p>\n    </li>\n    <li id=\"fn:4\">\n      <p><a href="https://humanwhocodes.com/feeds/\&quot;https://tc39.es/ecma262/#sec-iteratorvalue\"">IteratorValue ( iterResult )</a> <a href="https://humanwhocodes.com/feeds/\&quot;#fnref:4\"" class=\"reversefootnote\">&#8617;</a></p>\n    </li>\n    <li id=\"fn:5\">\n      <p><a href="https://humanwhocodes.com/feeds/\&quot;https://tc39.es/ecma262/#sec-iteratorstep\"">IteratorStep ( iteratorRecord )</a> <a href="https://humanwhocodes.com/feeds/\&quot;#fnref:5\"" class=\"reversefootnote\">&#8617;</a></p>\n    </li>\n    <li id=\"fn:6\">\n      <p><a href="https://humanwhocodes.com/feeds/\&quot;https://tc39.es/ecma262/#sec-promise.race\"">Promise.race ( iterable )</a> <a href="https://humanwhocodes.com/feeds/\&quot;#fnref:6\"" class=\"reversefootnote\">&#8617;</a></p>\n    </li>\n    <li id=\"fn:7\">\n      <p><a href="https://humanwhocodes.com/feeds/\&quot;https://tc39.es/ecma262/#sec-getpromiseresolve\"">GetPromiseResolve ( promiseConstructor )</a> <a href="https://humanwhocodes.com/feeds/\&quot;#fnref:7\"" class=\"reversefootnote\">&#8617;</a></p>\n    </li>\n    <li id=\"fn:8\">\n      <p><a href="https://humanwhocodes.com/feeds/\&quot;https://tc39.es/ecma262/#sec-performpromiserace\"">PerformPromiseRace ( iteratorRecord, constructor, resultCapability, promiseResolve )</a> <a href="https://humanwhocodes.com/feeds/\&quot;#fnref:8\"" class=\"reversefootnote\">&#8617;</a></p>\n    </li>\n    <li id=\"fn:9\">\n      <p><a href="https://humanwhocodes.com/feeds/\&quot;https://tc39.es/ecma262/#sec-aggregate-error-objects\"">AggregateError Objects</a> <a href="https://humanwhocodes.com/feeds/\&quot;#fnref:9\"" class=\"reversefootnote\">&#8617;</a> <a href="https://humanwhocodes.com/feeds/\&quot;#fnref:9:1\"" class=\"reversefootnote\">&#8617;<sup>2</sup></a></p>\n    </li>\n    <li id=\"fn:10\">\n      <p><a href="https://humanwhocodes.com/feeds/\&quot;https://tc39.es/ecma262/#sec-promise.any\"">Promise.any ( iterable )</a> <a href="https://humanwhocodes.com/feeds/\&quot;#fnref:10\"" class=\"reversefootnote\">&#8617;</a></p>\n    </li>\n    <li id=\"fn:11\">\n      <p><a href="https://humanwhocodes.com/feeds/\&quot;https://tc39.es/ecma262/#sec-performpromiseany\"">PerformPromiseAny ( iteratorRecord, constructor, resultCapability, promiseResolve )</a> <a href="https://humanwhocodes.com/feeds/\&quot;#fnref:11\"" class=\"reversefootnote\">&#8617;</a></p>\n    </li>\n    <li id=\"fn:12\">\n      <p><a href="https://humanwhocodes.com/feeds/\&quot;https://tc39.es/ecma262/#sec-promise.any-reject-element-functions\"">Promise.any Reject Element Functions</a> <a href="https://humanwhocodes.com/feeds/\&quot;#fnref:12\"" class=\"reversefootnote\">&#8617;</a></p>\n    </li>\n  </ol>\n</div>\n",
            "url": "https://humanwhocodes.com/blog/2020/11/creating-javascript-promise-from-scratch-promise-race-any/",
            
            
            
            "tags": ["JavaScript","Promises","ECMAScript 6"],
            
            "date_published": "2020-11-24T00:00:00+00:00",
            "date_modified": "2020-11-24T00:00:00+00:00",
            
                "author": 
                ""
                
            
        },
    
        {
            "id": "https://humanwhocodes.com/blog/2020/10/creating-javascript-promise-from-scratch-promise-resolve-reject/",
            "title": "Creating a JavaScript promise from scratch, Part 4: Promise.resolve() and Promise.reject()",
            "summary": "When you create a promise with the Promise constructor, you’re creating an unsettled promise, meaning the promise state is pending until either the resolve or reject function is called inside the constructor. You can also created promises by using the Promise.resolve() and Promise.reject() methods, in which case, the promises might already be fulfilled or rejected as soon as they are created. These methods are helpful for wrapping known values in promises without going through the trouble of defining an executor function. However, Promise.resolve() doesn’t directly map to resolve inside an executor, and Promise.reject() doesn’t directly map to reject inside an executor.",
            "content_text": "When you create a promise with the Promise constructor, you’re creating an unsettled promise, meaning the promise state is pending until either the resolve or reject function is called inside the constructor. You can also created promises by using the Promise.resolve() and Promise.reject() methods, in which case, the promises might already be fulfilled or rejected as soon as they are created. These methods are helpful for wrapping known values in promises without going through the trouble of defining an executor function. However, Promise.resolve() doesn’t directly map to resolve inside an executor, and Promise.reject() doesn’t directly map to reject inside an executor.\n\nNote: This is the fourth post in my series about creating JavaScript promises from scratch. If you haven’t already read the first post, the second post, and the third post, I would suggest you do so because this post builds on the topics covered in those posts.\n\nAs a reminder, this series is based on my promise library, Pledge. You can view and download all of the source code from GitHub.\n\nThe Promise.resolve() method\n\nThe purpose of the Promise.resolve() method is to return a promise that resolves to a given argument. However, there is some nuanced behavior around what it ends up returning:\n\n\n  If the argument isn’t a promise, a new fulfilled promise is returned where the fulfillment value is the argument.\n  If the argument is a promise and the promise’s constructor is different than the this value inside of Promise.resolve(), then a new promise is created using the this value and that promise is set to resolve when the argument promise resolves.\n  If the argument is a promise and the promise’s constructor is the same as the this value inside of Promise.resolve(), then the argument promise is returned and no new promise is created.\n\n\nHere are some examples to illustrate these cases:\n\n// non-promise value\nconst promise1 = Promise.resolve(42);\nconsole.log(promise1.constructor === Promise);  // true\n\n// promise with the same constructor\nconst promise2 = Promise.resolve(promise1);\nconsole.log(promise2.constructor === Promise);  // true\nconsole.log(promise2 === promise1);             // true\n\n// promise with a different constructor\nclass MyPromise extends Promise {}\n\nconst promise3 = MyPromise.resolve(42);\nconst promise4 = Promise.resolve(promise3);\nconsole.log(promise3.constructor === MyPromise); // true\nconsole.log(promise4.constructor === Promise);      // true\nconsole.log(promise3 === promise4);                 // false\n\n\nIn this code, passing 42 to Promise.resolve() results in a new fulfilled promise, promise1 that was created using the Promise constructor. In the second part, promise1 is passed to Promise.resolve() and the returned promise, promise2, is actually just promise1. This is a shortcut operation because there is no reason to create a new instance of the same class of promise to represent the same fulfillment value. In the third part, MyPromise extends Promise to create a new class. The MyPromise.resolve() method creates an instance of MyPromise because the this value inside of MyPromise.resolve() determines the constructor to use when creating a new promise. Because promise3 was created with the Promise constructor, Promise.resolve() needs to create a new instance of Promise that resolves when promise3 is resolved.\n\nThe important thing to keep in mind that the Promise.resolve() method always returns a promise created with the this value inside. This ensures that for any given X.resolve() method, where X is a subclass of Promise, returns an instance of X.\n\nCreating the Pledge.resolve() method\n\nThe specification1 defines a simple, three-step process for the Promise.resolve() method:\n\n\n  Let C be the this value.\n  If Type(C) is not Object, throw a TypeError exception.\n  Return ? PromiseResolve(C, x).\n\n\nAs with many of the methods discussed in this blog post series, Promise.resolve() delegates much of the work to another operation called PromiseResolve()2, which I’ve implemented as pledgeResolve(). The actual code for Pledge.resolve() is therefore quite succinct:\n\nexport class Pledge {\n\n    // other methods omitted for space\n\n    static resolve(x) {\n\n        const C = this;\n\n        if (!isObject(C)) {\n            throw new TypeError(\"Cannot call resolve() without `this` value.\");\n        }\n\n        return pledgeResolve(C, x);\n    }\n\n    // other methods omitted for space\n}\n\n\nYou were introduced to the the pledgeResolve() function in the third post in the series, and I’ll show it here again for context:\n\nfunction pledgeResolve(C, x) {\n\n    assertIsObject(C);\n\n    if (isPledge(x)) {\n        const xConstructor = x.constructor;\n\n        if (Object.is(xConstructor, C)) {\n            return x;\n        }\n    }\n\n    const pledgeCapability = new PledgeCapability(C);\n    pledgeCapability.resolve(x);\n    return pledgeCapability.pledge;\n}\n\n\nWhen used in the finally() method, the C argument didn’t make a lot of sense, but here you can see that it’s important to ensure the correct constructor is used from Pledge.resolve(). So if x is an instance of Pledge, then you need to check to see if its constructor is also C, and if so, just return x. Otherwise, the PledgeCapability class is once again used to create an instance of the correct class, resolve it to x, and then return that instance.\n\nWith Promise.resolve() fully implemented as Pledge.resolve() in the Pledge library, it’s now time to move on to Pledge.reject().\n\nThe Promise.reject() method\n\nThe Promise.reject() method behaves similarly to Promise.resolve() in that you pass in a value and the method returns a promise that wraps that value. In the case of Promise.reject(), though, the promise is in a rejected state and the reason is the argument that was passed in. The biggest difference from Promise.resolve() is that there is no additional check to see if the reason is a promise that has the same constructor; Promise.reject() always creates and returns a new promise, so there is no reason to do such a check. Otherwise, Promise.reject() mimics the behavior of Promise.resolve(), including using the this value to determine the class to use when returning a new promise. Here are some examples:\n\n// non-promise value\nconst promise1 = Promise.reject(43);\nconsole.log(promise1.constructor === Promise);  // true\n\n// promise with the same constructor\nconst promise2 = Promise.reject(promise1);\nconsole.log(promise2.constructor === Promise);  // true\nconsole.log(promise2 === promise1);             // false\n\n// promise with a different constructor\nclass MyPromise extends Promise {}\n\nconst promise3 = MyPromise.reject(43);\nconst promise4 = Promise.reject(promise3);\nconsole.log(promise3.constructor === MyPromise); // true\nconsole.log(promise4.constructor === Promise);      // true\nconsole.log(promise3 === promise4);                 // false\n\n\nOnce again, Promise.reject() doesn’t do any inspection of the reason passed in and always returns a new promise, promise2 is not the same as promise1. And the promise returned from MyPromise.reject() is an instance of MyPromise rather than Promise, fulfilling the requirement that X.reject() always returns an instance of X.\n\nCreating the Pledge.reject() method\n\nAccording to the specification3, the following steps must be taken when Promise.reject() is called with an argument r:\n\n\n  Let C be the this value.\n  Let promiseCapability be ? NewPromiseCapability(C).\n  Perform ? Call(promiseCapability.[[Reject]], undefined, « r »).\n  Return promiseCapability.[[Promise]].\n\n\nFortunately, converting this algorithm into JavaScript is straightforward:\n\nexport class Pledge {\n\n    // other methods omitted for space\n\n    static reject(r) {\n        \n        const C = this;\n\n        const capability = new PledgeCapability(C);\n        capability.reject(r);\n        return capability.pledge;\n    }\n\n    // other methods omitted for space\n}\n\n\nThis method is similar to pledgeResolve() with the two notable exceptions: there is no check to see what type of value r and the capability.reject() method is called instead of capability.resolve(). All of the work is done inside of PledgeCapability, once again highlighting how important this part of the specification is to promises as a whole.\n\nWrapping Up\n\nThis post covered creating Promise.resolve() and Promise.reject() from scratch. These methods are important for converting from non-promise values into promises, which is used in a variety of ways in JavaScript. For example, the await operator calls PromiseResolve() to ensure its operand is a promise. So while these two methods are a lot simpler than the ones covered in my previous posts, they are equally as important to how promises work as a whole.\n\nAll of this code is available in the Pledge on GitHub. I hope you’ll download it and try it out to get a better understanding of promises.\n\nWant more posts in this series?\n\nSo far, I’ve covered the basic ways that promises work, but there’s still more to cover. If you are enjoying this series and would like to see it continue, please sponsor me on GitHub. For every five new sponsors I receive, I’ll release a new post. Here’s what I plan on covering:\n\n\n  Part 5: Promise.race() and Promise.any() (when I have 35 sponsors)\n  Part 6: Promise.all() and Promise.allSettled() (when I have 40 sponsors)\n  Part 7: Unhandled promise rejection tracking (when I have 45 sponsors)\n\n\nIt takes a significant amount of time to put together posts like these, and I appreciate your consideration in helping me continue to create quality content like this.\n\nReferences\n\n\n  \n    \n      Promise.resolve( x ) &#8617;\n    \n    \n      PromiseResolve( C, x ) &#8617;\n    \n    \n      Promise.reject( r ) &#8617;\n    \n  \n\n",
            "content_html": "<p>When you create a promise with the <code class=\"highlighter-rouge\">Promise</code> constructor, you’re creating an <em>unsettled promise</em>, meaning the promise state is pending until either the <code class=\"highlighter-rouge\">resolve</code> or <code class=\"highlighter-rouge\">reject</code> function is called inside the constructor. You can also created promises by using the <code class=\"highlighter-rouge\">Promise.resolve()</code> and <code class=\"highlighter-rouge\">Promise.reject()</code> methods, in which case, the promises might already be fulfilled or rejected as soon as they are created. These methods are helpful for wrapping known values in promises without going through the trouble of defining an executor function. However, <code class=\"highlighter-rouge\">Promise.resolve()</code> doesn’t directly map to <code class=\"highlighter-rouge\">resolve</code> inside an executor, and <code class=\"highlighter-rouge\">Promise.reject()</code> doesn’t directly map to <code class=\"highlighter-rouge\">reject</code> inside an executor.</p>\n\n<p>Note: This is the fourth post in my series about creating JavaScript promises from scratch. If you haven’t already read the <a href="https://humanwhocodes.com/feeds/\&quot;https://humanwhocodes.com/blog/2020/09/creating-javascript-promise-from-scratch-constructor/\&quot;">first post</a>, the <a href="https://humanwhocodes.com/feeds/\&quot;https://humanwhocodes.com/blog/2020/09/creating-javascript-promise-from-scratch-resolving-to-a-promise/\&quot;">second post</a>, and the <a href="https://humanwhocodes.com/feeds/\&quot;https://humanwhocodes.com/blog/2020/10/creating-javascript-promise-from-scratch-then-catch-finally/\&quot;">third post</a>, I would suggest you do so because this post builds on the topics covered in those posts.</p>\n\n<p>As a reminder, this series is based on my promise library, <a href="https://humanwhocodes.com/feeds/\&quot;https://github.com/humanwhocodes/pledge\&quot;">Pledge</a>. You can view and download all of the source code from GitHub.</p>\n\n<h2 id=\"the-promiseresolve-method\">The <code class=\"highlighter-rouge\">Promise.resolve()</code> method</h2>\n\n<p>The purpose of the <code class=\"highlighter-rouge\">Promise.resolve()</code> method is to return a promise that resolves to a given argument. However, there is some nuanced behavior around what it ends up returning:</p>\n\n<ol>\n  <li>If the argument isn’t a promise, a new fulfilled promise is returned where the fulfillment value is the argument.</li>\n  <li>If the argument is a promise and the promise’s constructor is different than the <code class=\"highlighter-rouge\">this</code> value inside of <code class=\"highlighter-rouge\">Promise.resolve()</code>, then a new promise is created using the <code class=\"highlighter-rouge\">this</code> value and that promise is set to resolve when the argument promise resolves.</li>\n  <li>If the argument is a promise and the promise’s constructor is the same as the <code class=\"highlighter-rouge\">this</code> value inside of <code class=\"highlighter-rouge\">Promise.resolve()</code>, then the argument promise is returned and no new promise is created.</li>\n</ol>\n\n<p>Here are some examples to illustrate these cases:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// non-promise value</span>\n<span class=\"kd\">const</span> <span class=\"nx\">promise1</span> <span class=\"o\">=</span> <span class=\"nb\">Promise</span><span class=\"p\">.</span><span class=\"nx\">resolve</span><span class=\"p\">(</span><span class=\"mi\">42</span><span class=\"p\">);</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">promise1</span><span class=\"p\">.</span><span class=\"kd\">constructor</span> <span class=\"o\">===</span> <span class=\"nb\">Promise</span><span class=\"p\">);</span>  <span class=\"c1\">// true</span>\n\n<span class=\"c1\">// promise with the same constructor</span>\n<span class=\"kd\">const</span> <span class=\"nx\">promise2</span> <span class=\"o\">=</span> <span class=\"nb\">Promise</span><span class=\"p\">.</span><span class=\"nx\">resolve</span><span class=\"p\">(</span><span class=\"nx\">promise1</span><span class=\"p\">);</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">promise2</span><span class=\"p\">.</span><span class=\"kd\">constructor</span> <span class=\"o\">===</span> <span class=\"nb\">Promise</span><span class=\"p\">);</span>  <span class=\"c1\">// true</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">promise2</span> <span class=\"o\">===</span> <span class=\"nx\">promise1</span><span class=\"p\">);</span>             <span class=\"c1\">// true</span>\n\n<span class=\"c1\">// promise with a different constructor</span>\n<span class=\"kd\">class</span> <span class=\"nx\">MyPromise</span> <span class=\"kd\">extends</span> <span class=\"nb\">Promise</span> <span class=\"p\">{}</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">promise3</span> <span class=\"o\">=</span> <span class=\"nx\">MyPromise</span><span class=\"p\">.</span><span class=\"nx\">resolve</span><span class=\"p\">(</span><span class=\"mi\">42</span><span class=\"p\">);</span>\n<span class=\"kd\">const</span> <span class=\"nx\">promise4</span> <span class=\"o\">=</span> <span class=\"nb\">Promise</span><span class=\"p\">.</span><span class=\"nx\">resolve</span><span class=\"p\">(</span><span class=\"nx\">promise3</span><span class=\"p\">);</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">promise3</span><span class=\"p\">.</span><span class=\"kd\">constructor</span> <span class=\"o\">===</span> <span class=\"nx\">MyPromise</span><span class=\"p\">);</span> <span class=\"c1\">// true</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">promise4</span><span class=\"p\">.</span><span class=\"kd\">constructor</span> <span class=\"o\">===</span> <span class=\"nb\">Promise</span><span class=\"p\">);</span>      <span class=\"c1\">// true</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">promise3</span> <span class=\"o\">===</span> <span class=\"nx\">promise4</span><span class=\"p\">);</span>                 <span class=\"c1\">// false</span>\n</code></pre></div></div>\n\n<p>In this code, passing <code class=\"highlighter-rouge\">42</code> to <code class=\"highlighter-rouge\">Promise.resolve()</code> results in a new fulfilled promise, <code class=\"highlighter-rouge\">promise1</code> that was created using the <code class=\"highlighter-rouge\">Promise</code> constructor. In the second part, <code class=\"highlighter-rouge\">promise1</code> is passed to <code class=\"highlighter-rouge\">Promise.resolve()</code> and the returned promise, <code class=\"highlighter-rouge\">promise2</code>, is actually just <code class=\"highlighter-rouge\">promise1</code>. This is a shortcut operation because there is no reason to create a new instance of the same class of promise to represent the same fulfillment value. In the third part, <code class=\"highlighter-rouge\">MyPromise</code> extends <code class=\"highlighter-rouge\">Promise</code> to create a new class. The <code class=\"highlighter-rouge\">MyPromise.resolve()</code> method creates an instance of <code class=\"highlighter-rouge\">MyPromise</code> because the <code class=\"highlighter-rouge\">this</code> value inside of <code class=\"highlighter-rouge\">MyPromise.resolve()</code> determines the constructor to use when creating a new promise. Because <code class=\"highlighter-rouge\">promise3</code> was created with the <code class=\"highlighter-rouge\">Promise</code> constructor, <code class=\"highlighter-rouge\">Promise.resolve()</code> needs to create a new instance of <code class=\"highlighter-rouge\">Promise</code> that resolves when <code class=\"highlighter-rouge\">promise3</code> is resolved.</p>\n\n<p>The important thing to keep in mind that the <code class=\"highlighter-rouge\">Promise.resolve()</code> method always returns a promise created with the <code class=\"highlighter-rouge\">this</code> value inside. This ensures that for any given <code class=\"highlighter-rouge\">X.resolve()</code> method, where <code class=\"highlighter-rouge\">X</code> is a subclass of <code class=\"highlighter-rouge\">Promise</code>, returns an instance of <code class=\"highlighter-rouge\">X</code>.</p>\n\n<h3 id=\"creating-the-pledgeresolve-method\">Creating the <code class=\"highlighter-rouge\">Pledge.resolve()</code> method</h3>\n\n<p>The specification<sup id=\"fnref:1\"><a href="https://humanwhocodes.com/feeds/\&quot;#fn:1\"" class=\"footnote\">1</a></sup> defines a simple, three-step process for the <code class=\"highlighter-rouge\">Promise.resolve()</code> method:</p>\n\n<ol>\n  <li>Let <code class=\"highlighter-rouge\">C</code> be the <code class=\"highlighter-rouge\">this</code> value.</li>\n  <li>If <code class=\"highlighter-rouge\">Type(C)</code> is not <code class=\"highlighter-rouge\">Object</code>, throw a <code class=\"highlighter-rouge\">TypeError</code> exception.</li>\n  <li>Return <code class=\"highlighter-rouge\">?</code> <code class=\"highlighter-rouge\">PromiseResolve(C, x)</code>.</li>\n</ol>\n\n<p>As with many of the methods discussed in this blog post series, <code class=\"highlighter-rouge\">Promise.resolve()</code> delegates much of the work to another operation called <code class=\"highlighter-rouge\">PromiseResolve()</code><sup id=\"fnref:2\"><a href="https://humanwhocodes.com/feeds/\&quot;#fn:2\"" class=\"footnote\">2</a></sup>, which I’ve implemented as <code class=\"highlighter-rouge\">pledgeResolve()</code>. The actual code for <code class=\"highlighter-rouge\">Pledge.resolve()</code> is therefore quite succinct:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">export</span> <span class=\"kd\">class</span> <span class=\"nx\">Pledge</span> <span class=\"p\">{</span>\n\n    <span class=\"c1\">// other methods omitted for space</span>\n\n    <span class=\"kd\">static</span> <span class=\"nx\">resolve</span><span class=\"p\">(</span><span class=\"nx\">x</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\n        <span class=\"kd\">const</span> <span class=\"nx\">C</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">;</span>\n\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"nx\">isObject</span><span class=\"p\">(</span><span class=\"nx\">C</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n            <span class=\"k\">throw</span> <span class=\"k\">new</span> <span class=\"nx\">TypeError</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">Cannot call resolve() without `this` value.</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"k\">return</span> <span class=\"nx\">pledgeResolve</span><span class=\"p\">(</span><span class=\"nx\">C</span><span class=\"p\">,</span> <span class=\"nx\">x</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"c1\">// other methods omitted for space</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>You were introduced to the the <code class=\"highlighter-rouge\">pledgeResolve()</code> function in the third post in the series, and I’ll show it here again for context:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">function</span> <span class=\"nx\">pledgeResolve</span><span class=\"p\">(</span><span class=\"nx\">C</span><span class=\"p\">,</span> <span class=\"nx\">x</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\n    <span class=\"nx\">assertIsObject</span><span class=\"p\">(</span><span class=\"nx\">C</span><span class=\"p\">);</span>\n\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">isPledge</span><span class=\"p\">(</span><span class=\"nx\">x</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n        <span class=\"kd\">const</span> <span class=\"nx\">xConstructor</span> <span class=\"o\">=</span> <span class=\"nx\">x</span><span class=\"p\">.</span><span class=\"kd\">constructor</span><span class=\"p\">;</span>\n\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nb\">Object</span><span class=\"p\">.</span><span class=\"nx\">is</span><span class=\"p\">(</span><span class=\"nx\">xConstructor</span><span class=\"p\">,</span> <span class=\"nx\">C</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n            <span class=\"k\">return</span> <span class=\"nx\">x</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"kd\">const</span> <span class=\"nx\">pledgeCapability</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">PledgeCapability</span><span class=\"p\">(</span><span class=\"nx\">C</span><span class=\"p\">);</span>\n    <span class=\"nx\">pledgeCapability</span><span class=\"p\">.</span><span class=\"nx\">resolve</span><span class=\"p\">(</span><span class=\"nx\">x</span><span class=\"p\">);</span>\n    <span class=\"k\">return</span> <span class=\"nx\">pledgeCapability</span><span class=\"p\">.</span><span class=\"nx\">pledge</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>When used in the <code class=\"highlighter-rouge\">finally()</code> method, the <code class=\"highlighter-rouge\">C</code> argument didn’t make a lot of sense, but here you can see that it’s important to ensure the correct constructor is used from <code class=\"highlighter-rouge\">Pledge.resolve()</code>. So if <code class=\"highlighter-rouge\">x</code> is an instance of <code class=\"highlighter-rouge\">Pledge</code>, then you need to check to see if its constructor is also <code class=\"highlighter-rouge\">C</code>, and if so, just return <code class=\"highlighter-rouge\">x</code>. Otherwise, the <code class=\"highlighter-rouge\">PledgeCapability</code> class is once again used to create an instance of the correct class, resolve it to <code class=\"highlighter-rouge\">x</code>, and then return that instance.</p>\n\n<p>With <code class=\"highlighter-rouge\">Promise.resolve()</code> fully implemented as <code class=\"highlighter-rouge\">Pledge.resolve()</code> in the Pledge library, it’s now time to move on to <code class=\"highlighter-rouge\">Pledge.reject()</code>.</p>\n\n<h2 id=\"the-promisereject-method\">The <code class=\"highlighter-rouge\">Promise.reject()</code> method</h2>\n\n<p>The <code class=\"highlighter-rouge\">Promise.reject()</code> method behaves similarly to <code class=\"highlighter-rouge\">Promise.resolve()</code> in that you pass in a value and the method returns a promise that wraps that value. In the case of <code class=\"highlighter-rouge\">Promise.reject()</code>, though, the promise is in a rejected state and the reason is the argument that was passed in. The biggest difference from <code class=\"highlighter-rouge\">Promise.resolve()</code> is that there is no additional check to see if the reason is a promise that has the same constructor; <code class=\"highlighter-rouge\">Promise.reject()</code> always creates and returns a new promise, so there is no reason to do such a check. Otherwise, <code class=\"highlighter-rouge\">Promise.reject()</code> mimics the behavior of <code class=\"highlighter-rouge\">Promise.resolve()</code>, including using the <code class=\"highlighter-rouge\">this</code> value to determine the class to use when returning a new promise. Here are some examples:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// non-promise value</span>\n<span class=\"kd\">const</span> <span class=\"nx\">promise1</span> <span class=\"o\">=</span> <span class=\"nb\">Promise</span><span class=\"p\">.</span><span class=\"nx\">reject</span><span class=\"p\">(</span><span class=\"mi\">43</span><span class=\"p\">);</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">promise1</span><span class=\"p\">.</span><span class=\"kd\">constructor</span> <span class=\"o\">===</span> <span class=\"nb\">Promise</span><span class=\"p\">);</span>  <span class=\"c1\">// true</span>\n\n<span class=\"c1\">// promise with the same constructor</span>\n<span class=\"kd\">const</span> <span class=\"nx\">promise2</span> <span class=\"o\">=</span> <span class=\"nb\">Promise</span><span class=\"p\">.</span><span class=\"nx\">reject</span><span class=\"p\">(</span><span class=\"nx\">promise1</span><span class=\"p\">);</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">promise2</span><span class=\"p\">.</span><span class=\"kd\">constructor</span> <span class=\"o\">===</span> <span class=\"nb\">Promise</span><span class=\"p\">);</span>  <span class=\"c1\">// true</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">promise2</span> <span class=\"o\">===</span> <span class=\"nx\">promise1</span><span class=\"p\">);</span>             <span class=\"c1\">// false</span>\n\n<span class=\"c1\">// promise with a different constructor</span>\n<span class=\"kd\">class</span> <span class=\"nx\">MyPromise</span> <span class=\"kd\">extends</span> <span class=\"nb\">Promise</span> <span class=\"p\">{}</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">promise3</span> <span class=\"o\">=</span> <span class=\"nx\">MyPromise</span><span class=\"p\">.</span><span class=\"nx\">reject</span><span class=\"p\">(</span><span class=\"mi\">43</span><span class=\"p\">);</span>\n<span class=\"kd\">const</span> <span class=\"nx\">promise4</span> <span class=\"o\">=</span> <span class=\"nb\">Promise</span><span class=\"p\">.</span><span class=\"nx\">reject</span><span class=\"p\">(</span><span class=\"nx\">promise3</span><span class=\"p\">);</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">promise3</span><span class=\"p\">.</span><span class=\"kd\">constructor</span> <span class=\"o\">===</span> <span class=\"nx\">MyPromise</span><span class=\"p\">);</span> <span class=\"c1\">// true</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">promise4</span><span class=\"p\">.</span><span class=\"kd\">constructor</span> <span class=\"o\">===</span> <span class=\"nb\">Promise</span><span class=\"p\">);</span>      <span class=\"c1\">// true</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">promise3</span> <span class=\"o\">===</span> <span class=\"nx\">promise4</span><span class=\"p\">);</span>                 <span class=\"c1\">// false</span>\n</code></pre></div></div>\n\n<p>Once again, <code class=\"highlighter-rouge\">Promise.reject()</code> doesn’t do any inspection of the reason passed in and always returns a new promise, <code class=\"highlighter-rouge\">promise2</code> is not the same as <code class=\"highlighter-rouge\">promise1</code>. And the promise returned from <code class=\"highlighter-rouge\">MyPromise.reject()</code> is an instance of <code class=\"highlighter-rouge\">MyPromise</code> rather than <code class=\"highlighter-rouge\">Promise</code>, fulfilling the requirement that <code class=\"highlighter-rouge\">X.reject()</code> always returns an instance of <code class=\"highlighter-rouge\">X</code>.</p>\n\n<h3 id=\"creating-the-pledgereject-method\">Creating the <code class=\"highlighter-rouge\">Pledge.reject()</code> method</h3>\n\n<p>According to the specification<sup id=\"fnref:3\"><a href="https://humanwhocodes.com/feeds/\&quot;#fn:3\"" class=\"footnote\">3</a></sup>, the following steps must be taken when <code class=\"highlighter-rouge\">Promise.reject()</code> is called with an argument <code class=\"highlighter-rouge\">r</code>:</p>\n\n<ol>\n  <li>Let <code class=\"highlighter-rouge\">C</code> be the <code class=\"highlighter-rouge\">this</code> value.</li>\n  <li>Let <code class=\"highlighter-rouge\">promiseCapability</code> be <code class=\"highlighter-rouge\">?</code> <code class=\"highlighter-rouge\">NewPromiseCapability(C)</code>.</li>\n  <li>Perform <code class=\"highlighter-rouge\">?</code> <code class=\"highlighter-rouge\">Call(promiseCapability.[[Reject]], undefined, « r »)</code>.</li>\n  <li>Return <code class=\"highlighter-rouge\">promiseCapability.[[Promise]]</code>.</li>\n</ol>\n\n<p>Fortunately, converting this algorithm into JavaScript is straightforward:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">export</span> <span class=\"kd\">class</span> <span class=\"nx\">Pledge</span> <span class=\"p\">{</span>\n\n    <span class=\"c1\">// other methods omitted for space</span>\n\n    <span class=\"kd\">static</span> <span class=\"nx\">reject</span><span class=\"p\">(</span><span class=\"nx\">r</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        \n        <span class=\"kd\">const</span> <span class=\"nx\">C</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">;</span>\n\n        <span class=\"kd\">const</span> <span class=\"nx\">capability</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">PledgeCapability</span><span class=\"p\">(</span><span class=\"nx\">C</span><span class=\"p\">);</span>\n        <span class=\"nx\">capability</span><span class=\"p\">.</span><span class=\"nx\">reject</span><span class=\"p\">(</span><span class=\"nx\">r</span><span class=\"p\">);</span>\n        <span class=\"k\">return</span> <span class=\"nx\">capability</span><span class=\"p\">.</span><span class=\"nx\">pledge</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"c1\">// other methods omitted for space</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>This method is similar to <code class=\"highlighter-rouge\">pledgeResolve()</code> with the two notable exceptions: there is no check to see what type of value <code class=\"highlighter-rouge\">r</code> and the <code class=\"highlighter-rouge\">capability.reject()</code> method is called instead of <code class=\"highlighter-rouge\">capability.resolve()</code>. All of the work is done inside of <code class=\"highlighter-rouge\">PledgeCapability</code>, once again highlighting how important this part of the specification is to promises as a whole.</p>\n\n<h2 id=\"wrapping-up\">Wrapping Up</h2>\n\n<p>This post covered creating <code class=\"highlighter-rouge\">Promise.resolve()</code> and <code class=\"highlighter-rouge\">Promise.reject()</code> from scratch. These methods are important for converting from non-promise values into promises, which is used in a variety of ways in JavaScript. For example, the <code class=\"highlighter-rouge\">await</code> operator calls <code class=\"highlighter-rouge\">PromiseResolve()</code> to ensure its operand is a promise. So while these two methods are a lot simpler than the ones covered in my previous posts, they are equally as important to how promises work as a whole.</p>\n\n<p>All of this code is available in the <a href="https://humanwhocodes.com/feeds/\&quot;https://github.com/humanwhocodes/pledge\&quot;">Pledge</a> on GitHub. I hope you’ll download it and try it out to get a better understanding of promises.</p>\n\n<h2 id=\"want-more-posts-in-this-series\">Want more posts in this series?</h2>\n\n<p>So far, I’ve covered the basic ways that promises work, but there’s still more to cover. If you are enjoying this series and would like to see it continue, please <a href="https://humanwhocodes.com/feeds/\&quot;https://github.com/sponsors/nzakas\&quot;">sponsor me</a> on GitHub. For every five new sponsors I receive, I’ll release a new post. Here’s what I plan on covering:</p>\n\n<ul>\n  <li>Part 5: <code class=\"highlighter-rouge\">Promise.race()</code> and <code class=\"highlighter-rouge\">Promise.any()</code> (when I have 35 sponsors)</li>\n  <li>Part 6: <code class=\"highlighter-rouge\">Promise.all()</code> and <code class=\"highlighter-rouge\">Promise.allSettled()</code> (when I have 40 sponsors)</li>\n  <li>Part 7: Unhandled promise rejection tracking (when I have 45 sponsors)</li>\n</ul>\n\n<p>It takes a significant amount of time to put together posts like these, and I appreciate your consideration in helping me continue to create quality content like this.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n  <ol>\n    <li id=\"fn:1\">\n      <p><a href="https://humanwhocodes.com/feeds/\&quot;https://www.ecma-international.org/ecma-262/#sec-promise.resolve\"">Promise.resolve( x )</a> <a href="https://humanwhocodes.com/feeds/\&quot;#fnref:1\"" class=\"reversefootnote\">&#8617;</a></p>\n    </li>\n    <li id=\"fn:2\">\n      <p><a href="https://humanwhocodes.com/feeds/\&quot;https://www.ecma-international.org/ecma-262/#sec-promise-resolve\"">PromiseResolve( C, x )</a> <a href="https://humanwhocodes.com/feeds/\&quot;#fnref:2\"" class=\"reversefootnote\">&#8617;</a></p>\n    </li>\n    <li id=\"fn:3\">\n      <p><a href="https://humanwhocodes.com/feeds/\&quot;https://www.ecma-international.org/ecma-262/11.0/index.html#sec-promise.reject\"">Promise.reject( r )</a> <a href="https://humanwhocodes.com/feeds/\&quot;#fnref:3\"" class=\"reversefootnote\">&#8617;</a></p>\n    </li>\n  </ol>\n</div>\n",
            "url": "https://humanwhocodes.com/blog/2020/10/creating-javascript-promise-from-scratch-promise-resolve-reject/",
            
            
            
            "tags": ["JavaScript","Promises","ECMAScript 6"],
            
            "date_published": "2020-10-13T00:00:00+00:00",
            "date_modified": "2020-10-13T00:00:00+00:00",
            
                "author": 
                ""
                
            
        },
    
        {
            "id": "https://humanwhocodes.com/blog/2020/10/creating-javascript-promise-from-scratch-then-catch-finally/",
            "title": "Creating a JavaScript promise from scratch, Part 3: then(), catch(), and finally()",
            "summary": "In my first post of this series, I explained how the Promise constructor works by recreating it as the Pledge constructor. In the second post in this series, I explained how asynchronous operations work in promises through jobs. If you haven’t already read those two posts, I’d suggest doing so before continuing on with this one.",
            "content_text": "In my first post of this series, I explained how the Promise constructor works by recreating it as the Pledge constructor. In the second post in this series, I explained how asynchronous operations work in promises through jobs. If you haven’t already read those two posts, I’d suggest doing so before continuing on with this one.\n\nThis post focuses on implementing then(), catch(), and finally() according to ECMA-262. This functionality is surprisingly involved and relies on a lot of helper classes and utilities to get things working correctly. However, once you master a few basic concepts, the implementations are relatively straightforward.\n\nAs a reminder, this series is based on my promise library, Pledge. You can view and download all of the source code from GitHub.\n\nThe then() method\n\nThe then() method on promises accepts two arguments: a fulfillment handler and a rejection handler. The term handler is used to describe a function that is called in reaction to a change in the internal state of a promise, so a fulfillment handler is called when a promise is fulfilled and a rejection handler is called when a promise is rejected. Each of the two arguments may be set as undefined to allow you to set one or the other without requiring both.\n\nThe steps taken when then() is called depends on the state of the promise:\n\n\n  If the promise’s state is pending (the promise is unsettled), then() simply stores the handlers to be called later.\n  If the promise’s state is fulfilled, then() immediately queues a job to execute the fulfillment handler.\n  If the promise’s state is rejected, then() immediately queues a job to execute the rejection handler.\n\n\nAdditionally, regardless of the promise state, then() always returns another promise, which is why you can chain promises together like this:\n\nconst promise = new Promise((resolve, reject) =&gt; {\n    resolve(42);\n});\n\npromise.then(value1 =&gt; {\n    console.log(value1);\n    return value1 + 1;\n}).then(value2 =&gt; {\n    console.log(value2);\n});\n\n\nIn this example, promise.then() adds a fulfillment handler that outputs the resolution value and then returns another number based on that value. The second then() call is actually on a second promise that is resolved using the return value from the preceding fulfillment handler. It’s this behavior that makes implementing then() one of the more complicated aspects of promises, and that’s why there are a small group of helper classes necessary to implement the functionality properly.\n\nThe PromiseCapability record\n\nThe specification defines a PromiseCapability record1 as having the following internal-only properties:\n\n\n  \n    \n      Field Name\n      Value\n      Meaning\n    \n  \n  \n    \n      [[Promise]]\n      An object\n      An object that is usable as a promise.\n    \n    \n      [[Resolve]]\n      A function object\n      The function that is used to resolve the given promise object.\n    \n    \n      [[Reject]]\n      A function object\n      The function that is used to reject the given promise object.\n    \n  \n\n\nEffectively, a PromiseCapability record consists of a promise object and the resolve and reject functions that change its internal state. You can think of this as a helper object that allows easier access to changing a promise’s state.\n\nAlong with the definition of the PromiseCapability record, there is also the definition of a NewPromiseCapability() function2 that outlines the steps you must take in order to create a new PromiseCapability record. The NewPromiseCapability() function is passed a single argument, C, that is a function assumed to be a constructor that accepts an executor function. Here’s a simplified list of steps:\n\n\n  If C isn’t a constructor, throw an error.\n  Create a new PromiseCapability record with all internal properties set to undefined.\n  Create an executor function to pass to C.\n  Store a reference to the PromiseCapability on the executor.\n  Create a new promise using the executor and extract it resolve and reject functions.\n  Store the resolve and reject functions on the PromiseCapability.\n  If resolve isn’t a function, throw an error.\n  If reject isn’t a function, throw an error.\n  Store the promise on the PromiseCapability.\n  Return the PromiseCapability\n\n\nI decided to use a PledgeCapability class to implement both PromiseCapability and NewPromiseCapability(), making it more idiomatic to JavaScript. Here’s the code:\n\nexport class PledgeCapability {\n\n    constructor(C) {\n\n        const executor = (resolve, reject) =&gt; {\n            this.resolve = resolve;\n            this.reject = reject;\n        };\n\n        // not used but included for completeness with spec\n        executor.capability = this;\n\n        this.pledge = new C(executor);\n\n        if (!isCallable(this.resolve)) {\n            throw new TypeError(\"resolve is not callable.\");\n        }\n\n        if (!isCallable(this.reject)) {\n            throw new TypeError(\"reject is not callable.\");\n        }\n    }\n}\n\n\nThe most interesting part of the constructor, and the part that took me the longest to understand, is that the executor function is used simply to grab references to the resolve and reject functions that are passed in. This is necessary because you don’t know what C is. If C was always Promise, then you could use createResolvingFunctions() to create resolve and reject. However, C could be a subclass of Promise that changes how resolve and reject are created, so you need to grab the actual functions that are passed in.\n\nA note about the design of this class: I opted to use string property names instead of going through the trouble of creating symbol property names to represent that these properties are meant to be internal-only. However, because this class isn’t exposed as part of the API, there is no risk of anyone accidentally referencing those properties from outside of the library. Given that, I decided to favor the readability of string property names over the more technically correct symbol property names.\n\nThe PledgeCapability class is used like this:\n\nconst capability = new PledgeCapability(Pledge);\n\ncapability.resolve(42);\ncapability.pledge.then(value =&gt; {\n    console.log(value);\n});\n\n\nIn this example, the Pledge constructor is passed to PledgeCapability to create a new instance of Pledge and extract its resolve and reject functions. This turns out to be important because you don’t know the class to use when creating the return value for then() until runtime.\n\nUsing Symbol.species\n\nThe well-known symbol Symbol.species isn’t well understood by JavaScript developers but is important to understand in the context of promises. Whenever a method on an object must return an instance of the same class, the specification defines a static Symbol.species getter on the class. This is true for many JavaScript classes including arrays, where methods like slice() and concat() return arrays, and it’s also true for promises, where methods like then() and catch() return another promise. This is important because if you subclass Promise, you probably want then() to return an instance of your subclass and not an instance of Promise.\n\nThe specification defines the default value for Symbol.species to be this for all built-in classes, so the Pledge class implements this property as follows:\n\nexport class Pledge {\n\n    // constructor omitted for space\n\n    static get [Symbol.species]() {\n        return this;\n    }\n\n    // other methods omitted for space\n}\n\n\nKeep in mind that because the Symbol.species getter is static, this is actually a reference to Pledge (you can try it for yourself accessing Pledge[Symbol.species]). However, because this is evaluated at runtime, it would have a different value for a subclass, such as this:\n\nclass SuperPledge extends Pledge {\n    // empty\n}\n\n\nUsing this code, SuperPledge[Symbol.species] evaluates to SuperPledge. Because this is evaluated at runtime, it automatically references the class constructor that is in use. That’s exactly why the specification defines Symbol.species this way: it’s a convenience for developers as using the same constructor for method return values is the common case.\n\nNow that you have a good understanding of Symbol.species, it’s time to move on implementing then().\n\nImplementing the then() method\n\nThe then() method itself is fairly short because it delegates most of the work to a function called PerformPromiseThen(). Here’s how the specification defines then()3:\n\n\n  Let promise be the this value.\n  If IsPromise(promise) is false, throw a TypeError exception.\n  Let C be ? SpeciesConstructor(promise, %Promise%).\n  Let resultCapability be ? NewPromiseCapability(C).\n  Return PerformPromiseThen(promise, onFulfilled, onRejected, resultCapability).\n\n\nAnd here’s how I coded up that algorithm:\n\nexport class Pledge {\n\n    // constructor omitted for space\n\n    static get [Symbol.species]() {\n        return this;\n    }\n\n    then(onFulfilled, onRejected) {\n\n        assertIsPledge(this);\n\n        const C = this.constructor[Symbol.species];\n        const resultCapability = new PledgeCapability(C);\n        return performPledgeThen(this, onFulfilled, onRejected, resultCapability);\n    }\n\n    // other methods omitted for space\n}\n\n\nThe first thing to note is that I didn’t define a variable to store this as the algorithm specifies. That’s because it’s redundant in JavaScript when you can access this directly. After that, the rest of the method is a direct translation into JavaScript. The species constructor is stored in C and a new PledgeCapability is created from that. Then, all of the information is passed to performPledgeThen() to do the real work.\n\nThe performPledgeThen() function is one of the longer functions in the Pledge library and implements the algorithm for PerformPromiseThen() in the specification. The algorithm is a little difficult to understand, but it begins with these steps:\n\n\n  Assert that the first argument is a promise.\n  If either onFulfilled or onRejected aren’t functions, set them to undefined.\n  Create PromiseReaction records for each of onFulfilled and onRejected.\n\n\nHere’s what that code looks like in the Pledge library:\n\nfunction performPledgeThen(pledge, onFulfilled, onRejected, resultCapability) {\n    \n    assertIsPledge(pledge);\n\n    if (!isCallable(onFulfilled)) {\n        onFulfilled = undefined;\n    }\n\n    if (!isCallable(onRejected)) {\n        onRejected = undefined;\n    }\n\n    const fulfillReaction = new PledgeReaction(resultCapability, \"fulfill\", onFulfilled);\n    const rejectReaction = new PledgeReaction(resultCapability, \"reject\", onRejected);\n\n    // more code to come\n\n}\n\n\nThe fulfillReaction and rejectReaction objects are always created event when onFulfilled and onRejected are undefined. These objects store all of the information necessary to execute a handler. (Keep in mind that only one of these reactions will ever be used. Either the pledge is fulfilled so fulfillReaction is used or the pledge is rejected so rejectReaction is used. That’s why it’s safe to pass the same resultCapability to both even though it contains only one instance of Pledge.)\n\nThe PledgeReaction class is the JavaScript equivalent of the PromiseReaction record in the specification and is declared like this:\n\nclass PledgeReaction {\n    constructor(capability, type, handler) {\n        this.capability = capability;\n        this.type = type;\n        this.handler = handler;\n    }\n}\n\n\nThe next steps in PerformPromiseThen() are all based on the state of the promise:\n\n\n  If the state is pending, then store the reactions for later.\n  If the state is fulfilled, then queue a job to execute fulfillReaction.\n  If the state is rejected, then queue a job to execute rejectReaction.\n\n\nAnd after that, there are two more steps:\n\n\n  Mark the promise as being handled (for unhandled rejection tracking, discussed in an upcoming post).\n  Return the promise from the resultCapability, or return undefined if resultCapability is undefined.\n\n\nHere’s the finished performPledgeThen() that implements these steps:\n\nfunction performPledgeThen(pledge, onFulfilled, onRejected, resultCapability) {\n\n    assertIsPledge(pledge);\n\n    if (!isCallable(onFulfilled)) {\n        onFulfilled = undefined;\n    }\n\n    if (!isCallable(onRejected)) {\n        onRejected = undefined;\n    }\n\n    const fulfillReaction = new PledgeFulfillReaction(resultCapability, onFulfilled);\n    const rejectReaction = new PledgeRejectReaction(resultCapability, onRejected);\n\n    switch (pledge[PledgeSymbol.state]) {\n\n        case \"pending\":\n            pledge[PledgeSymbol.fulfillReactions].push(fulfillReaction);\n            pledge[PledgeSymbol.rejectReactions].push(rejectReaction);\n            break;\n\n        case \"fulfilled\": \n            {\n                const value = pledge[PledgeSymbol.result];\n                const fulfillJob = new PledgeReactionJob(fulfillReaction, value);\n                hostEnqueuePledgeJob(fulfillJob);\n            }\n            break;\n\n        case \"rejected\":\n            {\n                const reason = pledge[PledgeSymbol.result];\n                const rejectJob = new PledgeReactionJob(rejectReaction, reason);\n\n                // TODO: if [[isHandled]] if false\n                \n                hostEnqueuePledgeJob(rejectJob);\n            }\n            break;\n\n        default:\n            throw new TypeError(`Invalid pledge state: ${pledge[PledgeSymbol.state]}.`);\n    }\n\n    pledge[PledgeSymbol.isHandled] = true;\n\n    return resultCapability ? resultCapability.pledge : undefined;\n}\n\n\nIn this code, the PledgeSymbol.fulfillReactions and PledgeSymbol.rejectReactions are finally used for something. If the state is pending, the reactions are stored for later so they can be triggered when the state changes (this is discussed later in this post). If the state is either fulfilled or rejected then a PledgeReactionJob is created to run the reaction. The PledgeReactionJob maps to NewPromiseReactionJob()4 in the specification and is declared like this:\n\nexport class PledgeReactionJob {\n    constructor(reaction, argument) {\n        return () =&gt; {\n            const { capability: pledgeCapability, type, handler } = reaction;\n            let handlerResult;\n\n            if (typeof handler === \"undefined\") {\n\n                if (type === \"fulfill\") {\n                    handlerResult = new NormalCompletion(argument);\n                } else {\n                    handlerResult = new ThrowCompletion(argument);\n                }\n            } else {\n                try {\n                    handlerResult = new NormalCompletion(handler(argument));\n                } catch (error) {\n                    handlerResult = new ThrowCompletion(error);\n                }\n            }\n\n            if (typeof pledgeCapability === \"undefined\") {\n                if (handlerResult instanceof ThrowCompletion) {\n                    throw handlerResult.value;\n                }\n\n                // Return NormalCompletion(empty)\n                return;\n            }\n\n            if (handlerResult instanceof ThrowCompletion) {\n                pledgeCapability.reject(handlerResult.value);\n            } else {\n                pledgeCapability.resolve(handlerResult.value);\n            }\n\n            // Return NormalCompletion(status)\n        };\n    }\n}\n\n\nThis code begins by extracting all of the information from the reaction that was passed in. The function is a little bit long because both capability and handler can be undefined, so there are fallback behaviors in each of those cases.\n\nThe PledgeReactionJob class also uses the concept of a completion record5. In most of the code, I was able to avoid needing to reference completion records directly, but in this code it was necessary to better match the algorithm in the specification. A completion record is nothing more than a record of how an operation’s control flow concluded. There are four completion types:\n\n\n  normal - when an operation succeeds without any change in control flow (the return statement or exiting at the end of a function)\n  break - when an operation exits completely (the break statement)\n  continue - when an operation exits and then restarts (the continue statement)\n  throw - when an operation results in an error (the throw statement)\n\n\nThese completion records tell the JavaScript engine how (or whether) to continue running code. For creating PledgeReactionJob, I only needed normal and throw completions, so I declared them as follows:\n\nexport class Completion {\n    constructor(type, value, target) {\n        this.type = type;\n        this.value = value;\n        this.target = target;\n    }\n}\nexport class NormalCompletion extends Completion {\n    constructor(argument) {\n        super(\"normal\", argument);\n    }\n}\n\nexport class ThrowCompletion extends Completion {\n    constructor(argument) {\n        super(\"throw\", argument);\n    }\n}\n\n\nEssentially, NormalCompletion tells the function to exit as normal (if there is no pledgeCapability) or resolve a pledge (if pledgeCapability is defined) and ThrowCompletion tells the function to either throw an error (if there is no pledgeCapability) or reject a pledge (if pledgeCapability is defined). Within the Pledge library, pledgeCapability will always be defined, but I wanted to match the original algorithm from the specification for completeness.\n\nHaving covered PledgeReactionJob means that the pledgePerformThen() function is complete and all handlers will be properly stored (if the pledge state is pending) or executed immediately (if the pledge state is fulfilled or rejected). The last step is to execute any save reactions when the pledge state changes from pending to either fulfilled or rejected.\n\nTriggering stored reactions\n\nWhen a promise transitions from unsettled to settled, it triggers the stored reactions to execute (fulfill reactions if the promise is fulfilled and reject reactions when the promise is rejected). The specification defines this operation as TriggerPromiseReaction()6, and it’s one of the easier algorithms to implement. The entire algorithm is basically iterating over a list (array in JavaScript) of reactions and then creating and queueing a new PromiseReactionJob for each one. Here’s how I implemented it as triggerPledgeReactions():\n\nexport function triggerPledgeReactions(reactions, argument) {\n\n    for (const reaction of reactions) {\n        const job = new PledgeReactionJob(reaction, argument);\n        hostEnqueuePledgeJob(job);\n    }\n\n}\n\n\nThe most important part is to pass in the correct reactions argument, which is why this is function is called in two places: fulfillPledge() and rejectPledge() (discussed in part 1 of this series). For both functions, triggering reactions is the last step. Here’s the code for that:\n\nexport function fulfillPledge(pledge, value) {\n\n    if (pledge[PledgeSymbol.state] !== \"pending\") {\n        throw new Error(\"Pledge is already settled.\");\n    }\n\n    const reactions = pledge[PledgeSymbol.fulfillReactions];\n\n    pledge[PledgeSymbol.result] = value;\n    pledge[PledgeSymbol.fulfillReactions] = undefined;\n    pledge[PledgeSymbol.rejectReactions] = undefined;\n    pledge[PledgeSymbol.state] = \"fulfilled\";\n\n    return triggerPledgeReactions(reactions, value);\n}\n\nexport function rejectPledge(pledge, reason) {\n\n    if (pledge[PledgeSymbol.state] !== \"pending\") {\n        throw new Error(\"Pledge is already settled.\");\n    }\n\n    const reactions = pledge[PledgeSymbol.rejectReactions];\n\n    pledge[PledgeSymbol.result] = reason;\n    pledge[PledgeSymbol.fulfillReactions] = undefined;\n    pledge[PledgeSymbol.rejectReactions] = undefined;\n    pledge[PledgeSymbol.state] = \"rejected\";\n\n    // global rejection tracking\n    if (!pledge[PledgeSymbol.isHandled]) {\n        // TODO: perform HostPromiseRejectionTracker(promise, \"reject\").\n    }\n\n    return triggerPledgeReactions(reactions, reason);\n}\n\n\nAfter this addition, Pledge objects will properly trigger stored fulfillment and rejection handlers whenever the handlers are added prior to the pledge resolving. Note that both fulfillPledge() and rejectPledge() remove all reactions from the Pledge object in the process of changing the object’s state and triggering the reactions.\n\nThe catch() method\n\nIf you always wondered if the catch() method was just a shorthand for then(), then you are correct. All catch() does is call then() with an undefined first argument and the onRejected handler as the second argument:\n\nexport class Pledge {\n\n    // constructor omitted for space\n\n    static get [Symbol.species]() {\n        return this;\n    }\n\n    then(onFulfilled, onRejected) {\n\n        assertIsPledge(this);\n\n        const C = this.constructor[Symbol.species];\n        const resultCapability = new PledgeCapability(C);\n        return performPledgeThen(this, onFulfilled, onRejected, resultCapability);\n    }\n\n    catch(onRejected) {\n        return this.then(undefined, onRejected);\n    }\n\n    // other methods omitted for space\n}\n\n\nSo yes, catch() is really just a convenience method. The finally() method, however, is more involved.\n\nThe finally() method\n\nThe finally() method was a late addition to the promises specification and works a bit differently than then() and catch(). Whereas both then() and catch() allow you to add handlers that will receive a value when the promise is settled, a handler added with finally() does not receive a value. Instead, the promise returned from the call to finally() is settled in the same as the first promise. For example, if a given promise is fulfilled, then the promise returned from finally() is fulfilled with the same value:\n\nconst promise = Promise.resolve(42);\n\npromise.finally(() =&gt; {\n    console.log(\"Original promise is settled.\");\n}).then(value =&gt; {\n    console.log(value);     // 42\n});\n\n\nThis example shows that calling finally() on a promise that is resolved to 42 will result in a promise that is also resolved to 42. These are two different promises but they are resolved to the same value.\n\nSimilarly, if a promise is rejected, the the promise returned from finally() will also be rejected, as in this example:\n\nconst promise = Promise.reject(\"Oops!\");\n\npromise.finally(() =&gt; {\n    console.log(\"Original promise is settled.\");\n}).catch(reason =&gt; {\n    console.log(reason);     // \"Oops!\"\n});\n\n\nHere, promise is rejected with a reason of \"Oops!\". The handler assigned with finally() will execute first, outputting a message to the console, and the promise returned from finally() is rejected to the same reason as promise. This ability to pass on promise rejections through finally() means that adding a finally() handler does not count as handling a promise rejection. (If a rejected promise only has a finally() handler then the JavaScript runtime will still output a message about an unhandled promise rejection. You still need to add a rejection handler with then() or catch() to avoid that message.)\n\nWith a good understanding of finally() works, it’s time to implement it.\n\nImplementing the finally() method\n\nThe first few steps of finally()7 are the same as with then(), which is to assert that this is a promise and to retrieve the species constructor:\n\nexport class Pledge {\n\n    // constructor omitted for space\n\n    static get [Symbol.species]() {\n        return this;\n    }\n\n    finally(onFinally) {\n\n        assertIsPledge(this);\n\n        const C = this.constructor[Symbol.species];\n\n        // TODO\n    }\n\n    // other methods omitted for space\n}\n\n\nAfter that, the specification defines two variables, thenFinally and catchFinally, which are the fulfillment and rejection handlers that will be passed to then(). Just like catch(), finally() eventually calls the then() method directly. The only question is what values will be passed. For instance, if the onFinally argument isn’t callable, then thenFinally and catchFinally are set equal to onFinally and no other work needs to be done:\n\nexport class Pledge {\n\n    // constructor omitted for space\n\n    static get [Symbol.species]() {\n        return this;\n    }\n\n    finally(onFinally) {\n\n        assertIsPledge(this);\n\n        const C = this.constructor[Symbol.species];\n\n        let thenFinally, catchFinally;\n\n        if (!isCallable(onFinally)) {\n            thenFinally = onFinally;\n            catchFinally = onFinally;\n        } else {\n\n            // TODO\n\n        }\n\n        return this.then(thenFinally, catchFinally);\n    }\n\n    // other methods omitted for space\n}\n\n\nYou might be confused as to why an uncallable onFinally will be passed into then(), as was I when I first read the specification. Remember that then() ultimately delegates to performPledgeThen(), which in turn sets any uncallable handlers to undefined. So finally() is relying on that validation step in performPledgeThen() to ensure that uncallable handlers are never formally added.\n\nThe next step is to define the values for thenFinally and catchFinally if onFinally is callable. Each of these functions is defined in the specification as a sequence of steps to perform in order to pass on the settlement state and value from the first promise to the returned promise. The steps for thenFinally are a bit difficult to decipher in the specification8 but are really straight forward when you see the code:\n\nexport class Pledge {\n\n    // constructor omitted for space\n\n    static get [Symbol.species]() {\n        return this;\n    }\n\n    finally(onFinally) {\n\n        assertIsPledge(this);\n\n        const C = this.constructor[Symbol.species];\n\n        let thenFinally, catchFinally;\n\n        if (!isCallable(onFinally)) {\n            thenFinally = onFinally;\n            catchFinally = onFinally;\n        } else {\n\n            thenFinally = value =&gt; {\n                const result = onFinally.apply(undefined);\n                const pledge = pledgeResolve(C, result);\n                const valueThunk = () =&gt; value;\n                return pledge.then(valueThunk);\n            };\n\n            // not used by included for completeness with spec\n            thenFinally.C = C;\n            thenFinally.onFinally = onFinally;\n\n            // TODO\n\n        }\n\n        return this.then(thenFinally, catchFinally);\n    }\n\n    // other methods omitted for space\n}\n\n\nEssentially, the thenFinally value is a function that accepts the fulfilled value of the promise and then:\n\n\n  Calls onFinally().\n  Creates a resolved pledge with the result of step 1. (This result is ultimately discarded.)\n  Creates a function called valueThunk that does nothing but return the fulfilled value.\n  Assigns valueThunk as the fulfillment handler for the newly-created pledge and then returns the value.\n\n\nAfter that, references to C and onFinally are stored on the function, but as noted in the code, these aren’t necessary for the JavaScript implementation. In the specification, this is the way that the thenFinally functions gets access to both C and onFinally. In JavaScript, I’m using a closure to get access to those values.\n\nThe pledgeResolve() function is straightforward and follows the algorithm described in the specification9 almost exactly:\n\nfunction pledgeResolve(C, x) {\n\n    assertIsObject(C);\n\n    if (isPledge(x)) {\n        const xConstructor = x.constructor;\n\n        if (Object.is(xConstructor, C)) {\n            return x;\n        }\n    }\n\n    const pledgeCapability = new PledgeCapability(C);\n    pledgeCapability.resolve(x);\n    return pledgeCapability.pledge;\n}\n\n\nFor the purposes of this post, it’s not important to get into the specifics of checking to see if x is an instance of Pledge because that value is never used within onFinally. (This will be discussed, however, in my next post as it’s an important feature used in Promise.resolve().) Ultimately, the function creates a new PledgeCapability so it can return a Pledge instance.\n\nThe steps to create catchFinally10 are similar, but the end result is a function that throws a reason:\n\nexport class Pledge {\n\n    // constructor omitted for space\n\n    static get [Symbol.species]() {\n        return this;\n    }\n\n    finally(onFinally) {\n\n        assertIsPledge(this);\n\n        const C = this.constructor[Symbol.species];\n\n        let thenFinally, catchFinally;\n\n        if (!isCallable(onFinally)) {\n            thenFinally = onFinally;\n            catchFinally = onFinally;\n        } else {\n\n            thenFinally = value =&gt; {\n                const result = onFinally.apply(undefined);\n                const pledge = pledgeResolve(C, result);\n                const valueThunk = () =&gt; value;\n                return pledge.then(valueThunk);\n            };\n\n            // not used by included for completeness with spec\n            thenFinally.C = C;\n            thenFinally.onFinally = onFinally;\n\n            catchFinally = reason =&gt; {\n                const result = onFinally.apply(undefined);\n                const pledge = pledgeResolve(C, result);\n                const thrower = () =&gt; {\n                    throw reason;\n                };\n                return pledge.then(thrower);\n            };\n\n            // not used by included for completeness with spec\n            catchFinally.C = C;\n            catchFinally.onFinally = onFinally;\n\n        }\n\n        return this.then(thenFinally, catchFinally);\n    }\n\n    // other methods omitted for space\n}\n\n\nYou might be wondering why the catchFinally function is calling pledge.then(thrower) instead of pledge.catch(thrower). This is the way the specification defines this step to take place, and it really doesn’t matter whether you use then() or catch() because a handler that throws a value will always trigger a rejected promise.\n\nWith this completed finally() method, you can now see that when onFinally is callable, the method creates a thenFinally function that resolves to the same value as the original function and a catchFinally function that throws any reason it receives. These two functions are then passed to then() so that both fulfillment and rejection are handled in a way that mirrors the settled state of the original promise.\n\nWrapping Up\n\nThis post covered the internals of then(), catch(), and finally(), with then() containing most of the functionality of interest while catch() and finally() each delegate to then(). Handling promise reactions is, without a doubt, the most complicated part of the promises specification. You should now have a good understanding that all reactions are executed asynchronously as jobs (microtasks) regardless of promise state. This understanding really is key to a good overall understanding of how promises work and when you should expect various handlers to be executed.\n\nIn the next post in this series, I’ll cover creating settled promises with Promise.resolve() and Promise.reject().\n\nAll of this code is available in the Pledge on GitHub. I hope you’ll download it and try it out to get a better understanding of promises.\n\nReferences\n\n\n  \n    \n      PromiseCapability Records &#8617;\n    \n    \n      NewPromiseCapability( C ) &#8617;\n    \n    \n      Promise.prototype.then( onFulfilled, onRejected ) &#8617;\n    \n    \n      NewPromiseReactionJob( reaction, argument ) &#8617;\n    \n    \n      The Completion Record Specification Type &#8617;\n    \n    \n      TriggerPromiseReactions( reactions, argument ) &#8617;\n    \n    \n      Promise.prototype.finally( onFinally ) &#8617;\n    \n    \n      Then Finally Functions &#8617;\n    \n    \n      PromiseResolve( C, x ) &#8617;\n    \n    \n      Catch Finally Functions &#8617;\n    \n  \n\n",
            "content_html": "<p>In my <a href="https://humanwhocodes.com/feeds/\&quot;https://humanwhocodes.com/blog/2020/09/creating-javascript-promise-from-scratch-constructor/\&quot;">first post</a> of this series, I explained how the <code class=\"highlighter-rouge\">Promise</code> constructor works by recreating it as the <code class=\"highlighter-rouge\">Pledge</code> constructor. In the <a href="https://humanwhocodes.com/feeds/\&quot;https://humanwhocodes.com/blog/2020/09/creating-javascript-promise-from-scratch-resolving-to-a-promise/\&quot;">second post</a> in this series, I explained how asynchronous operations work in promises through jobs. If you haven’t already read those two posts, I’d suggest doing so before continuing on with this one.</p>\n\n<p>This post focuses on implementing <code class=\"highlighter-rouge\">then()</code>, <code class=\"highlighter-rouge\">catch()</code>, and <code class=\"highlighter-rouge\">finally()</code> according to ECMA-262. This functionality is surprisingly involved and relies on a lot of helper classes and utilities to get things working correctly. However, once you master a few basic concepts, the implementations are relatively straightforward.</p>\n\n<p>As a reminder, this series is based on my promise library, <a href="https://humanwhocodes.com/feeds/\&quot;https://github.com/humanwhocodes/pledge\&quot;">Pledge</a>. You can view and download all of the source code from GitHub.</p>\n\n<h2 id=\"the-then-method\">The <code class=\"highlighter-rouge\">then()</code> method</h2>\n\n<p>The <code class=\"highlighter-rouge\">then()</code> method on promises accepts two arguments: a fulfillment handler and a rejection handler. The term <em>handler</em> is used to describe a function that is called in reaction to a change in the internal state of a promise, so a fulfillment handler is called when a promise is fulfilled and a rejection handler is called when a promise is rejected. Each of the two arguments may be set as <code class=\"highlighter-rouge\">undefined</code> to allow you to set one or the other without requiring both.</p>\n\n<p>The steps taken when <code class=\"highlighter-rouge\">then()</code> is called depends on the state of the promise:</p>\n\n<ul>\n  <li>If the promise’s state is pending (the promise is unsettled), <code class=\"highlighter-rouge\">then()</code> simply stores the handlers to be called later.</li>\n  <li>If the promise’s state is fulfilled, <code class=\"highlighter-rouge\">then()</code> immediately queues a job to execute the fulfillment handler.</li>\n  <li>If the promise’s state is rejected, <code class=\"highlighter-rouge\">then()</code> immediately queues a job to execute the rejection handler.</li>\n</ul>\n\n<p>Additionally, regardless of the promise state, <code class=\"highlighter-rouge\">then()</code> always returns another promise, which is why you can chain promises together like this:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">const</span> <span class=\"nx\">promise</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nb\">Promise</span><span class=\"p\">((</span><span class=\"nx\">resolve</span><span class=\"p\">,</span> <span class=\"nx\">reject</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nx\">resolve</span><span class=\"p\">(</span><span class=\"mi\">42</span><span class=\"p\">);</span>\n<span class=\"p\">});</span>\n\n<span class=\"nx\">promise</span><span class=\"p\">.</span><span class=\"nx\">then</span><span class=\"p\">(</span><span class=\"nx\">value1</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">value1</span><span class=\"p\">);</span>\n    <span class=\"k\">return</span> <span class=\"nx\">value1</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n<span class=\"p\">}).</span><span class=\"nx\">then</span><span class=\"p\">(</span><span class=\"nx\">value2</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">value2</span><span class=\"p\">);</span>\n<span class=\"p\">});</span>\n</code></pre></div></div>\n\n<p>In this example, <code class=\"highlighter-rouge\">promise.then()</code> adds a fulfillment handler that outputs the resolution value and then returns another number based on that value. The second <code class=\"highlighter-rouge\">then()</code> call is actually on a second promise that is resolved using the return value from the preceding fulfillment handler. It’s this behavior that makes implementing <code class=\"highlighter-rouge\">then()</code> one of the more complicated aspects of promises, and that’s why there are a small group of helper classes necessary to implement the functionality properly.</p>\n\n<h3 id=\"the-promisecapability-record\">The <code class=\"highlighter-rouge\">PromiseCapability</code> record</h3>\n\n<p>The specification defines a <code class=\"highlighter-rouge\">PromiseCapability</code> record<sup id=\"fnref:1\"><a href="https://humanwhocodes.com/feeds/\&quot;#fn:1\"" class=\"footnote\">1</a></sup> as having the following internal-only properties:</p>\n\n<table>\n  <thead>\n    <tr>\n      <th><strong>Field Name</strong></th>\n      <th><strong>Value</strong></th>\n      <th><strong>Meaning</strong></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><code class=\"highlighter-rouge\">[[Promise]]</code></td>\n      <td>An object</td>\n      <td>An object that is usable as a promise.</td>\n    </tr>\n    <tr>\n      <td><code class=\"highlighter-rouge\">[[Resolve]]</code></td>\n      <td>A function object</td>\n      <td>The function that is used to resolve the given promise object.</td>\n    </tr>\n    <tr>\n      <td><code class=\"highlighter-rouge\">[[Reject]]</code></td>\n      <td>A function object</td>\n      <td>The function that is used to reject the given promise object.</td>\n    </tr>\n  </tbody>\n</table>\n\n<p>Effectively, a <code class=\"highlighter-rouge\">PromiseCapability</code> record consists of a promise object and the <code class=\"highlighter-rouge\">resolve</code> and <code class=\"highlighter-rouge\">reject</code> functions that change its internal state. You can think of this as a helper object that allows easier access to changing a promise’s state.</p>\n\n<p>Along with the definition of the <code class=\"highlighter-rouge\">PromiseCapability</code> record, there is also the definition of a <code class=\"highlighter-rouge\">NewPromiseCapability()</code> function<sup id=\"fnref:2\"><a href="https://humanwhocodes.com/feeds/\&quot;#fn:2\"" class=\"footnote\">2</a></sup> that outlines the steps you must take in order to create a new <code class=\"highlighter-rouge\">PromiseCapability</code> record. The <code class=\"highlighter-rouge\">NewPromiseCapability()</code> function is passed a single argument, <code class=\"highlighter-rouge\">C</code>, that is a function assumed to be a constructor that accepts an executor function. Here’s a simplified list of steps:</p>\n\n<ol>\n  <li>If <code class=\"highlighter-rouge\">C</code> isn’t a constructor, throw an error.</li>\n  <li>Create a new <code class=\"highlighter-rouge\">PromiseCapability</code> record with all internal properties set to <code class=\"highlighter-rouge\">undefined</code>.</li>\n  <li>Create an executor function to pass to <code class=\"highlighter-rouge\">C</code>.</li>\n  <li>Store a reference to the <code class=\"highlighter-rouge\">PromiseCapability</code> on the executor.</li>\n  <li>Create a new promise using the executor and extract it <code class=\"highlighter-rouge\">resolve</code> and <code class=\"highlighter-rouge\">reject</code> functions.</li>\n  <li>Store the <code class=\"highlighter-rouge\">resolve</code> and <code class=\"highlighter-rouge\">reject</code> functions on the <code class=\"highlighter-rouge\">PromiseCapability</code>.</li>\n  <li>If <code class=\"highlighter-rouge\">resolve</code> isn’t a function, throw an error.</li>\n  <li>If <code class=\"highlighter-rouge\">reject</code> isn’t a function, throw an error.</li>\n  <li>Store the promise on the <code class=\"highlighter-rouge\">PromiseCapability</code>.</li>\n  <li>Return the <code class=\"highlighter-rouge\">PromiseCapability</code></li>\n</ol>\n\n<p>I decided to use a <code class=\"highlighter-rouge\">PledgeCapability</code> class to implement both <code class=\"highlighter-rouge\">PromiseCapability</code> and <code class=\"highlighter-rouge\">NewPromiseCapability()</code>, making it more idiomatic to JavaScript. Here’s the code:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">export</span> <span class=\"kd\">class</span> <span class=\"nx\">PledgeCapability</span> <span class=\"p\">{</span>\n\n    <span class=\"kd\">constructor</span><span class=\"p\">(</span><span class=\"nx\">C</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\n        <span class=\"kd\">const</span> <span class=\"nx\">executor</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">resolve</span><span class=\"p\">,</span> <span class=\"nx\">reject</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n            <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">resolve</span> <span class=\"o\">=</span> <span class=\"nx\">resolve</span><span class=\"p\">;</span>\n            <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">reject</span> <span class=\"o\">=</span> <span class=\"nx\">reject</span><span class=\"p\">;</span>\n        <span class=\"p\">};</span>\n\n        <span class=\"c1\">// not used but included for completeness with spec</span>\n        <span class=\"nx\">executor</span><span class=\"p\">.</span><span class=\"nx\">capability</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">;</span>\n\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">pledge</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">C</span><span class=\"p\">(</span><span class=\"nx\">executor</span><span class=\"p\">);</span>\n\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"nx\">isCallable</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">resolve</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n            <span class=\"k\">throw</span> <span class=\"k\">new</span> <span class=\"nx\">TypeError</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">resolve is not callable.</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"nx\">isCallable</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">reject</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n            <span class=\"k\">throw</span> <span class=\"k\">new</span> <span class=\"nx\">TypeError</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">reject is not callable.</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>The most interesting part of the constructor, and the part that took me the longest to understand, is that the <code class=\"highlighter-rouge\">executor</code> function is used simply to grab references to the <code class=\"highlighter-rouge\">resolve</code> and <code class=\"highlighter-rouge\">reject</code> functions that are passed in. This is necessary because you don’t know what <code class=\"highlighter-rouge\">C</code> is. If <code class=\"highlighter-rouge\">C</code> was always <code class=\"highlighter-rouge\">Promise</code>, then you could use <code class=\"highlighter-rouge\">createResolvingFunctions()</code> to create <code class=\"highlighter-rouge\">resolve</code> and <code class=\"highlighter-rouge\">reject</code>. However, <code class=\"highlighter-rouge\">C</code> could be a subclass of <code class=\"highlighter-rouge\">Promise</code> that changes how <code class=\"highlighter-rouge\">resolve</code> and <code class=\"highlighter-rouge\">reject</code> are created, so you need to grab the actual functions that are passed in.</p>\n\n<p>A note about the design of this class: I opted to use string property names instead of going through the trouble of creating symbol property names to represent that these properties are meant to be internal-only. However, because this class isn’t exposed as part of the API, there is no risk of anyone accidentally referencing those properties from outside of the library. Given that, I decided to favor the readability of string property names over the more technically correct symbol property names.</p>\n\n<p>The <code class=\"highlighter-rouge\">PledgeCapability</code> class is used like this:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">const</span> <span class=\"nx\">capability</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">PledgeCapability</span><span class=\"p\">(</span><span class=\"nx\">Pledge</span><span class=\"p\">);</span>\n\n<span class=\"nx\">capability</span><span class=\"p\">.</span><span class=\"nx\">resolve</span><span class=\"p\">(</span><span class=\"mi\">42</span><span class=\"p\">);</span>\n<span class=\"nx\">capability</span><span class=\"p\">.</span><span class=\"nx\">pledge</span><span class=\"p\">.</span><span class=\"nx\">then</span><span class=\"p\">(</span><span class=\"nx\">value</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">value</span><span class=\"p\">);</span>\n<span class=\"p\">});</span>\n</code></pre></div></div>\n\n<p>In this example, the <code class=\"highlighter-rouge\">Pledge</code> constructor is passed to <code class=\"highlighter-rouge\">PledgeCapability</code> to create a new instance of <code class=\"highlighter-rouge\">Pledge</code> and extract its <code class=\"highlighter-rouge\">resolve</code> and <code class=\"highlighter-rouge\">reject</code> functions. This turns out to be important because you don’t know the class to use when creating the return value for <code class=\"highlighter-rouge\">then()</code> until runtime.</p>\n\n<h3 id=\"using-symbolspecies\">Using <code class=\"highlighter-rouge\">Symbol.species</code></h3>\n\n<p>The well-known symbol <code class=\"highlighter-rouge\">Symbol.species</code> isn’t well understood by JavaScript developers but is important to understand in the context of promises. Whenever a method on an object must return an instance of the same class, the specification defines a static <code class=\"highlighter-rouge\">Symbol.species</code> getter on the class. This is true for many JavaScript classes including arrays, where methods like <code class=\"highlighter-rouge\">slice()</code> and <code class=\"highlighter-rouge\">concat()</code> return arrays, and it’s also true for promises, where methods like <code class=\"highlighter-rouge\">then()</code> and <code class=\"highlighter-rouge\">catch()</code> return another promise. This is important because if you subclass <code class=\"highlighter-rouge\">Promise</code>, you probably want <code class=\"highlighter-rouge\">then()</code> to return an instance of your subclass and not an instance of <code class=\"highlighter-rouge\">Promise</code>.</p>\n\n<p>The specification defines the default value for <code class=\"highlighter-rouge\">Symbol.species</code> to be <code class=\"highlighter-rouge\">this</code> for all built-in classes, so the <code class=\"highlighter-rouge\">Pledge</code> class implements this property as follows:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">export</span> <span class=\"kd\">class</span> <span class=\"nx\">Pledge</span> <span class=\"p\">{</span>\n\n    <span class=\"c1\">// constructor omitted for space</span>\n\n    <span class=\"kd\">static</span> <span class=\"kd\">get</span> <span class=\"p\">[</span><span class=\"nb\">Symbol</span><span class=\"p\">.</span><span class=\"nx\">species</span><span class=\"p\">]()</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"c1\">// other methods omitted for space</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>Keep in mind that because the <code class=\"highlighter-rouge\">Symbol.species</code> getter is static, <code class=\"highlighter-rouge\">this</code> is actually a reference to <code class=\"highlighter-rouge\">Pledge</code> (you can try it for yourself accessing <code class=\"highlighter-rouge\">Pledge[Symbol.species]</code>). However, because <code class=\"highlighter-rouge\">this</code> is evaluated at runtime, it would have a different value for a subclass, such as this:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">class</span> <span class=\"nx\">SuperPledge</span> <span class=\"kd\">extends</span> <span class=\"nx\">Pledge</span> <span class=\"p\">{</span>\n    <span class=\"c1\">// empty</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>Using this code, <code class=\"highlighter-rouge\">SuperPledge[Symbol.species]</code> evaluates to <code class=\"highlighter-rouge\">SuperPledge</code>. Because <code class=\"highlighter-rouge\">this</code> is evaluated at runtime, it automatically references the class constructor that is in use. That’s exactly why the specification defines <code class=\"highlighter-rouge\">Symbol.species</code> this way: it’s a convenience for developers as using the same constructor for method return values is the common case.</p>\n\n<p>Now that you have a good understanding of <code class=\"highlighter-rouge\">Symbol.species</code>, it’s time to move on implementing <code class=\"highlighter-rouge\">then()</code>.</p>\n\n<h3 id=\"implementing-the-then-method\">Implementing the <code class=\"highlighter-rouge\">then()</code> method</h3>\n\n<p>The <code class=\"highlighter-rouge\">then()</code> method itself is fairly short because it delegates most of the work to a function called <code class=\"highlighter-rouge\">PerformPromiseThen()</code>. Here’s how the specification defines <code class=\"highlighter-rouge\">then()</code><sup id=\"fnref:3\"><a href="https://humanwhocodes.com/feeds/\&quot;#fn:3\"" class=\"footnote\">3</a></sup>:</p>\n\n<ol>\n  <li>Let <code class=\"highlighter-rouge\">promise</code> be the <code class=\"highlighter-rouge\">this</code> value.</li>\n  <li>If <code class=\"highlighter-rouge\">IsPromise(promise)</code> is <code class=\"highlighter-rouge\">false</code>, throw a <code class=\"highlighter-rouge\">TypeError</code> exception.</li>\n  <li>Let <code class=\"highlighter-rouge\">C</code> be <code class=\"highlighter-rouge\">?</code> <code class=\"highlighter-rouge\">SpeciesConstructor(promise, %Promise%)</code>.</li>\n  <li>Let <code class=\"highlighter-rouge\">resultCapability</code> be <code class=\"highlighter-rouge\">?</code> <code class=\"highlighter-rouge\">NewPromiseCapability(C)</code>.</li>\n  <li>Return <code class=\"highlighter-rouge\">PerformPromiseThen(promise, onFulfilled, onRejected, resultCapability)</code>.</li>\n</ol>\n\n<p>And here’s how I coded up that algorithm:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">export</span> <span class=\"kd\">class</span> <span class=\"nx\">Pledge</span> <span class=\"p\">{</span>\n\n    <span class=\"c1\">// constructor omitted for space</span>\n\n    <span class=\"kd\">static</span> <span class=\"kd\">get</span> <span class=\"p\">[</span><span class=\"nb\">Symbol</span><span class=\"p\">.</span><span class=\"nx\">species</span><span class=\"p\">]()</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"nx\">then</span><span class=\"p\">(</span><span class=\"nx\">onFulfilled</span><span class=\"p\">,</span> <span class=\"nx\">onRejected</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\n        <span class=\"nx\">assertIsPledge</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">);</span>\n\n        <span class=\"kd\">const</span> <span class=\"nx\">C</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"kd\">constructor</span><span class=\"p\">[</span><span class=\"nb\">Symbol</span><span class=\"p\">.</span><span class=\"nx\">species</span><span class=\"p\">];</span>\n        <span class=\"kd\">const</span> <span class=\"nx\">resultCapability</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">PledgeCapability</span><span class=\"p\">(</span><span class=\"nx\">C</span><span class=\"p\">);</span>\n        <span class=\"k\">return</span> <span class=\"nx\">performPledgeThen</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">,</span> <span class=\"nx\">onFulfilled</span><span class=\"p\">,</span> <span class=\"nx\">onRejected</span><span class=\"p\">,</span> <span class=\"nx\">resultCapability</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"c1\">// other methods omitted for space</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>The first thing to note is that I didn’t define a variable to store <code class=\"highlighter-rouge\">this</code> as the algorithm specifies. That’s because it’s redundant in JavaScript when you can access <code class=\"highlighter-rouge\">this</code> directly. After that, the rest of the method is a direct translation into JavaScript. The species constructor is stored in <code class=\"highlighter-rouge\">C</code> and a new <code class=\"highlighter-rouge\">PledgeCapability</code> is created from that. Then, all of the information is passed to <code class=\"highlighter-rouge\">performPledgeThen()</code> to do the real work.</p>\n\n<p>The <code class=\"highlighter-rouge\">performPledgeThen()</code> function is one of the longer functions in the Pledge library and implements the algorithm for <code class=\"highlighter-rouge\">PerformPromiseThen()</code> in the specification. The algorithm is a little difficult to understand, but it begins with these steps:</p>\n\n<ol>\n  <li>Assert that the first argument is a promise.</li>\n  <li>If either <code class=\"highlighter-rouge\">onFulfilled</code> or <code class=\"highlighter-rouge\">onRejected</code> aren’t functions, set them to <code class=\"highlighter-rouge\">undefined</code>.</li>\n  <li>Create <code class=\"highlighter-rouge\">PromiseReaction</code> records for each of <code class=\"highlighter-rouge\">onFulfilled</code> and <code class=\"highlighter-rouge\">onRejected</code>.</li>\n</ol>\n\n<p>Here’s what that code looks like in the Pledge library:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">function</span> <span class=\"nx\">performPledgeThen</span><span class=\"p\">(</span><span class=\"nx\">pledge</span><span class=\"p\">,</span> <span class=\"nx\">onFulfilled</span><span class=\"p\">,</span> <span class=\"nx\">onRejected</span><span class=\"p\">,</span> <span class=\"nx\">resultCapability</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    \n    <span class=\"nx\">assertIsPledge</span><span class=\"p\">(</span><span class=\"nx\">pledge</span><span class=\"p\">);</span>\n\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"nx\">isCallable</span><span class=\"p\">(</span><span class=\"nx\">onFulfilled</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n        <span class=\"nx\">onFulfilled</span> <span class=\"o\">=</span> <span class=\"kc\">undefined</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"nx\">isCallable</span><span class=\"p\">(</span><span class=\"nx\">onRejected</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n        <span class=\"nx\">onRejected</span> <span class=\"o\">=</span> <span class=\"kc\">undefined</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"kd\">const</span> <span class=\"nx\">fulfillReaction</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">PledgeReaction</span><span class=\"p\">(</span><span class=\"nx\">resultCapability</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">fulfill</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"nx\">onFulfilled</span><span class=\"p\">);</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">rejectReaction</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">PledgeReaction</span><span class=\"p\">(</span><span class=\"nx\">resultCapability</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">reject</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"nx\">onRejected</span><span class=\"p\">);</span>\n\n    <span class=\"c1\">// more code to come</span>\n\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>The <code class=\"highlighter-rouge\">fulfillReaction</code> and <code class=\"highlighter-rouge\">rejectReaction</code> objects are always created event when <code class=\"highlighter-rouge\">onFulfilled</code> and <code class=\"highlighter-rouge\">onRejected</code> are <code class=\"highlighter-rouge\">undefined</code>. These objects store all of the information necessary to execute a handler. (Keep in mind that only one of these reactions will ever be used. Either the pledge is fulfilled so <code class=\"highlighter-rouge\">fulfillReaction</code> is used or the pledge is rejected so <code class=\"highlighter-rouge\">rejectReaction</code> is used. That’s why it’s safe to pass the same <code class=\"highlighter-rouge\">resultCapability</code> to both even though it contains only one instance of <code class=\"highlighter-rouge\">Pledge</code>.)</p>\n\n<p>The <code class=\"highlighter-rouge\">PledgeReaction</code> class is the JavaScript equivalent of the <code class=\"highlighter-rouge\">PromiseReaction</code> record in the specification and is declared like this:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">class</span> <span class=\"nx\">PledgeReaction</span> <span class=\"p\">{</span>\n    <span class=\"kd\">constructor</span><span class=\"p\">(</span><span class=\"nx\">capability</span><span class=\"p\">,</span> <span class=\"nx\">type</span><span class=\"p\">,</span> <span class=\"nx\">handler</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">capability</span> <span class=\"o\">=</span> <span class=\"nx\">capability</span><span class=\"p\">;</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">type</span> <span class=\"o\">=</span> <span class=\"nx\">type</span><span class=\"p\">;</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">handler</span> <span class=\"o\">=</span> <span class=\"nx\">handler</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>The next steps in <code class=\"highlighter-rouge\">PerformPromiseThen()</code> are all based on the state of the promise:</p>\n\n<ol>\n  <li>If the state is pending, then store the reactions for later.</li>\n  <li>If the state is fulfilled, then queue a job to execute <code class=\"highlighter-rouge\">fulfillReaction</code>.</li>\n  <li>If the state is rejected, then queue a job to execute <code class=\"highlighter-rouge\">rejectReaction</code>.</li>\n</ol>\n\n<p>And after that, there are two more steps:</p>\n\n<ol>\n  <li>Mark the promise as being handled (for unhandled rejection tracking, discussed in an upcoming post).</li>\n  <li>Return the promise from the <code class=\"highlighter-rouge\">resultCapability</code>, or return <code class=\"highlighter-rouge\">undefined</code> if <code class=\"highlighter-rouge\">resultCapability</code> is <code class=\"highlighter-rouge\">undefined</code>.</li>\n</ol>\n\n<p>Here’s the finished <code class=\"highlighter-rouge\">performPledgeThen()</code> that implements these steps:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">function</span> <span class=\"nx\">performPledgeThen</span><span class=\"p\">(</span><span class=\"nx\">pledge</span><span class=\"p\">,</span> <span class=\"nx\">onFulfilled</span><span class=\"p\">,</span> <span class=\"nx\">onRejected</span><span class=\"p\">,</span> <span class=\"nx\">resultCapability</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\n    <span class=\"nx\">assertIsPledge</span><span class=\"p\">(</span><span class=\"nx\">pledge</span><span class=\"p\">);</span>\n\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"nx\">isCallable</span><span class=\"p\">(</span><span class=\"nx\">onFulfilled</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n        <span class=\"nx\">onFulfilled</span> <span class=\"o\">=</span> <span class=\"kc\">undefined</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"nx\">isCallable</span><span class=\"p\">(</span><span class=\"nx\">onRejected</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n        <span class=\"nx\">onRejected</span> <span class=\"o\">=</span> <span class=\"kc\">undefined</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"kd\">const</span> <span class=\"nx\">fulfillReaction</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">PledgeFulfillReaction</span><span class=\"p\">(</span><span class=\"nx\">resultCapability</span><span class=\"p\">,</span> <span class=\"nx\">onFulfilled</span><span class=\"p\">);</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">rejectReaction</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">PledgeRejectReaction</span><span class=\"p\">(</span><span class=\"nx\">resultCapability</span><span class=\"p\">,</span> <span class=\"nx\">onRejected</span><span class=\"p\">);</span>\n\n    <span class=\"k\">switch</span> <span class=\"p\">(</span><span class=\"nx\">pledge</span><span class=\"p\">[</span><span class=\"nx\">PledgeSymbol</span><span class=\"p\">.</span><span class=\"nx\">state</span><span class=\"p\">])</span> <span class=\"p\">{</span>\n\n        <span class=\"k\">case</span> <span class=\"dl\">\"</span><span class=\"s2\">pending</span><span class=\"dl\">\"</span><span class=\"p\">:</span>\n            <span class=\"nx\">pledge</span><span class=\"p\">[</span><span class=\"nx\">PledgeSymbol</span><span class=\"p\">.</span><span class=\"nx\">fulfillReactions</span><span class=\"p\">].</span><span class=\"nx\">push</span><span class=\"p\">(</span><span class=\"nx\">fulfillReaction</span><span class=\"p\">);</span>\n            <span class=\"nx\">pledge</span><span class=\"p\">[</span><span class=\"nx\">PledgeSymbol</span><span class=\"p\">.</span><span class=\"nx\">rejectReactions</span><span class=\"p\">].</span><span class=\"nx\">push</span><span class=\"p\">(</span><span class=\"nx\">rejectReaction</span><span class=\"p\">);</span>\n            <span class=\"k\">break</span><span class=\"p\">;</span>\n\n        <span class=\"k\">case</span> <span class=\"dl\">\"</span><span class=\"s2\">fulfilled</span><span class=\"dl\">\"</span><span class=\"p\">:</span> \n            <span class=\"p\">{</span>\n                <span class=\"kd\">const</span> <span class=\"nx\">value</span> <span class=\"o\">=</span> <span class=\"nx\">pledge</span><span class=\"p\">[</span><span class=\"nx\">PledgeSymbol</span><span class=\"p\">.</span><span class=\"nx\">result</span><span class=\"p\">];</span>\n                <span class=\"kd\">const</span> <span class=\"nx\">fulfillJob</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">PledgeReactionJob</span><span class=\"p\">(</span><span class=\"nx\">fulfillReaction</span><span class=\"p\">,</span> <span class=\"nx\">value</span><span class=\"p\">);</span>\n                <span class=\"nx\">hostEnqueuePledgeJob</span><span class=\"p\">(</span><span class=\"nx\">fulfillJob</span><span class=\"p\">);</span>\n            <span class=\"p\">}</span>\n            <span class=\"k\">break</span><span class=\"p\">;</span>\n\n        <span class=\"k\">case</span> <span class=\"dl\">\"</span><span class=\"s2\">rejected</span><span class=\"dl\">\"</span><span class=\"p\">:</span>\n            <span class=\"p\">{</span>\n                <span class=\"kd\">const</span> <span class=\"nx\">reason</span> <span class=\"o\">=</span> <span class=\"nx\">pledge</span><span class=\"p\">[</span><span class=\"nx\">PledgeSymbol</span><span class=\"p\">.</span><span class=\"nx\">result</span><span class=\"p\">];</span>\n                <span class=\"kd\">const</span> <span class=\"nx\">rejectJob</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">PledgeReactionJob</span><span class=\"p\">(</span><span class=\"nx\">rejectReaction</span><span class=\"p\">,</span> <span class=\"nx\">reason</span><span class=\"p\">);</span>\n\n                <span class=\"c1\">// TODO: if [[isHandled]] if false</span>\n                \n                <span class=\"nx\">hostEnqueuePledgeJob</span><span class=\"p\">(</span><span class=\"nx\">rejectJob</span><span class=\"p\">);</span>\n            <span class=\"p\">}</span>\n            <span class=\"k\">break</span><span class=\"p\">;</span>\n\n        <span class=\"nl\">default</span><span class=\"p\">:</span>\n            <span class=\"k\">throw</span> <span class=\"k\">new</span> <span class=\"nx\">TypeError</span><span class=\"p\">(</span><span class=\"s2\">`Invalid pledge state: </span><span class=\"p\">${</span><span class=\"nx\">pledge</span><span class=\"p\">[</span><span class=\"nx\">PledgeSymbol</span><span class=\"p\">.</span><span class=\"nx\">state</span><span class=\"p\">]}</span><span class=\"s2\">.`</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"nx\">pledge</span><span class=\"p\">[</span><span class=\"nx\">PledgeSymbol</span><span class=\"p\">.</span><span class=\"nx\">isHandled</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"p\">;</span>\n\n    <span class=\"k\">return</span> <span class=\"nx\">resultCapability</span> <span class=\"p\">?</span> <span class=\"nx\">resultCapability</span><span class=\"p\">.</span><span class=\"nx\">pledge</span> <span class=\"p\">:</span> <span class=\"kc\">undefined</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>In this code, the <code class=\"highlighter-rouge\">PledgeSymbol.fulfillReactions</code> and <code class=\"highlighter-rouge\">PledgeSymbol.rejectReactions</code> are finally used for something. If the state is pending, the reactions are stored for later so they can be triggered when the state changes (this is discussed later in this post). If the state is either fulfilled or rejected then a <code class=\"highlighter-rouge\">PledgeReactionJob</code> is created to run the reaction. The <code class=\"highlighter-rouge\">PledgeReactionJob</code> maps to <code class=\"highlighter-rouge\">NewPromiseReactionJob()</code><sup id=\"fnref:4\"><a href="https://humanwhocodes.com/feeds/\&quot;#fn:4\"" class=\"footnote\">4</a></sup> in the specification and is declared like this:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">export</span> <span class=\"kd\">class</span> <span class=\"nx\">PledgeReactionJob</span> <span class=\"p\">{</span>\n    <span class=\"kd\">constructor</span><span class=\"p\">(</span><span class=\"nx\">reaction</span><span class=\"p\">,</span> <span class=\"nx\">argument</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n            <span class=\"kd\">const</span> <span class=\"p\">{</span> <span class=\"na\">capability</span><span class=\"p\">:</span> <span class=\"nx\">pledgeCapability</span><span class=\"p\">,</span> <span class=\"nx\">type</span><span class=\"p\">,</span> <span class=\"nx\">handler</span> <span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"nx\">reaction</span><span class=\"p\">;</span>\n            <span class=\"kd\">let</span> <span class=\"nx\">handlerResult</span><span class=\"p\">;</span>\n\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"k\">typeof</span> <span class=\"nx\">handler</span> <span class=\"o\">===</span> <span class=\"dl\">\"</span><span class=\"s2\">undefined</span><span class=\"dl\">\"</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\n                <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">type</span> <span class=\"o\">===</span> <span class=\"dl\">\"</span><span class=\"s2\">fulfill</span><span class=\"dl\">\"</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                    <span class=\"nx\">handlerResult</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">NormalCompletion</span><span class=\"p\">(</span><span class=\"nx\">argument</span><span class=\"p\">);</span>\n                <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n                    <span class=\"nx\">handlerResult</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">ThrowCompletion</span><span class=\"p\">(</span><span class=\"nx\">argument</span><span class=\"p\">);</span>\n                <span class=\"p\">}</span>\n            <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n                <span class=\"k\">try</span> <span class=\"p\">{</span>\n                    <span class=\"nx\">handlerResult</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">NormalCompletion</span><span class=\"p\">(</span><span class=\"nx\">handler</span><span class=\"p\">(</span><span class=\"nx\">argument</span><span class=\"p\">));</span>\n                <span class=\"p\">}</span> <span class=\"k\">catch</span> <span class=\"p\">(</span><span class=\"nx\">error</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                    <span class=\"nx\">handlerResult</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">ThrowCompletion</span><span class=\"p\">(</span><span class=\"nx\">error</span><span class=\"p\">);</span>\n                <span class=\"p\">}</span>\n            <span class=\"p\">}</span>\n\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"k\">typeof</span> <span class=\"nx\">pledgeCapability</span> <span class=\"o\">===</span> <span class=\"dl\">\"</span><span class=\"s2\">undefined</span><span class=\"dl\">\"</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">handlerResult</span> <span class=\"k\">instanceof</span> <span class=\"nx\">ThrowCompletion</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                    <span class=\"k\">throw</span> <span class=\"nx\">handlerResult</span><span class=\"p\">.</span><span class=\"nx\">value</span><span class=\"p\">;</span>\n                <span class=\"p\">}</span>\n\n                <span class=\"c1\">// Return NormalCompletion(empty)</span>\n                <span class=\"k\">return</span><span class=\"p\">;</span>\n            <span class=\"p\">}</span>\n\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">handlerResult</span> <span class=\"k\">instanceof</span> <span class=\"nx\">ThrowCompletion</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                <span class=\"nx\">pledgeCapability</span><span class=\"p\">.</span><span class=\"nx\">reject</span><span class=\"p\">(</span><span class=\"nx\">handlerResult</span><span class=\"p\">.</span><span class=\"nx\">value</span><span class=\"p\">);</span>\n            <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n                <span class=\"nx\">pledgeCapability</span><span class=\"p\">.</span><span class=\"nx\">resolve</span><span class=\"p\">(</span><span class=\"nx\">handlerResult</span><span class=\"p\">.</span><span class=\"nx\">value</span><span class=\"p\">);</span>\n            <span class=\"p\">}</span>\n\n            <span class=\"c1\">// Return NormalCompletion(status)</span>\n        <span class=\"p\">};</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>This code begins by extracting all of the information from the <code class=\"highlighter-rouge\">reaction</code> that was passed in. The function is a little bit long because both <code class=\"highlighter-rouge\">capability</code> and <code class=\"highlighter-rouge\">handler</code> can be <code class=\"highlighter-rouge\">undefined</code>, so there are fallback behaviors in each of those cases.</p>\n\n<p>The <code class=\"highlighter-rouge\">PledgeReactionJob</code> class also uses the concept of a <em>completion record</em><sup id=\"fnref:5\"><a href="https://humanwhocodes.com/feeds/\&quot;#fn:5\"" class=\"footnote\">5</a></sup>. In most of the code, I was able to avoid needing to reference completion records directly, but in this code it was necessary to better match the algorithm in the specification. A completion record is nothing more than a record of how an operation’s control flow concluded. There are four completion types:</p>\n\n<ul>\n  <li><strong>normal</strong> - when an operation succeeds without any change in control flow (the <code class=\"highlighter-rouge\">return</code> statement or exiting at the end of a function)</li>\n  <li><strong>break</strong> - when an operation exits completely (the <code class=\"highlighter-rouge\">break</code> statement)</li>\n  <li><strong>continue</strong> - when an operation exits and then restarts (the <code class=\"highlighter-rouge\">continue</code> statement)</li>\n  <li><strong>throw</strong> - when an operation results in an error (the <code class=\"highlighter-rouge\">throw</code> statement)</li>\n</ul>\n\n<p>These completion records tell the JavaScript engine how (or whether) to continue running code. For creating <code class=\"highlighter-rouge\">PledgeReactionJob</code>, I only needed normal and throw completions, so I declared them as follows:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">export</span> <span class=\"kd\">class</span> <span class=\"nx\">Completion</span> <span class=\"p\">{</span>\n    <span class=\"kd\">constructor</span><span class=\"p\">(</span><span class=\"nx\">type</span><span class=\"p\">,</span> <span class=\"nx\">value</span><span class=\"p\">,</span> <span class=\"nx\">target</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">type</span> <span class=\"o\">=</span> <span class=\"nx\">type</span><span class=\"p\">;</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">value</span> <span class=\"o\">=</span> <span class=\"nx\">value</span><span class=\"p\">;</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">target</span> <span class=\"o\">=</span> <span class=\"nx\">target</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n<span class=\"k\">export</span> <span class=\"kd\">class</span> <span class=\"nx\">NormalCompletion</span> <span class=\"kd\">extends</span> <span class=\"nx\">Completion</span> <span class=\"p\">{</span>\n    <span class=\"kd\">constructor</span><span class=\"p\">(</span><span class=\"nx\">argument</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">super</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">normal</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"nx\">argument</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">export</span> <span class=\"kd\">class</span> <span class=\"nx\">ThrowCompletion</span> <span class=\"kd\">extends</span> <span class=\"nx\">Completion</span> <span class=\"p\">{</span>\n    <span class=\"kd\">constructor</span><span class=\"p\">(</span><span class=\"nx\">argument</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">super</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">throw</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"nx\">argument</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>Essentially, <code class=\"highlighter-rouge\">NormalCompletion</code> tells the function to exit as normal (if there is no <code class=\"highlighter-rouge\">pledgeCapability</code>) or resolve a pledge (if <code class=\"highlighter-rouge\">pledgeCapability</code> is defined) and <code class=\"highlighter-rouge\">ThrowCompletion</code> tells the function to either throw an error (if there is no <code class=\"highlighter-rouge\">pledgeCapability</code>) or reject a pledge (if <code class=\"highlighter-rouge\">pledgeCapability</code> is defined). Within the Pledge library, <code class=\"highlighter-rouge\">pledgeCapability</code> will always be defined, but I wanted to match the original algorithm from the specification for completeness.</p>\n\n<p>Having covered <code class=\"highlighter-rouge\">PledgeReactionJob</code> means that the <code class=\"highlighter-rouge\">pledgePerformThen()</code> function is complete and all handlers will be properly stored (if the pledge state is pending) or executed immediately (if the pledge state is fulfilled or rejected). The last step is to execute any save reactions when the pledge state changes from pending to either fulfilled or rejected.</p>\n\n<h3 id=\"triggering-stored-reactions\">Triggering stored reactions</h3>\n\n<p>When a promise transitions from unsettled to settled, it triggers the stored reactions to execute (fulfill reactions if the promise is fulfilled and reject reactions when the promise is rejected). The specification defines this operation as <code class=\"highlighter-rouge\">TriggerPromiseReaction()</code><sup id=\"fnref:6\"><a href="https://humanwhocodes.com/feeds/\&quot;#fn:6\"" class=\"footnote\">6</a></sup>, and it’s one of the easier algorithms to implement. The entire algorithm is basically iterating over a list (array in JavaScript) of reactions and then creating and queueing a new <code class=\"highlighter-rouge\">PromiseReactionJob</code> for each one. Here’s how I implemented it as <code class=\"highlighter-rouge\">triggerPledgeReactions()</code>:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">export</span> <span class=\"kd\">function</span> <span class=\"nx\">triggerPledgeReactions</span><span class=\"p\">(</span><span class=\"nx\">reactions</span><span class=\"p\">,</span> <span class=\"nx\">argument</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kd\">const</span> <span class=\"nx\">reaction</span> <span class=\"k\">of</span> <span class=\"nx\">reactions</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"kd\">const</span> <span class=\"nx\">job</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">PledgeReactionJob</span><span class=\"p\">(</span><span class=\"nx\">reaction</span><span class=\"p\">,</span> <span class=\"nx\">argument</span><span class=\"p\">);</span>\n        <span class=\"nx\">hostEnqueuePledgeJob</span><span class=\"p\">(</span><span class=\"nx\">job</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>The most important part is to pass in the correct <code class=\"highlighter-rouge\">reactions</code> argument, which is why this is function is called in two places: <code class=\"highlighter-rouge\">fulfillPledge()</code> and <code class=\"highlighter-rouge\">rejectPledge()</code> (discussed in part 1 of this series). For both functions, triggering reactions is the last step. Here’s the code for that:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">export</span> <span class=\"kd\">function</span> <span class=\"nx\">fulfillPledge</span><span class=\"p\">(</span><span class=\"nx\">pledge</span><span class=\"p\">,</span> <span class=\"nx\">value</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">pledge</span><span class=\"p\">[</span><span class=\"nx\">PledgeSymbol</span><span class=\"p\">.</span><span class=\"nx\">state</span><span class=\"p\">]</span> <span class=\"o\">!==</span> <span class=\"dl\">\"</span><span class=\"s2\">pending</span><span class=\"dl\">\"</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">throw</span> <span class=\"k\">new</span> <span class=\"nb\">Error</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">Pledge is already settled.</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"kd\">const</span> <span class=\"nx\">reactions</span> <span class=\"o\">=</span> <span class=\"nx\">pledge</span><span class=\"p\">[</span><span class=\"nx\">PledgeSymbol</span><span class=\"p\">.</span><span class=\"nx\">fulfillReactions</span><span class=\"p\">];</span>\n\n    <span class=\"nx\">pledge</span><span class=\"p\">[</span><span class=\"nx\">PledgeSymbol</span><span class=\"p\">.</span><span class=\"nx\">result</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nx\">value</span><span class=\"p\">;</span>\n    <span class=\"nx\">pledge</span><span class=\"p\">[</span><span class=\"nx\">PledgeSymbol</span><span class=\"p\">.</span><span class=\"nx\">fulfillReactions</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">undefined</span><span class=\"p\">;</span>\n    <span class=\"nx\">pledge</span><span class=\"p\">[</span><span class=\"nx\">PledgeSymbol</span><span class=\"p\">.</span><span class=\"nx\">rejectReactions</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">undefined</span><span class=\"p\">;</span>\n    <span class=\"nx\">pledge</span><span class=\"p\">[</span><span class=\"nx\">PledgeSymbol</span><span class=\"p\">.</span><span class=\"nx\">state</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"dl\">\"</span><span class=\"s2\">fulfilled</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n\n    <span class=\"k\">return</span> <span class=\"nx\">triggerPledgeReactions</span><span class=\"p\">(</span><span class=\"nx\">reactions</span><span class=\"p\">,</span> <span class=\"nx\">value</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">export</span> <span class=\"kd\">function</span> <span class=\"nx\">rejectPledge</span><span class=\"p\">(</span><span class=\"nx\">pledge</span><span class=\"p\">,</span> <span class=\"nx\">reason</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">pledge</span><span class=\"p\">[</span><span class=\"nx\">PledgeSymbol</span><span class=\"p\">.</span><span class=\"nx\">state</span><span class=\"p\">]</span> <span class=\"o\">!==</span> <span class=\"dl\">\"</span><span class=\"s2\">pending</span><span class=\"dl\">\"</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">throw</span> <span class=\"k\">new</span> <span class=\"nb\">Error</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">Pledge is already settled.</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"kd\">const</span> <span class=\"nx\">reactions</span> <span class=\"o\">=</span> <span class=\"nx\">pledge</span><span class=\"p\">[</span><span class=\"nx\">PledgeSymbol</span><span class=\"p\">.</span><span class=\"nx\">rejectReactions</span><span class=\"p\">];</span>\n\n    <span class=\"nx\">pledge</span><span class=\"p\">[</span><span class=\"nx\">PledgeSymbol</span><span class=\"p\">.</span><span class=\"nx\">result</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nx\">reason</span><span class=\"p\">;</span>\n    <span class=\"nx\">pledge</span><span class=\"p\">[</span><span class=\"nx\">PledgeSymbol</span><span class=\"p\">.</span><span class=\"nx\">fulfillReactions</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">undefined</span><span class=\"p\">;</span>\n    <span class=\"nx\">pledge</span><span class=\"p\">[</span><span class=\"nx\">PledgeSymbol</span><span class=\"p\">.</span><span class=\"nx\">rejectReactions</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">undefined</span><span class=\"p\">;</span>\n    <span class=\"nx\">pledge</span><span class=\"p\">[</span><span class=\"nx\">PledgeSymbol</span><span class=\"p\">.</span><span class=\"nx\">state</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"dl\">\"</span><span class=\"s2\">rejected</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n\n    <span class=\"c1\">// global rejection tracking</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"nx\">pledge</span><span class=\"p\">[</span><span class=\"nx\">PledgeSymbol</span><span class=\"p\">.</span><span class=\"nx\">isHandled</span><span class=\"p\">])</span> <span class=\"p\">{</span>\n        <span class=\"c1\">// TODO: perform HostPromiseRejectionTracker(promise, \"reject\").</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">return</span> <span class=\"nx\">triggerPledgeReactions</span><span class=\"p\">(</span><span class=\"nx\">reactions</span><span class=\"p\">,</span> <span class=\"nx\">reason</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>After this addition, <code class=\"highlighter-rouge\">Pledge</code> objects will properly trigger stored fulfillment and rejection handlers whenever the handlers are added prior to the pledge resolving. Note that both <code class=\"highlighter-rouge\">fulfillPledge()</code> and <code class=\"highlighter-rouge\">rejectPledge()</code> remove all reactions from the <code class=\"highlighter-rouge\">Pledge</code> object in the process of changing the object’s state and triggering the reactions.</p>\n\n<h2 id=\"the-catch-method\">The <code class=\"highlighter-rouge\">catch()</code> method</h2>\n\n<p>If you always wondered if the <code class=\"highlighter-rouge\">catch()</code> method was just a shorthand for <code class=\"highlighter-rouge\">then()</code>, then you are correct. All <code class=\"highlighter-rouge\">catch()</code> does is call <code class=\"highlighter-rouge\">then()</code> with an <code class=\"highlighter-rouge\">undefined</code> first argument and the <code class=\"highlighter-rouge\">onRejected</code> handler as the second argument:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">export</span> <span class=\"kd\">class</span> <span class=\"nx\">Pledge</span> <span class=\"p\">{</span>\n\n    <span class=\"c1\">// constructor omitted for space</span>\n\n    <span class=\"kd\">static</span> <span class=\"kd\">get</span> <span class=\"p\">[</span><span class=\"nb\">Symbol</span><span class=\"p\">.</span><span class=\"nx\">species</span><span class=\"p\">]()</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"nx\">then</span><span class=\"p\">(</span><span class=\"nx\">onFulfilled</span><span class=\"p\">,</span> <span class=\"nx\">onRejected</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\n        <span class=\"nx\">assertIsPledge</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">);</span>\n\n        <span class=\"kd\">const</span> <span class=\"nx\">C</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"kd\">constructor</span><span class=\"p\">[</span><span class=\"nb\">Symbol</span><span class=\"p\">.</span><span class=\"nx\">species</span><span class=\"p\">];</span>\n        <span class=\"kd\">const</span> <span class=\"nx\">resultCapability</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">PledgeCapability</span><span class=\"p\">(</span><span class=\"nx\">C</span><span class=\"p\">);</span>\n        <span class=\"k\">return</span> <span class=\"nx\">performPledgeThen</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">,</span> <span class=\"nx\">onFulfilled</span><span class=\"p\">,</span> <span class=\"nx\">onRejected</span><span class=\"p\">,</span> <span class=\"nx\">resultCapability</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">catch</span><span class=\"p\">(</span><span class=\"nx\">onRejected</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">then</span><span class=\"p\">(</span><span class=\"kc\">undefined</span><span class=\"p\">,</span> <span class=\"nx\">onRejected</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"c1\">// other methods omitted for space</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>So yes, <code class=\"highlighter-rouge\">catch()</code> is really just a convenience method. The <code class=\"highlighter-rouge\">finally()</code> method, however, is more involved.</p>\n\n<h2 id=\"the-finally-method\">The <code class=\"highlighter-rouge\">finally()</code> method</h2>\n\n<p>The <code class=\"highlighter-rouge\">finally()</code> method was a late addition to the promises specification and works a bit differently than <code class=\"highlighter-rouge\">then()</code> and <code class=\"highlighter-rouge\">catch()</code>. Whereas both <code class=\"highlighter-rouge\">then()</code> and <code class=\"highlighter-rouge\">catch()</code> allow you to add handlers that will receive a value when the promise is settled, a handler added with <code class=\"highlighter-rouge\">finally()</code> does not receive a value. Instead, the promise returned from the call to <code class=\"highlighter-rouge\">finally()</code> is settled in the same as the first promise. For example, if a given promise is fulfilled, then the promise returned from <code class=\"highlighter-rouge\">finally()</code> is fulfilled with the same value:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">const</span> <span class=\"nx\">promise</span> <span class=\"o\">=</span> <span class=\"nb\">Promise</span><span class=\"p\">.</span><span class=\"nx\">resolve</span><span class=\"p\">(</span><span class=\"mi\">42</span><span class=\"p\">);</span>\n\n<span class=\"nx\">promise</span><span class=\"p\">.</span><span class=\"k\">finally</span><span class=\"p\">(()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">Original promise is settled.</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n<span class=\"p\">}).</span><span class=\"nx\">then</span><span class=\"p\">(</span><span class=\"nx\">value</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">value</span><span class=\"p\">);</span>     <span class=\"c1\">// 42</span>\n<span class=\"p\">});</span>\n</code></pre></div></div>\n\n<p>This example shows that calling <code class=\"highlighter-rouge\">finally()</code> on a promise that is resolved to <code class=\"highlighter-rouge\">42</code> will result in a promise that is also resolved to <code class=\"highlighter-rouge\">42</code>. These are two different promises but they are resolved to the same value.</p>\n\n<p>Similarly, if a promise is rejected, the the promise returned from <code class=\"highlighter-rouge\">finally()</code> will also be rejected, as in this example:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">const</span> <span class=\"nx\">promise</span> <span class=\"o\">=</span> <span class=\"nb\">Promise</span><span class=\"p\">.</span><span class=\"nx\">reject</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">Oops!</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n\n<span class=\"nx\">promise</span><span class=\"p\">.</span><span class=\"k\">finally</span><span class=\"p\">(()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">Original promise is settled.</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n<span class=\"p\">}).</span><span class=\"k\">catch</span><span class=\"p\">(</span><span class=\"nx\">reason</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">reason</span><span class=\"p\">);</span>     <span class=\"c1\">// \"Oops!\"</span>\n<span class=\"p\">});</span>\n</code></pre></div></div>\n\n<p>Here, <code class=\"highlighter-rouge\">promise</code> is rejected with a reason of <code class=\"highlighter-rouge\">\"Oops!\"</code>. The handler assigned with <code class=\"highlighter-rouge\">finally()</code> will execute first, outputting a message to the console, and the promise returned from <code class=\"highlighter-rouge\">finally()</code> is rejected to the same reason as <code class=\"highlighter-rouge\">promise</code>. This ability to pass on promise rejections through <code class=\"highlighter-rouge\">finally()</code> means that adding a <code class=\"highlighter-rouge\">finally()</code> handler does not count as handling a promise rejection. (If a rejected promise only has a <code class=\"highlighter-rouge\">finally()</code> handler then the JavaScript runtime will still output a message about an unhandled promise rejection. You still need to add a rejection handler with <code class=\"highlighter-rouge\">then()</code> or <code class=\"highlighter-rouge\">catch()</code> to avoid that message.)</p>\n\n<p>With a good understanding of <code class=\"highlighter-rouge\">finally()</code> works, it’s time to implement it.</p>\n\n<h3 id=\"implementing-the-finally-method\">Implementing the <code class=\"highlighter-rouge\">finally()</code> method</h3>\n\n<p>The first few steps of <code class=\"highlighter-rouge\">finally()</code><sup id=\"fnref:7\"><a href="https://humanwhocodes.com/feeds/\&quot;#fn:7\"" class=\"footnote\">7</a></sup> are the same as with <code class=\"highlighter-rouge\">then()</code>, which is to assert that <code class=\"highlighter-rouge\">this</code> is a promise and to retrieve the species constructor:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">export</span> <span class=\"kd\">class</span> <span class=\"nx\">Pledge</span> <span class=\"p\">{</span>\n\n    <span class=\"c1\">// constructor omitted for space</span>\n\n    <span class=\"kd\">static</span> <span class=\"kd\">get</span> <span class=\"p\">[</span><span class=\"nb\">Symbol</span><span class=\"p\">.</span><span class=\"nx\">species</span><span class=\"p\">]()</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">finally</span><span class=\"p\">(</span><span class=\"nx\">onFinally</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\n        <span class=\"nx\">assertIsPledge</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">);</span>\n\n        <span class=\"kd\">const</span> <span class=\"nx\">C</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"kd\">constructor</span><span class=\"p\">[</span><span class=\"nb\">Symbol</span><span class=\"p\">.</span><span class=\"nx\">species</span><span class=\"p\">];</span>\n\n        <span class=\"c1\">// TODO</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"c1\">// other methods omitted for space</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>After that, the specification defines two variables, <code class=\"highlighter-rouge\">thenFinally</code> and <code class=\"highlighter-rouge\">catchFinally</code>, which are the fulfillment and rejection handlers that will be passed to <code class=\"highlighter-rouge\">then()</code>. Just like <code class=\"highlighter-rouge\">catch()</code>, <code class=\"highlighter-rouge\">finally()</code> eventually calls the <code class=\"highlighter-rouge\">then()</code> method directly. The only question is what values will be passed. For instance, if the <code class=\"highlighter-rouge\">onFinally</code> argument isn’t callable, then <code class=\"highlighter-rouge\">thenFinally</code> and <code class=\"highlighter-rouge\">catchFinally</code> are set equal to <code class=\"highlighter-rouge\">onFinally</code> and no other work needs to be done:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">export</span> <span class=\"kd\">class</span> <span class=\"nx\">Pledge</span> <span class=\"p\">{</span>\n\n    <span class=\"c1\">// constructor omitted for space</span>\n\n    <span class=\"kd\">static</span> <span class=\"kd\">get</span> <span class=\"p\">[</span><span class=\"nb\">Symbol</span><span class=\"p\">.</span><span class=\"nx\">species</span><span class=\"p\">]()</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">finally</span><span class=\"p\">(</span><span class=\"nx\">onFinally</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\n        <span class=\"nx\">assertIsPledge</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">);</span>\n\n        <span class=\"kd\">const</span> <span class=\"nx\">C</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"kd\">constructor</span><span class=\"p\">[</span><span class=\"nb\">Symbol</span><span class=\"p\">.</span><span class=\"nx\">species</span><span class=\"p\">];</span>\n\n        <span class=\"kd\">let</span> <span class=\"nx\">thenFinally</span><span class=\"p\">,</span> <span class=\"nx\">catchFinally</span><span class=\"p\">;</span>\n\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"nx\">isCallable</span><span class=\"p\">(</span><span class=\"nx\">onFinally</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n            <span class=\"nx\">thenFinally</span> <span class=\"o\">=</span> <span class=\"nx\">onFinally</span><span class=\"p\">;</span>\n            <span class=\"nx\">catchFinally</span> <span class=\"o\">=</span> <span class=\"nx\">onFinally</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n\n            <span class=\"c1\">// TODO</span>\n\n        <span class=\"p\">}</span>\n\n        <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">then</span><span class=\"p\">(</span><span class=\"nx\">thenFinally</span><span class=\"p\">,</span> <span class=\"nx\">catchFinally</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"c1\">// other methods omitted for space</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>You might be confused as to why an uncallable <code class=\"highlighter-rouge\">onFinally</code> will be passed into <code class=\"highlighter-rouge\">then()</code>, as was I when I first read the specification. Remember that <code class=\"highlighter-rouge\">then()</code> ultimately delegates to <code class=\"highlighter-rouge\">performPledgeThen()</code>, which in turn sets any uncallable handlers to <code class=\"highlighter-rouge\">undefined</code>. So <code class=\"highlighter-rouge\">finally()</code> is relying on that validation step in <code class=\"highlighter-rouge\">performPledgeThen()</code> to ensure that uncallable handlers are never formally added.</p>\n\n<p>The next step is to define the values for <code class=\"highlighter-rouge\">thenFinally</code> and <code class=\"highlighter-rouge\">catchFinally</code> if <code class=\"highlighter-rouge\">onFinally</code> is callable. Each of these functions is defined in the specification as a sequence of steps to perform in order to pass on the settlement state and value from the first promise to the returned promise. The steps for <code class=\"highlighter-rouge\">thenFinally</code> are a bit difficult to decipher in the specification<sup id=\"fnref:8\"><a href="https://humanwhocodes.com/feeds/\&quot;#fn:8\"" class=\"footnote\">8</a></sup> but are really straight forward when you see the code:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">export</span> <span class=\"kd\">class</span> <span class=\"nx\">Pledge</span> <span class=\"p\">{</span>\n\n    <span class=\"c1\">// constructor omitted for space</span>\n\n    <span class=\"kd\">static</span> <span class=\"kd\">get</span> <span class=\"p\">[</span><span class=\"nb\">Symbol</span><span class=\"p\">.</span><span class=\"nx\">species</span><span class=\"p\">]()</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">finally</span><span class=\"p\">(</span><span class=\"nx\">onFinally</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\n        <span class=\"nx\">assertIsPledge</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">);</span>\n\n        <span class=\"kd\">const</span> <span class=\"nx\">C</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"kd\">constructor</span><span class=\"p\">[</span><span class=\"nb\">Symbol</span><span class=\"p\">.</span><span class=\"nx\">species</span><span class=\"p\">];</span>\n\n        <span class=\"kd\">let</span> <span class=\"nx\">thenFinally</span><span class=\"p\">,</span> <span class=\"nx\">catchFinally</span><span class=\"p\">;</span>\n\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"nx\">isCallable</span><span class=\"p\">(</span><span class=\"nx\">onFinally</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n            <span class=\"nx\">thenFinally</span> <span class=\"o\">=</span> <span class=\"nx\">onFinally</span><span class=\"p\">;</span>\n            <span class=\"nx\">catchFinally</span> <span class=\"o\">=</span> <span class=\"nx\">onFinally</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n\n            <span class=\"nx\">thenFinally</span> <span class=\"o\">=</span> <span class=\"nx\">value</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n                <span class=\"kd\">const</span> <span class=\"nx\">result</span> <span class=\"o\">=</span> <span class=\"nx\">onFinally</span><span class=\"p\">.</span><span class=\"nx\">apply</span><span class=\"p\">(</span><span class=\"kc\">undefined</span><span class=\"p\">);</span>\n                <span class=\"kd\">const</span> <span class=\"nx\">pledge</span> <span class=\"o\">=</span> <span class=\"nx\">pledgeResolve</span><span class=\"p\">(</span><span class=\"nx\">C</span><span class=\"p\">,</span> <span class=\"nx\">result</span><span class=\"p\">);</span>\n                <span class=\"kd\">const</span> <span class=\"nx\">valueThunk</span> <span class=\"o\">=</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">value</span><span class=\"p\">;</span>\n                <span class=\"k\">return</span> <span class=\"nx\">pledge</span><span class=\"p\">.</span><span class=\"nx\">then</span><span class=\"p\">(</span><span class=\"nx\">valueThunk</span><span class=\"p\">);</span>\n            <span class=\"p\">};</span>\n\n            <span class=\"c1\">// not used by included for completeness with spec</span>\n            <span class=\"nx\">thenFinally</span><span class=\"p\">.</span><span class=\"nx\">C</span> <span class=\"o\">=</span> <span class=\"nx\">C</span><span class=\"p\">;</span>\n            <span class=\"nx\">thenFinally</span><span class=\"p\">.</span><span class=\"nx\">onFinally</span> <span class=\"o\">=</span> <span class=\"nx\">onFinally</span><span class=\"p\">;</span>\n\n            <span class=\"c1\">// TODO</span>\n\n        <span class=\"p\">}</span>\n\n        <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">then</span><span class=\"p\">(</span><span class=\"nx\">thenFinally</span><span class=\"p\">,</span> <span class=\"nx\">catchFinally</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"c1\">// other methods omitted for space</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>Essentially, the <code class=\"highlighter-rouge\">thenFinally</code> value is a function that accepts the fulfilled value of the promise and then:</p>\n\n<ol>\n  <li>Calls <code class=\"highlighter-rouge\">onFinally()</code>.</li>\n  <li>Creates a resolved pledge with the result of step 1. (This result is ultimately discarded.)</li>\n  <li>Creates a function called <code class=\"highlighter-rouge\">valueThunk</code> that does nothing but return the fulfilled value.</li>\n  <li>Assigns <code class=\"highlighter-rouge\">valueThunk</code> as the fulfillment handler for the newly-created pledge and then returns the value.</li>\n</ol>\n\n<p>After that, references to <code class=\"highlighter-rouge\">C</code> and <code class=\"highlighter-rouge\">onFinally</code> are stored on the function, but as noted in the code, these aren’t necessary for the JavaScript implementation. In the specification, this is the way that the <code class=\"highlighter-rouge\">thenFinally</code> functions gets access to both <code class=\"highlighter-rouge\">C</code> and <code class=\"highlighter-rouge\">onFinally</code>. In JavaScript, I’m using a closure to get access to those values.</p>\n\n<p>The <code class=\"highlighter-rouge\">pledgeResolve()</code> function is straightforward and follows the algorithm described in the specification<sup id=\"fnref:9\"><a href="https://humanwhocodes.com/feeds/\&quot;#fn:9\"" class=\"footnote\">9</a></sup> almost exactly:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">function</span> <span class=\"nx\">pledgeResolve</span><span class=\"p\">(</span><span class=\"nx\">C</span><span class=\"p\">,</span> <span class=\"nx\">x</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\n    <span class=\"nx\">assertIsObject</span><span class=\"p\">(</span><span class=\"nx\">C</span><span class=\"p\">);</span>\n\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">isPledge</span><span class=\"p\">(</span><span class=\"nx\">x</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n        <span class=\"kd\">const</span> <span class=\"nx\">xConstructor</span> <span class=\"o\">=</span> <span class=\"nx\">x</span><span class=\"p\">.</span><span class=\"kd\">constructor</span><span class=\"p\">;</span>\n\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nb\">Object</span><span class=\"p\">.</span><span class=\"nx\">is</span><span class=\"p\">(</span><span class=\"nx\">xConstructor</span><span class=\"p\">,</span> <span class=\"nx\">C</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n            <span class=\"k\">return</span> <span class=\"nx\">x</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"kd\">const</span> <span class=\"nx\">pledgeCapability</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">PledgeCapability</span><span class=\"p\">(</span><span class=\"nx\">C</span><span class=\"p\">);</span>\n    <span class=\"nx\">pledgeCapability</span><span class=\"p\">.</span><span class=\"nx\">resolve</span><span class=\"p\">(</span><span class=\"nx\">x</span><span class=\"p\">);</span>\n    <span class=\"k\">return</span> <span class=\"nx\">pledgeCapability</span><span class=\"p\">.</span><span class=\"nx\">pledge</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>For the purposes of this post, it’s not important to get into the specifics of checking to see if <code class=\"highlighter-rouge\">x</code> is an instance of <code class=\"highlighter-rouge\">Pledge</code> because that value is never used within <code class=\"highlighter-rouge\">onFinally</code>. (This will be discussed, however, in my next post as it’s an important feature used in <code class=\"highlighter-rouge\">Promise.resolve()</code>.) Ultimately, the function creates a new <code class=\"highlighter-rouge\">PledgeCapability</code> so it can return a <code class=\"highlighter-rouge\">Pledge</code> instance.</p>\n\n<p>The steps to create <code class=\"highlighter-rouge\">catchFinally</code><sup id=\"fnref:10\"><a href="https://humanwhocodes.com/feeds/\&quot;#fn:10\"" class=\"footnote\">10</a></sup> are similar, but the end result is a function that throws a reason:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">export</span> <span class=\"kd\">class</span> <span class=\"nx\">Pledge</span> <span class=\"p\">{</span>\n\n    <span class=\"c1\">// constructor omitted for space</span>\n\n    <span class=\"kd\">static</span> <span class=\"kd\">get</span> <span class=\"p\">[</span><span class=\"nb\">Symbol</span><span class=\"p\">.</span><span class=\"nx\">species</span><span class=\"p\">]()</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">finally</span><span class=\"p\">(</span><span class=\"nx\">onFinally</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\n        <span class=\"nx\">assertIsPledge</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">);</span>\n\n        <span class=\"kd\">const</span> <span class=\"nx\">C</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"kd\">constructor</span><span class=\"p\">[</span><span class=\"nb\">Symbol</span><span class=\"p\">.</span><span class=\"nx\">species</span><span class=\"p\">];</span>\n\n        <span class=\"kd\">let</span> <span class=\"nx\">thenFinally</span><span class=\"p\">,</span> <span class=\"nx\">catchFinally</span><span class=\"p\">;</span>\n\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"nx\">isCallable</span><span class=\"p\">(</span><span class=\"nx\">onFinally</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n            <span class=\"nx\">thenFinally</span> <span class=\"o\">=</span> <span class=\"nx\">onFinally</span><span class=\"p\">;</span>\n            <span class=\"nx\">catchFinally</span> <span class=\"o\">=</span> <span class=\"nx\">onFinally</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n\n            <span class=\"nx\">thenFinally</span> <span class=\"o\">=</span> <span class=\"nx\">value</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n                <span class=\"kd\">const</span> <span class=\"nx\">result</span> <span class=\"o\">=</span> <span class=\"nx\">onFinally</span><span class=\"p\">.</span><span class=\"nx\">apply</span><span class=\"p\">(</span><span class=\"kc\">undefined</span><span class=\"p\">);</span>\n                <span class=\"kd\">const</span> <span class=\"nx\">pledge</span> <span class=\"o\">=</span> <span class=\"nx\">pledgeResolve</span><span class=\"p\">(</span><span class=\"nx\">C</span><span class=\"p\">,</span> <span class=\"nx\">result</span><span class=\"p\">);</span>\n                <span class=\"kd\">const</span> <span class=\"nx\">valueThunk</span> <span class=\"o\">=</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">value</span><span class=\"p\">;</span>\n                <span class=\"k\">return</span> <span class=\"nx\">pledge</span><span class=\"p\">.</span><span class=\"nx\">then</span><span class=\"p\">(</span><span class=\"nx\">valueThunk</span><span class=\"p\">);</span>\n            <span class=\"p\">};</span>\n\n            <span class=\"c1\">// not used by included for completeness with spec</span>\n            <span class=\"nx\">thenFinally</span><span class=\"p\">.</span><span class=\"nx\">C</span> <span class=\"o\">=</span> <span class=\"nx\">C</span><span class=\"p\">;</span>\n            <span class=\"nx\">thenFinally</span><span class=\"p\">.</span><span class=\"nx\">onFinally</span> <span class=\"o\">=</span> <span class=\"nx\">onFinally</span><span class=\"p\">;</span>\n\n            <span class=\"nx\">catchFinally</span> <span class=\"o\">=</span> <span class=\"nx\">reason</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n                <span class=\"kd\">const</span> <span class=\"nx\">result</span> <span class=\"o\">=</span> <span class=\"nx\">onFinally</span><span class=\"p\">.</span><span class=\"nx\">apply</span><span class=\"p\">(</span><span class=\"kc\">undefined</span><span class=\"p\">);</span>\n                <span class=\"kd\">const</span> <span class=\"nx\">pledge</span> <span class=\"o\">=</span> <span class=\"nx\">pledgeResolve</span><span class=\"p\">(</span><span class=\"nx\">C</span><span class=\"p\">,</span> <span class=\"nx\">result</span><span class=\"p\">);</span>\n                <span class=\"kd\">const</span> <span class=\"nx\">thrower</span> <span class=\"o\">=</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n                    <span class=\"k\">throw</span> <span class=\"nx\">reason</span><span class=\"p\">;</span>\n                <span class=\"p\">};</span>\n                <span class=\"k\">return</span> <span class=\"nx\">pledge</span><span class=\"p\">.</span><span class=\"nx\">then</span><span class=\"p\">(</span><span class=\"nx\">thrower</span><span class=\"p\">);</span>\n            <span class=\"p\">};</span>\n\n            <span class=\"c1\">// not used by included for completeness with spec</span>\n            <span class=\"nx\">catchFinally</span><span class=\"p\">.</span><span class=\"nx\">C</span> <span class=\"o\">=</span> <span class=\"nx\">C</span><span class=\"p\">;</span>\n            <span class=\"nx\">catchFinally</span><span class=\"p\">.</span><span class=\"nx\">onFinally</span> <span class=\"o\">=</span> <span class=\"nx\">onFinally</span><span class=\"p\">;</span>\n\n        <span class=\"p\">}</span>\n\n        <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">then</span><span class=\"p\">(</span><span class=\"nx\">thenFinally</span><span class=\"p\">,</span> <span class=\"nx\">catchFinally</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"c1\">// other methods omitted for space</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>You might be wondering why the <code class=\"highlighter-rouge\">catchFinally</code> function is calling <code class=\"highlighter-rouge\">pledge.then(thrower)</code> instead of <code class=\"highlighter-rouge\">pledge.catch(thrower)</code>. This is the way the specification defines this step to take place, and it really doesn’t matter whether you use <code class=\"highlighter-rouge\">then()</code> or <code class=\"highlighter-rouge\">catch()</code> because a handler that throws a value will always trigger a rejected promise.</p>\n\n<p>With this completed <code class=\"highlighter-rouge\">finally()</code> method, you can now see that when <code class=\"highlighter-rouge\">onFinally</code> is callable, the method creates a <code class=\"highlighter-rouge\">thenFinally</code> function that resolves to the same value as the original function and a <code class=\"highlighter-rouge\">catchFinally</code> function that throws any reason it receives. These two functions are then passed to <code class=\"highlighter-rouge\">then()</code> so that both fulfillment and rejection are handled in a way that mirrors the settled state of the original promise.</p>\n\n<h2 id=\"wrapping-up\">Wrapping Up</h2>\n\n<p>This post covered the internals of <code class=\"highlighter-rouge\">then()</code>, <code class=\"highlighter-rouge\">catch()</code>, and <code class=\"highlighter-rouge\">finally()</code>, with <code class=\"highlighter-rouge\">then()</code> containing most of the functionality of interest while <code class=\"highlighter-rouge\">catch()</code> and <code class=\"highlighter-rouge\">finally()</code> each delegate to <code class=\"highlighter-rouge\">then()</code>. Handling promise reactions is, without a doubt, the most complicated part of the promises specification. You should now have a good understanding that all reactions are executed asynchronously as jobs (microtasks) regardless of promise state. This understanding really is key to a good overall understanding of how promises work and when you should expect various handlers to be executed.</p>\n\n<p>In the next post in this series, I’ll cover creating settled promises with <code class=\"highlighter-rouge\">Promise.resolve()</code> and <code class=\"highlighter-rouge\">Promise.reject()</code>.</p>\n\n<p>All of this code is available in the <a href="https://humanwhocodes.com/feeds/\&quot;https://github.com/humanwhocodes/pledge\&quot;">Pledge</a> on GitHub. I hope you’ll download it and try it out to get a better understanding of promises.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n  <ol>\n    <li id=\"fn:1\">\n      <p><a href="https://humanwhocodes.com/feeds/\&quot;https://www.ecma-international.org/ecma-262/11.0/index.html#sec-promisecapability-records\"">PromiseCapability Records</a> <a href="https://humanwhocodes.com/feeds/\&quot;#fnref:1\"" class=\"reversefootnote\">&#8617;</a></p>\n    </li>\n    <li id=\"fn:2\">\n      <p><a href="https://humanwhocodes.com/feeds/\&quot;https://www.ecma-international.org/ecma-262/11.0/index.html#sec-newpromisecapability\"">NewPromiseCapability( C )</a> <a href="https://humanwhocodes.com/feeds/\&quot;#fnref:2\"" class=\"reversefootnote\">&#8617;</a></p>\n    </li>\n    <li id=\"fn:3\">\n      <p><a href="https://humanwhocodes.com/feeds/\&quot;https://www.ecma-international.org/ecma-262/11.0/index.html#sec-promise.prototype.then\"">Promise.prototype.then( onFulfilled, onRejected )</a> <a href="https://humanwhocodes.com/feeds/\&quot;#fnref:3\"" class=\"reversefootnote\">&#8617;</a></p>\n    </li>\n    <li id=\"fn:4\">\n      <p><a href="https://humanwhocodes.com/feeds/\&quot;https://www.ecma-international.org/ecma-262/11.0/index.html#sec-newpromisereactionjob\"">NewPromiseReactionJob( reaction, argument )</a> <a href="https://humanwhocodes.com/feeds/\&quot;#fnref:4\"" class=\"reversefootnote\">&#8617;</a></p>\n    </li>\n    <li id=\"fn:5\">\n      <p><a href="https://humanwhocodes.com/feeds/\&quot;https://www.ecma-international.org/ecma-262/11.0/index.html#sec-completion-record-specification-type\"">The Completion Record Specification Type</a> <a href="https://humanwhocodes.com/feeds/\&quot;#fnref:5\"" class=\"reversefootnote\">&#8617;</a></p>\n    </li>\n    <li id=\"fn:6\">\n      <p><a href="https://humanwhocodes.com/feeds/\&quot;https://www.ecma-international.org/ecma-262/11.0/index.html#sec-triggerpromisereactions\"">TriggerPromiseReactions( reactions, argument )</a> <a href="https://humanwhocodes.com/feeds/\&quot;#fnref:6\"" class=\"reversefootnote\">&#8617;</a></p>\n    </li>\n    <li id=\"fn:7\">\n      <p><a href="https://humanwhocodes.com/feeds/\&quot;https://www.ecma-international.org/ecma-262/11.0/index.html#sec-promise.prototype.finally\"">Promise.prototype.finally( onFinally )</a> <a href="https://humanwhocodes.com/feeds/\&quot;#fnref:7\"" class=\"reversefootnote\">&#8617;</a></p>\n    </li>\n    <li id=\"fn:8\">\n      <p><a href="https://humanwhocodes.com/feeds/\&quot;https://www.ecma-international.org/ecma-262/11.0/index.html#sec-thenfinallyfunctions\"">Then Finally Functions</a> <a href="https://humanwhocodes.com/feeds/\&quot;#fnref:8\"" class=\"reversefootnote\">&#8617;</a></p>\n    </li>\n    <li id=\"fn:9\">\n      <p><a href="https://humanwhocodes.com/feeds/\&quot;https://www.ecma-international.org/ecma-262/#sec-promise-resolve\"">PromiseResolve( C, x )</a> <a href="https://humanwhocodes.com/feeds/\&quot;#fnref:9\"" class=\"reversefootnote\">&#8617;</a></p>\n    </li>\n    <li id=\"fn:10\">\n      <p><a href="https://humanwhocodes.com/feeds/\&quot;https://www.ecma-international.org/ecma-262/11.0/index.html#sec-catchfinallyfunctions\"">Catch Finally Functions</a> <a href="https://humanwhocodes.com/feeds/\&quot;#fnref:10\"" class=\"reversefootnote\">&#8617;</a></p>\n    </li>\n  </ol>\n</div>\n",
            "url": "https://humanwhocodes.com/blog/2020/10/creating-javascript-promise-from-scratch-then-catch-finally/",
            
            
            
            "tags": ["JavaScript","Promises","ECMAScript 6"],
            
            "date_published": "2020-10-06T00:00:00+00:00",
            "date_modified": "2020-10-06T00:00:00+00:00",
            
                "author": 
                ""
                
            
        },
    
        {
            "id": "https://humanwhocodes.com/blog/2020/09/creating-javascript-promise-from-scratch-resolving-to-a-promise/",
            "title": "Creating a JavaScript promise from scratch, Part 2: Resolving to a promise",
            "summary": "In my first post of this series, I explained how the Promise constructor works by recreating it as the Pledge constructor. I noted in that post that there is nothing asynchronous about the constructor, and that all of the asynchronous operations happen later. In this post, I’ll cover how to resolve one promise to another promise, which will trigger asynchronous operations.",
            "content_text": "In my first post of this series, I explained how the Promise constructor works by recreating it as the Pledge constructor. I noted in that post that there is nothing asynchronous about the constructor, and that all of the asynchronous operations happen later. In this post, I’ll cover how to resolve one promise to another promise, which will trigger asynchronous operations.\n\nAs a reminder, this series is based on my promise library, Pledge. You can view and download all of the source code from GitHub.\n\nJobs and microtasks\n\nBefore getting into the implementation, it’s helpful to talk about the mechanics of asynchronous operations in promises. Asynchronous promise operations are defined in ECMA-262 as jobs1:\n\n\n  A Job is an abstract closure with no parameters that initiates an ECMAScript computation when no other ECMAScript computation is currently in progress.\n\n\nPut in simpler language, the specification says that a job is a function that executes when no other function is executing. But it’s the specifics of this process that are interesting. Here’s what the specification says1:\n\n\n  \n    At some future point in time, when there is no running execution context and the execution context stack is empty, the implementation must:\n      \n        Push an execution context onto the execution context stack.\n        Perform any implementation-defined preparation steps.\n        Call the abstract closure.\n        Perform any implementation-defined cleanup steps.\n        Pop the previously-pushed execution context from the execution context stack.&gt; &gt; * Only one Job may be actively undergoing evaluation at any point in time.\n      \n    \n    Once evaluation of a Job starts, it must run to completion before evaluation of any other Job starts.\n    The abstract closure must return a normal completion, implementing its own handling of errors.\n  \n\n\nIt’s easiest to think through this process by using an example. Suppose you have set up an onclick event handler on a button in a web page. When you click the button, a new execution context is pushed onto the execution context stack in order to run the event handler. Once the event handler has finished executing, the execution context is popped off the stack and the stack is now empty. This is the time when jobs are executed, before yielding back to the event loop that is waiting for more JavaScript to run.\n\nIn JavaScript engines, the button’s event handler is considered a task while a job is a considered a microtask. Any microtasks that are queued during a task are executed in the order in which they were queued immediately after the task completes. Fortunately for you and I, browsers, Node.js, and Deno have the queueMicrotask() function that implements the queueing of microtasks.\n\nThe queueMicrotask() function is defined in the HTML specification2 and accepts a single argument, which is the function to call as a microtask. For example:\n\nqueueMicrotask(() =&gt; {\n    console.log(\"Hi\");\n});\n\n\nThis example will output \"Hi\" to the console once the current task has completed. Keep in mind that microtasks will always execute before timers, which are created using either setTimeout() or setInterval(). Timers are implemented using tasks, not microtasks, and so will yield back to the event loop before they execute their tasks.\n\nTo make the code in Pledge look for like the specification, I’ve defined a hostEnqueuePledgeJob() function that simple calls queueMicrotask():\n\nexport function hostEnqueuePledgeJob(job) {\n    queueMicrotask(job);\n}\n\n\nThe NewPromiseResolveThenJob job\n\nIn my previous post, I stopped short of showing how to resolve a promise when another promise was passed to resolve. As opposed to non-thenable values, calling resolve with another promise means the first promise cannot be resolved until the second promise has been resolved, and to do that, you need NewPromiseResolveThenableJob().\n\nThe NewPromiseResolveThenableJob() accepts three arguments: the promise to resolve, the thenable that was passed to resolve, and the then() function to call. The job then attaches the resolve and reject functions for promise to resolve to the thenable’s then() method while catching any potential errors that might occur.\n\nTo implement NewPromiseResolveThenableJob(), I decided to use a class with a constructor that returns a function. This looks a little strange but will allow the code to look like you are creating a new job using the new operator instead of creating a function whose name begins with new (which I find strange). Here’s my implementation:\n\nexport class PledgeResolveThenableJob {\n    constructor(pledgeToResolve, thenable, then) {\n        return () =&gt; {\n            const { resolve, reject } = createResolvingFunctions(pledgeToResolve);\n            \n            try {\n                // same as thenable.then(resolve, reject)\n                then.apply(thenable, [resolve, reject]);\n            } catch (thenError) {\n                // same as reject(thenError)\n                reject.apply(undefined, [thenError]);\n            }\n        };\n    }\n}\n\n\nYou’ll note the use of createResolvingFunctions(), which was also used in the Pledge constructor. The call here creates a new set of resolve and reject functions that are separate from the original ones used inside of the constructor. Then, an attempt is made to attach those functions as fulfillment and rejection handlers on the thenable. The code looks a bit weird because I tried to make it look as close to the spec as possible, but really all it’s doing is thenable.then(resolve, reject). That code is wrapped in a try-catch just in case there’s an error that needs to be caught and passed to the reject function. Once again, the code looks a bit more complicated as I tried to capture the spirit of the specification, but ultimately all it’s doing is reject(thenError).\n\nNow you can go back and complete the definition of the resolve function inside of createResolvingFunctions() to trigger a PledgeResolveThenableJob as the last step:\n\nexport function createResolvingFunctions(pledge) {\n\n    const alreadyResolved = { value: false };\n\n    const resolve = resolution =&gt; {\n\n        if (alreadyResolved.value) {\n            return;\n        }\n\n        alreadyResolved.value = true;\n\n        // can't resolve to the same pledge\n        if (Object.is(resolution, pledge)) {\n            const selfResolutionError = new TypeError(\"Cannot resolve to self.\");\n            return rejectPledge(pledge, selfResolutionError);\n        }\n\n        // non-objects fulfill immediately\n        if (!isObject(resolution)) {\n            return fulfillPledge(pledge, resolution);\n        }\n\n        let thenAction;\n\n        try {\n            thenAction = resolution.then;\n        } catch (thenError) {\n            return rejectPledge(pledge, thenError);\n        }\n\n        // if the thenAction isn't callable then fulfill the pledge\n        if (!isCallable(thenAction)) {\n            return fulfillPledge(pledge, resolution);\n        }\n\n        /*\n         * If `thenAction` is callable, then we need to wait for the thenable\n         * to resolve before we can resolve this pledge.\n         */\n        const job = new PledgeResolveThenableJob(pledge, resolution, thenAction);\n        hostEnqueuePledgeJob(job);\n    };\n\n    // attach the record of resolution and the original pledge\n    resolve.alreadyResolved = alreadyResolved;\n    resolve.pledge = pledge;\n\n    // reject function omitted for ease of reading\n\n    return {\n        resolve,\n        reject\n    };\n}\n\n\nIf resolution is a thenable, then the PledgeResolveThenableJob is created and queued. That’s important, because anything a thenable is passed to resolve, it means that the promise isn’t resolved synchronously and you must wait for at least one microtask to complete.\n\nWrapping Up\n\nThe most important concept to grasp in this post is how jobs work and how they relate to microtasks in JavaScript runtimes. Jobs are a central part of promise functionality and in this post you learned how to use a job to resolve a promise to another promise. With that background, you’re ready to move into implementing then(), catch(), and finally(), all of which rely on the same type of job to trigger their handlers. That’s coming up in the next post in this series.\n\nRemember: All of this code is available in the Pledge on GitHub. I hope you’ll download it and try it out to get a better understanding of promises.\n\nReferences\n\n\n  \n    \n      Jobs and Host Operations to Enqueue Jobs &#8617; &#8617;2\n    \n    \n      Microtask queueing &#8617;\n    \n  \n\n",
            "content_html": "<p>In my <a href="https://humanwhocodes.com/feeds/\&quot;https://humanwhocodes.com/blog/2020/09/creating-javascript-promise-from-scratch-constructor/\&quot;">first post</a> of this series, I explained how the <code class=\"highlighter-rouge\">Promise</code> constructor works by recreating it as the <code class=\"highlighter-rouge\">Pledge</code> constructor. I noted in that post that there is nothing asynchronous about the constructor, and that all of the asynchronous operations happen later. In this post, I’ll cover how to resolve one promise to another promise, which will trigger asynchronous operations.</p>\n\n<p>As a reminder, this series is based on my promise library, <a href="https://humanwhocodes.com/feeds/\&quot;https://github.com/humanwhocodes/pledge\&quot;">Pledge</a>. You can view and download all of the source code from GitHub.</p>\n\n<h2 id=\"jobs-and-microtasks\">Jobs and microtasks</h2>\n\n<p>Before getting into the implementation, it’s helpful to talk about the mechanics of asynchronous operations in promises. Asynchronous promise operations are defined in ECMA-262 as <em>jobs</em><sup id=\"fnref:1\"><a href="https://humanwhocodes.com/feeds/\&quot;#fn:1\"" class=\"footnote\">1</a></sup>:</p>\n\n<blockquote>\n  <p>A <em>Job</em> is an abstract closure with no parameters that initiates an ECMAScript computation when no other ECMAScript computation is currently in progress.</p>\n</blockquote>\n\n<p>Put in simpler language, the specification says that a job is a function that executes when no other function is executing. But it’s the specifics of this process that are interesting. Here’s what the specification says<sup id=\"fnref:1:1\"><a href="https://humanwhocodes.com/feeds/\&quot;#fn:1\"" class=\"footnote\">1</a></sup>:</p>\n\n<blockquote>\n  <ul>\n    <li>At some future point in time, when there is no running execution context and the execution context stack is empty, the implementation must:\n      <ol>\n        <li>Push an execution context onto the execution context stack.</li>\n        <li>Perform any implementation-defined preparation steps.</li>\n        <li>Call the abstract closure.</li>\n        <li>Perform any implementation-defined cleanup steps.</li>\n        <li>Pop the previously-pushed execution context from the execution context stack.&gt; &gt; * Only one Job may be actively undergoing evaluation at any point in time.</li>\n      </ol>\n    </li>\n    <li>Once evaluation of a Job starts, it must run to completion before evaluation of any other Job starts.</li>\n    <li>The abstract closure must return a normal completion, implementing its own handling of errors.</li>\n  </ul>\n</blockquote>\n\n<p>It’s easiest to think through this process by using an example. Suppose you have set up an <code class=\"highlighter-rouge\">onclick</code> event handler on a button in a web page. When you click the button, a new execution context is pushed onto the execution context stack in order to run the event handler. Once the event handler has finished executing, the execution context is popped off the stack and the stack is now empty. This is the time when jobs are executed, before yielding back to the event loop that is waiting for more JavaScript to run.</p>\n\n<p>In JavaScript engines, the button’s event handler is considered a <em>task</em> while a job is a considered a <em>microtask</em>. Any microtasks that are queued during a task are executed in the order in which they were queued immediately after the task completes. Fortunately for you and I, browsers, Node.js, and Deno have the <code class=\"highlighter-rouge\">queueMicrotask()</code> function that implements the queueing of microtasks.</p>\n\n<p>The <code class=\"highlighter-rouge\">queueMicrotask()</code> function is defined in the HTML specification<sup id=\"fnref:2\"><a href="https://humanwhocodes.com/feeds/\&quot;#fn:2\"" class=\"footnote\">2</a></sup> and accepts a single argument, which is the function to call as a microtask. For example:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nx\">queueMicrotask</span><span class=\"p\">(()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">Hi</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n<span class=\"p\">});</span>\n</code></pre></div></div>\n\n<p>This example will output <code class=\"highlighter-rouge\">\"Hi\"</code> to the console once the current task has completed. Keep in mind that microtasks will always execute before <em>timers</em>, which are created using either <code class=\"highlighter-rouge\">setTimeout()</code> or <code class=\"highlighter-rouge\">setInterval()</code>. Timers are implemented using tasks, not microtasks, and so will yield back to the event loop before they execute their tasks.</p>\n\n<p>To make the code in Pledge look for like the specification, I’ve defined a <code class=\"highlighter-rouge\">hostEnqueuePledgeJob()</code> function that simple calls <code class=\"highlighter-rouge\">queueMicrotask()</code>:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">export</span> <span class=\"kd\">function</span> <span class=\"nx\">hostEnqueuePledgeJob</span><span class=\"p\">(</span><span class=\"nx\">job</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nx\">queueMicrotask</span><span class=\"p\">(</span><span class=\"nx\">job</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<h2 id=\"the-newpromiseresolvethenjob-job\">The <code class=\"highlighter-rouge\">NewPromiseResolveThenJob</code> job</h2>\n\n<p>In my previous post, I stopped short of showing how to resolve a promise when another promise was passed to <code class=\"highlighter-rouge\">resolve</code>. As opposed to non-thenable values, calling <code class=\"highlighter-rouge\">resolve</code> with another promise means the first promise cannot be resolved until the second promise has been resolved, and to do that, you need <code class=\"highlighter-rouge\">NewPromiseResolveThenableJob()</code>.</p>\n\n<p>The <code class=\"highlighter-rouge\">NewPromiseResolveThenableJob()</code> accepts three arguments: the promise to resolve, the thenable that was passed to <code class=\"highlighter-rouge\">resolve</code>, and the <code class=\"highlighter-rouge\">then()</code> function to call. The job then attaches the <code class=\"highlighter-rouge\">resolve</code> and <code class=\"highlighter-rouge\">reject</code> functions for promise to resolve to the thenable’s <code class=\"highlighter-rouge\">then()</code> method while catching any potential errors that might occur.</p>\n\n<p>To implement <code class=\"highlighter-rouge\">NewPromiseResolveThenableJob()</code>, I decided to use a class with a constructor that returns a function. This looks a little strange but will allow the code to look like you are creating a new job using the <code class=\"highlighter-rouge\">new</code> operator instead of creating a function whose name begins with <code class=\"highlighter-rouge\">new</code> (which I find strange). Here’s my implementation:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">export</span> <span class=\"kd\">class</span> <span class=\"nx\">PledgeResolveThenableJob</span> <span class=\"p\">{</span>\n    <span class=\"kd\">constructor</span><span class=\"p\">(</span><span class=\"nx\">pledgeToResolve</span><span class=\"p\">,</span> <span class=\"nx\">thenable</span><span class=\"p\">,</span> <span class=\"nx\">then</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n            <span class=\"kd\">const</span> <span class=\"p\">{</span> <span class=\"nx\">resolve</span><span class=\"p\">,</span> <span class=\"nx\">reject</span> <span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"nx\">createResolvingFunctions</span><span class=\"p\">(</span><span class=\"nx\">pledgeToResolve</span><span class=\"p\">);</span>\n            \n            <span class=\"k\">try</span> <span class=\"p\">{</span>\n                <span class=\"c1\">// same as thenable.then(resolve, reject)</span>\n                <span class=\"nx\">then</span><span class=\"p\">.</span><span class=\"nx\">apply</span><span class=\"p\">(</span><span class=\"nx\">thenable</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"nx\">resolve</span><span class=\"p\">,</span> <span class=\"nx\">reject</span><span class=\"p\">]);</span>\n            <span class=\"p\">}</span> <span class=\"k\">catch</span> <span class=\"p\">(</span><span class=\"nx\">thenError</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                <span class=\"c1\">// same as reject(thenError)</span>\n                <span class=\"nx\">reject</span><span class=\"p\">.</span><span class=\"nx\">apply</span><span class=\"p\">(</span><span class=\"kc\">undefined</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"nx\">thenError</span><span class=\"p\">]);</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">};</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>You’ll note the use of <code class=\"highlighter-rouge\">createResolvingFunctions()</code>, which was also used in the <code class=\"highlighter-rouge\">Pledge</code> constructor. The call here creates a new set of <code class=\"highlighter-rouge\">resolve</code> and <code class=\"highlighter-rouge\">reject</code> functions that are separate from the original ones used inside of the constructor. Then, an attempt is made to attach those functions as fulfillment and rejection handlers on the thenable. The code looks a bit weird because I tried to make it look as close to the spec as possible, but really all it’s doing is <code class=\"highlighter-rouge\">thenable.then(resolve, reject)</code>. That code is wrapped in a <code class=\"highlighter-rouge\">try-catch</code> just in case there’s an error that needs to be caught and passed to the <code class=\"highlighter-rouge\">reject</code> function. Once again, the code looks a bit more complicated as I tried to capture the spirit of the specification, but ultimately all it’s doing is <code class=\"highlighter-rouge\">reject(thenError)</code>.</p>\n\n<p>Now you can go back and complete the definition of the <code class=\"highlighter-rouge\">resolve</code> function inside of <code class=\"highlighter-rouge\">createResolvingFunctions()</code> to trigger a <code class=\"highlighter-rouge\">PledgeResolveThenableJob</code> as the last step:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">export</span> <span class=\"kd\">function</span> <span class=\"nx\">createResolvingFunctions</span><span class=\"p\">(</span><span class=\"nx\">pledge</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\n    <span class=\"kd\">const</span> <span class=\"nx\">alreadyResolved</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"na\">value</span><span class=\"p\">:</span> <span class=\"kc\">false</span> <span class=\"p\">};</span>\n\n    <span class=\"kd\">const</span> <span class=\"nx\">resolve</span> <span class=\"o\">=</span> <span class=\"nx\">resolution</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">alreadyResolved</span><span class=\"p\">.</span><span class=\"nx\">value</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"k\">return</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"nx\">alreadyResolved</span><span class=\"p\">.</span><span class=\"nx\">value</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"p\">;</span>\n\n        <span class=\"c1\">// can't resolve to the same pledge</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nb\">Object</span><span class=\"p\">.</span><span class=\"nx\">is</span><span class=\"p\">(</span><span class=\"nx\">resolution</span><span class=\"p\">,</span> <span class=\"nx\">pledge</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n            <span class=\"kd\">const</span> <span class=\"nx\">selfResolutionError</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">TypeError</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">Cannot resolve to self.</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n            <span class=\"k\">return</span> <span class=\"nx\">rejectPledge</span><span class=\"p\">(</span><span class=\"nx\">pledge</span><span class=\"p\">,</span> <span class=\"nx\">selfResolutionError</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"c1\">// non-objects fulfill immediately</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"nx\">isObject</span><span class=\"p\">(</span><span class=\"nx\">resolution</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n            <span class=\"k\">return</span> <span class=\"nx\">fulfillPledge</span><span class=\"p\">(</span><span class=\"nx\">pledge</span><span class=\"p\">,</span> <span class=\"nx\">resolution</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"kd\">let</span> <span class=\"nx\">thenAction</span><span class=\"p\">;</span>\n\n        <span class=\"k\">try</span> <span class=\"p\">{</span>\n            <span class=\"nx\">thenAction</span> <span class=\"o\">=</span> <span class=\"nx\">resolution</span><span class=\"p\">.</span><span class=\"nx\">then</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span> <span class=\"k\">catch</span> <span class=\"p\">(</span><span class=\"nx\">thenError</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"k\">return</span> <span class=\"nx\">rejectPledge</span><span class=\"p\">(</span><span class=\"nx\">pledge</span><span class=\"p\">,</span> <span class=\"nx\">thenError</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"c1\">// if the thenAction isn't callable then fulfill the pledge</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"nx\">isCallable</span><span class=\"p\">(</span><span class=\"nx\">thenAction</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n            <span class=\"k\">return</span> <span class=\"nx\">fulfillPledge</span><span class=\"p\">(</span><span class=\"nx\">pledge</span><span class=\"p\">,</span> <span class=\"nx\">resolution</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"cm\">/*\n         * If `thenAction` is callable, then we need to wait for the thenable\n         * to resolve before we can resolve this pledge.\n         */</span>\n        <span class=\"kd\">const</span> <span class=\"nx\">job</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">PledgeResolveThenableJob</span><span class=\"p\">(</span><span class=\"nx\">pledge</span><span class=\"p\">,</span> <span class=\"nx\">resolution</span><span class=\"p\">,</span> <span class=\"nx\">thenAction</span><span class=\"p\">);</span>\n        <span class=\"nx\">hostEnqueuePledgeJob</span><span class=\"p\">(</span><span class=\"nx\">job</span><span class=\"p\">);</span>\n    <span class=\"p\">};</span>\n\n    <span class=\"c1\">// attach the record of resolution and the original pledge</span>\n    <span class=\"nx\">resolve</span><span class=\"p\">.</span><span class=\"nx\">alreadyResolved</span> <span class=\"o\">=</span> <span class=\"nx\">alreadyResolved</span><span class=\"p\">;</span>\n    <span class=\"nx\">resolve</span><span class=\"p\">.</span><span class=\"nx\">pledge</span> <span class=\"o\">=</span> <span class=\"nx\">pledge</span><span class=\"p\">;</span>\n\n    <span class=\"c1\">// reject function omitted for ease of reading</span>\n\n    <span class=\"k\">return</span> <span class=\"p\">{</span>\n        <span class=\"nx\">resolve</span><span class=\"p\">,</span>\n        <span class=\"nx\">reject</span>\n    <span class=\"p\">};</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>If <code class=\"highlighter-rouge\">resolution</code> is a thenable, then the <code class=\"highlighter-rouge\">PledgeResolveThenableJob</code> is created and queued. That’s important, because anything a thenable is passed to <code class=\"highlighter-rouge\">resolve</code>, it means that the promise isn’t resolved synchronously and you must wait for at least one microtask to complete.</p>\n\n<h2 id=\"wrapping-up\">Wrapping Up</h2>\n\n<p>The most important concept to grasp in this post is how jobs work and how they relate to microtasks in JavaScript runtimes. Jobs are a central part of promise functionality and in this post you learned how to use a job to resolve a promise to another promise. With that background, you’re ready to move into implementing <code class=\"highlighter-rouge\">then()</code>, <code class=\"highlighter-rouge\">catch()</code>, and <code class=\"highlighter-rouge\">finally()</code>, all of which rely on the same type of job to trigger their handlers. That’s coming up in the <a href="https://humanwhocodes.com/feeds/\&quot;https://humanwhocodes.com/blog/2020/10/creating-javascript-promise-from-scratch-then-catch-finally/\&quot;">next post</a> in this series.</p>\n\n<p>Remember: All of this code is available in the <a href="https://humanwhocodes.com/feeds/\&quot;https://github.com/humanwhocodes/pledge\&quot;">Pledge</a> on GitHub. I hope you’ll download it and try it out to get a better understanding of promises.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n  <ol>\n    <li id=\"fn:1\">\n      <p><a href="https://humanwhocodes.com/feeds/\&quot;https://www.ecma-international.org/ecma-262/11.0/index.html#sec-jobs\"">Jobs and Host Operations to Enqueue Jobs</a> <a href="https://humanwhocodes.com/feeds/\&quot;#fnref:1\"" class=\"reversefootnote\">&#8617;</a> <a href="https://humanwhocodes.com/feeds/\&quot;#fnref:1:1\"" class=\"reversefootnote\">&#8617;<sup>2</sup></a></p>\n    </li>\n    <li id=\"fn:2\">\n      <p><a href="https://humanwhocodes.com/feeds/\&quot;https://html.spec.whatwg.org/multipage/timers-and-user-prompts.html#microtask-queuing\"">Microtask queueing</a> <a href="https://humanwhocodes.com/feeds/\&quot;#fnref:2\"" class=\"reversefootnote\">&#8617;</a></p>\n    </li>\n  </ol>\n</div>\n",
            "url": "https://humanwhocodes.com/blog/2020/09/creating-javascript-promise-from-scratch-resolving-to-a-promise/",
            
            
            
            "tags": ["JavaScript","Promises","ECMAScript 6"],
            
            "date_published": "2020-09-29T00:00:00+00:00",
            "date_modified": "2020-09-29T00:00:00+00:00",
            
                "author": 
                ""
                
            
        },
    
        {
            "id": "https://humanwhocodes.com/blog/2020/09/creating-javascript-promise-from-scratch-constructor/",
            "title": "Creating a JavaScript promise from scratch, Part 1: Constructor",
            "summary": "Early on in my career, I learned a lot by trying to recreate functionality I saw on websites. I found it helpful to investigate why something worked the way that it worked, and that lesson has stuck with me for decades. The best way to know if you really understand something is to take it apart and put it back together again. That’s why, when I decided to deepen my understanding of promises, I started thinking about creating promises from scratch.",
            "content_text": "Early on in my career, I learned a lot by trying to recreate functionality I saw on websites. I found it helpful to investigate why something worked the way that it worked, and that lesson has stuck with me for decades. The best way to know if you really understand something is to take it apart and put it back together again. That’s why, when I decided to deepen my understanding of promises, I started thinking about creating promises from scratch.\n\nYes, I wrote a book on ECMAScript 6 in which I covered promises, but at that time, promises were still very new and not yet implemented everywhere. I made my best guess as to how certain things worked but I never felt truly comfortable with my understanding. So, I decided to turn ECMA-262’s description of promises1 and implement that functionality from scratch.\n\nIn this series of posts, I’ll be digging into the internals of my promise library, Pledge. My hope is that exploring this code will help everyone understand how JavaScript promises work.\n\nAn Introduction to Pledge\n\nPledge is a standalone JavaScript library that implements the ECMA-262 promises specification. I chose the name “Pledge” instead of using “Promise” so that I could make it clear whether something was part of native promise functionality or if it was something in the library. As such, wherever the spec using the term “promise,”, I’ve replaced that with the word “pledge” in the library.\n\nIf I’ve implemented it correctly, the Pledge class should work the same as the native Promise class. Here’s an example:\n\nimport { Pledge } from \"https://unpkg.com/@humanwhocodes/pledge/dist/pledge.js\";\n\nconst pledge = new Pledge((resolve, reject) =&gt; {\n    resolve(42);\n\n    // or\n\n    reject(42);\n});\n\npledge.then(value =&gt; {\n    console.log(then);\n}).catch(reason =&gt; {\n    console.error(reason);\n}).finally(() =&gt; {\n    console.log(\"done\");\n});\n\n// create resolved pledges\nconst fulfilled = Pledge.resolve(42);\nconst rejected = Pledge.reject(new Error(\"Uh oh!\"));\n\n\nBeing able to see behind each code example has helped me understand promises a lot better, and I hope it will do the same for you.\n\nNote: This library is not intended for use in production. It’s intended only as an educational tool. There’s no reason not to use the native Promise functionality.\n\nInternal properties of a promise\n\nECMA-2622 specifies the following internal properties (called slots in the spec) for instances of Promise:\n\n\n  \n    \n      Internal Slot\n      Description\n    \n  \n  \n    \n      [[PromiseState]]\n      One of pending, fulfilled, or rejected. Governs how a promise will react to incoming calls to its then method.\n    \n    \n      [[PromiseResult]]\n      The value with which the promise has been fulfilled or rejected, if any. Only meaningful if [[PromiseState]] is not pending.\n    \n    \n      [[PromiseFulfillReactions]]\n      A List of PromiseReaction records to be processed when/if the promise transitions from the pending state to the fulfilled state.\n    \n    \n      [[PromiseRejectReactions]]\n      A List of PromiseReaction records to be processed when/if the promise transitions from the pending state to the rejected state.\n    \n    \n      [[PromiseIsHandled]]\n      A boolean indicating whether the promise has ever had a fulfillment or rejection handler; used in unhandled rejection tracking.\n    \n  \n\n\nBecause these properties are not supposed to be visible to developers but need to exist on the instances themselves for easy tracking and manipulation, I chose to use symbols for their identifiers and created the PledgeSymbol object as an easy way to reference them in various files:\n\nexport const PledgeSymbol = Object.freeze({\n    state: Symbol(\"PledgeState\"),\n    result: Symbol(\"PledgeResult\"),\n    isHandled: Symbol(\"PledgeIsHandled\"),\n    fulfillReactions: Symbol(\"PledgeFulfillReactions\"),\n    rejectReactions: Symbol(\"PledgeRejectReactions\")\n});\n\n\nWith PledgeSymbol now defined, it’s time to move on to creating the Pledge constructor.\n\nHow does the Promise constructor work?\n\nThe Promise constructor is used to create a new promise in JavaScript. You pass in a function (called the executor) that receives two arguments, resolve and reject which are functions that bring the promise’s lifecycle to completion. The resolve() function resolves the promise to some value (or no value) and the reject() function rejects the promise with a given reason (or no reason). For example:\n\nconst promise = new Promise((resolve, reject) =&gt; {\n    resolve(42);\n});\n\npromise.then(value =&gt; {\n    console.log(value);     // 42\n})\n\n\nThe executor is run immediately so the variable promise in this example is already fulfilled with the value 42 (the internal [[PromiseState]] property is Fulfilled). (If you used reject() instead of resolve(), then promise would be in a rejected state.)\n\nAdditionally, if the executor throws an error, then that error is caught and the promise is rejected, as in this example:\n\nconst promise = new Promise((resolve, reject) =&gt; {\n    throw new Error(\"Oops!\");\n});\n\npromise.catch(reason =&gt; {\n    console.log(reason.message);     // \"Oops!\"\n})\n\n\nA couple of other notes about how the constructor works:\n\n\n  If the executor is missing then an error is thrown\n  If the executor is not a function then an error is thrown\n\n\nIn both cases, the error is thrown as usual and does not result in a rejected promise.\n\nWith all of this background information, here’s what the code to implement these behaviors looks like:\n\nexport class Pledge {\n    constructor(executor) {\n\n        if (typeof executor === \"undefined\") {\n            throw new TypeError(\"Executor missing.\");\n        }\n\n        if (!isCallable(executor)) {\n            throw new TypeError(\"Executor must be a function.\");\n        }\n\n        // initialize properties\n        this[PledgeSymbol.state] = \"pending\";\n        this[PledgeSymbol.result] = undefined;\n        this[PledgeSymbol.isHandled] = false;\n        this[PledgeSymbol.fulfillReactions] = [];\n        this[PledgeSymbol.rejectReactions] = [];\n\n        const { resolve, reject } = createResolvingFunctions(this);\n\n        /*\n         * The executor is executed immediately. If it throws an error, then\n         * that is a rejection. The error should not be allowed to bubble\n         * out of this function.\n         */\n        try {\n            executor(resolve, reject);\n        } catch(error) {\n            reject(error);\n        }\n\n    }\n}\n\n\nAfter checking the validity of the executor argument, the constructor next initializes all of the internal properties by using PledgeSymbol. These properties are close approximations of what the specification describes, where a string is used for the state instead of an enum and the fulfill and reject reactions are instances of Array because there is no List class in JavaScript.\n\nNext, the resolve and reject functions used in the executor are created using the createResolvingFunctions() function. (I’ll go into detail about this function later in this post.) Last, the executor is run, passing in resolve and reject. It’s important to run the executor inside of a try-catch statement to ensure that any error results in a promise rejection rather than a thrown error.\n\nThe isCallable() function is just a helper function I created to make the code read more like the specification. Here’s the implementation:\n\nexport function isCallable(argument) {\n    return typeof argument === \"function\";\n}\n\n\nI think you’ll agree that the Pledge constructor itself is not very complicated and follows a fairly standard process of validating the input, initializing instance properties, and then performing some operations. The real work is done inside of createResolvingFunctions().\n\nCreating the resolving functions\n\nThe specification defines a CreateResolvingFunctions abstract operation3, which is a fancy way of saying that it’s a series of steps to perform as part of some other function or method. To make it easy to go back and forth between the specification and the Pledge library, I’ve opted to use the same name for an actual function. The details in the specification aren’t all relevant to implementing the code in JavaScript, so I’ve omitted or changed some parts. I’ve also kept some parts that may seem nonsensical within the context of JavaScript – I’ve done that intentionally, once again, for ease of going back and forth with the specification.\n\nThe createResolvingFunctions() function is responsible for creating the resolve and reject functions that are passed into the executor. However, this function is actually used elsewhere, as well, allowing any parts of the library to retrieve these functions in order to manipulate existing Pledge instances.\n\nTo start, the basic structure of the function is as follows:\n\nexport function createResolvingFunctions(pledge) {\n\n    // this \"record\" is used to track whether a Pledge is already resolved\n    const alreadyResolved = { value: false };\n\n    const resolve = resolution =&gt; {\n        // TODO\n    };\n\n    // attach the record of resolution and the original pledge\n    resolve.alreadyResolved = alreadyResolved;\n    resolve.pledge = pledge;\n\n    const reject = reason =&gt; {\n        // TODO\n    };\n\n    // attach the record of resolution and the original pledge\n    reject.alreadyResolved = alreadyResolved;\n    reject.pledge = pledge;\n\n    return {\n        resolve,\n        reject\n    };\n}\n\n\nThe first oddity of this function is the alreadyResolved object. The specification states that it’s a record, so I’ve chosen to implement it using an object. Doing so ensures the same value is being read and modified regardless of location (using a simple boolean value would not have allowed for this sharing if the value was being written to or read from the resolve and reject properties).\n\nThe specification also indicates that the resolve and reject functions should have properties containing alreadyResolved and the original promise (pledge). This is done so that the resolve and reject functions can access those values while executing. However, that’s not necessary in JavaScript because both functions are closures and can access those same values directly. I’ve opted to keep this detail in the code for completeness with the specification but they won’t actually be used.\n\nAs mentioned previously, the contents of each function is where most of the work is done. However, the functions vary in how complex they are. I’ll start by describing the reject function, as that is a great deal simpler than resolve.\n\nCreating the reject function\n\nThe reject function accepts a single argument, the reason for the rejection, and places the promise in a rejected state. That means any rejection handlers added using then() or catch() will be executed. The first step in that process is to ensure that the promise hasn’t already been resolved, so you check the value of alreadyResolved.value, and if true, just return without doing anything. If alreadyResolved.value is false then you can continue on and the value to true. This ensures that this set of resolve and reject handlers can only be called once. After that, you can continue on change the internal state of the promise. Here’s what that function looks like in the Pledge library:\n\nexport function createResolvingFunctions(pledge) {\n\n    const alreadyResolved = { value: false };\n\n    // resolve function omitted for ease of reading\n\n    const reject = reason =&gt; {\n\n        if (alreadyResolved.value) {\n            return;\n        }\n\n        alreadyResolved.value = true;\n\n        return rejectPledge(pledge, reason);\n    };\n\n    reject.pledge = pledge;\n    reject.alreadyResolved = alreadyResolved;\n\n    return {\n        resolve,\n        reject\n    };\n}\n\n\nThe rejectPledge() function is another abstract operation from the specification4 that is used in multiple places and is responsible for changing the internal state of a promise. Here’s the steps directly from the specification:\n\n\n  Assert: The value of promise.[[PromiseState]] is pending.\n  Let reactions be promise.[[PromiseRejectReactions]].\n  Set promise.[[PromiseResult]] to reason.\n  Set promise.[[PromiseFulfillReactions]] to undefined.\n  Set promise.[[PromiseRejectReactions]] to undefined.\n  Set promise.[[PromiseState]] to rejected.\n  If promise.[[PromiseIsHandled]] is false, perform HostPromiseRejectionTracker(promise, \"reject\").\n  Return TriggerPromiseReactions(reactions, reason).\n\n\nFor the time being, I’m going to skip steps 7 and 8, as those are concepts I’ll cover later in this series of blog posts. The rest can be almost directly translated into JavaScript code like this:\n\nexport function rejectPledge(pledge, reason) {\n\n    if (pledge[PledgeSymbol.state] !== \"pending\") {\n        throw new Error(\"Pledge is already settled.\");\n    }\n\n    const reactions = pledge[PledgeSymbol.rejectReactions];\n\n    pledge[PledgeSymbol.result] = reason;\n    pledge[PledgeSymbol.fulfillReactions] = undefined;\n    pledge[PledgeSymbol.rejectReactions] = undefined;\n    pledge[PledgeSymbol.state] = \"rejected\";\n\n    if (!pledge[PledgeSymbol.isHandled]) {\n        // TODO: perform HostPromiseRejectionTracker(promise, \"reject\").\n    }\n\n    // TODO: Return `TriggerPromiseReactions(reactions, reason)`.\n}\n\n\nAll rejectPledge() is really doing is setting the various internal properties to the appropriate values for a rejection and then triggering the reject reactions. Once you understand that promises are being ruled by their internal properties, they become a lot less mysterious.\n\nThe next step is to implement the resolve function, which is quite a bit more involved than reject but fundamentally is still modifying internal state.\n\nCreating the resolve function\n\nI’ve saved the resolve function for last due to the number of steps involved. If you’re unfamiliar with promises, you may wonder why it’s more complicated than reject, as they should be doing most of the same steps but with different values. The complexity comes due to the different ways resolve handles different types of values:\n\n\n  If the resolution value is the promise itself, then throw an error.\n  If the resolution value is a non-object, then fulfill the promise with the resolution value.\n  If the resolution value is an object with a then property:\n    \n      If the then property is not a method, then fulfill the promise with the resolution value.\n      If the then property is a method (that makes the object a thenable), then call then with both a fulfillment and a rejection handler that will resolve or reject the promise.\n    \n  \n\n\nSo the resolve function only fulfills a promise immediately in the case of a non-object resolution value or a resolution value that is an object but doesn’t have a callable then property. If a second promise is passed to resolve then the original promise can’t be settled (either fulfilled or rejected) until the second promise is settled. Here’s what the code looks like:\n\nexport function createResolvingFunctions(pledge) {\n\n    const alreadyResolved = { value: false };\n\n    const resolve = resolution =&gt; {\n\n        if (alreadyResolved.value) {\n            return;\n        }\n\n        alreadyResolved.value = true;\n\n        // can't resolve to the same pledge\n        if (Object.is(resolution, pledge)) {\n            const selfResolutionError = new TypeError(\"Cannot resolve to self.\");\n            return rejectPledge(pledge, selfResolutionError);\n        }\n\n        // non-objects fulfill immediately\n        if (!isObject(resolution)) {\n            return fulfillPledge(pledge, resolution);\n        }\n\n        let thenAction;\n\n        /*\n         * At this point, we know `resolution` is an object. If the object\n         * is a thenable, then we need to wait until the thenable is resolved\n         * before resolving the original pledge.\n         * \n         * The `try-catch` is because retrieving the `then` property may cause\n         * an error if it has a getter and any errors must be caught and used\n         * to reject the pledge.\n         */\n        try {\n            thenAction = resolution.then;\n        } catch (thenError) {\n            return rejectPledge(pledge, thenError);\n        }\n\n        // if the thenAction isn't callable then fulfill the pledge\n        if (!isCallable(thenAction)) {\n            return fulfillPledge(pledge, resolution);\n        }\n\n        /*\n         * If `thenAction` is callable, then we need to wait for the thenable\n         * to resolve before we can resolve this pledge.\n         */\n\n        // TODO: Let job be NewPromiseResolveThenableJob(promise, resolution, thenAction).\n        // TODO: Perform HostEnqueuePromiseJob(job.[[Job]], job.[[Realm]]).\n    };\n\n    // attach the record of resolution and the original pledge\n    resolve.alreadyResolved = alreadyResolved;\n    resolve.pledge = pledge;\n\n    // reject function omitted for ease of reading\n\n    return {\n        resolve,\n        reject\n    };\n}\n\n\nAs with the reject function, the first step in the resolve function is to check the value of alreadyResolved.value and either return immediately if true or set to true. After that, the resolution value needs to be checked to see what action to take. The last step in the resolve function (marked with TODO comments) is for the case of a thenable that needs handlers attached. This will be discussed in my next post.\n\nThe fulfillPledge() function referenced in the resolve function looks a lot like the rejectPledge() function referenced in the reject function and simply sets the internal state:\n\nexport function fulfillPledge(pledge, value) {\n\n    if (pledge[PledgeSymbol.state] !== \"pending\") {\n        throw new Error(\"Pledge is already settled.\");\n    }\n\n    const reactions = pledge[PledgeSymbol.fulfillReactions];\n\n    pledge[PledgeSymbol.result] = value;\n    pledge[PledgeSymbol.fulfillReactions] = undefined;\n    pledge[PledgeSymbol.rejectReactions] = undefined;\n    pledge[PledgeSymbol.state] = \"fulfilled\";\n\n    // TODO: Return `TriggerPromiseReactions(reactions, reason)`.\n}\n\n\nAs with rejectPledge(), I’m leaving off the TriggerPromiseReactions operations for discussion in a later post.\n\nWrapping Up\n\nAt this point, you should have a good understanding of how a Promise constructor works. The most important thing to remember is that every operation so far is synchronous; there is no asynchronous operation until we start dealing with other operations, such as then(), catch(), and finally(), which will be covered later in this series. When you create a new instance of Promise and pass in an executor, that executor is run immediately, and if either resolve or reject is called synchronously, then the newly created promise is already fulfilled or rejected, respectively. It’s only what happens after that point where you get into asynchronous operations, and asynchronous operations are discussed in the next post.\n\nAll of this code is available in the Pledge on GitHub. I hope you’ll download it and try it out to get a better understanding of promises.\n\nReferences\n\n\n  \n    \n      Promise Objects &#8617;\n    \n    \n      Properties of Promise instances &#8617;\n    \n    \n      CreateResolvingFunctions(promise) &#8617;\n    \n    \n      RejectPromise(promise, reason) &#8617;\n    \n  \n\n",
            "content_html": "<p>Early on in my career, I learned a lot by trying to recreate functionality I saw on websites. I found it helpful to investigate why something worked the way that it worked, and that lesson has stuck with me for decades. The best way to know if you really understand something is to take it apart and put it back together again. That’s why, when I decided to deepen my understanding of promises, I started thinking about creating promises from scratch.</p>\n\n<p>Yes, I wrote a book on ECMAScript 6 in which I covered promises, but at that time, promises were still very new and not yet implemented everywhere. I made my best guess as to how certain things worked but I never felt truly comfortable with my understanding. So, I decided to turn ECMA-262’s description of promises<sup id=\"fnref:1\"><a href="https://humanwhocodes.com/feeds/\&quot;#fn:1\"" class=\"footnote\">1</a></sup> and implement that functionality from scratch.</p>\n\n<p>In this series of posts, I’ll be digging into the internals of my promise library, <a href="https://humanwhocodes.com/feeds/\&quot;https://github.com/humanwhocodes/pledge\&quot;">Pledge</a>. My hope is that exploring this code will help everyone understand how JavaScript promises work.</p>\n\n<h2 id=\"an-introduction-to-pledge\">An Introduction to Pledge</h2>\n\n<p>Pledge is a standalone JavaScript library that implements the ECMA-262 promises specification. I chose the name “Pledge” instead of using “Promise” so that I could make it clear whether something was part of native promise functionality or if it was something in the library. As such, wherever the spec using the term “promise,”, I’ve replaced that with the word “pledge” in the library.</p>\n\n<p>If I’ve implemented it correctly, the <code class=\"highlighter-rouge\">Pledge</code> class should work the same as the native <code class=\"highlighter-rouge\">Promise</code> class. Here’s an example:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">Pledge</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">\"</span><span class=\"s2\">https://unpkg.com/@humanwhocodes/pledge/dist/pledge.js</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">pledge</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">Pledge</span><span class=\"p\">((</span><span class=\"nx\">resolve</span><span class=\"p\">,</span> <span class=\"nx\">reject</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nx\">resolve</span><span class=\"p\">(</span><span class=\"mi\">42</span><span class=\"p\">);</span>\n\n    <span class=\"c1\">// or</span>\n\n    <span class=\"nx\">reject</span><span class=\"p\">(</span><span class=\"mi\">42</span><span class=\"p\">);</span>\n<span class=\"p\">});</span>\n\n<span class=\"nx\">pledge</span><span class=\"p\">.</span><span class=\"nx\">then</span><span class=\"p\">(</span><span class=\"nx\">value</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">then</span><span class=\"p\">);</span>\n<span class=\"p\">}).</span><span class=\"k\">catch</span><span class=\"p\">(</span><span class=\"nx\">reason</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">error</span><span class=\"p\">(</span><span class=\"nx\">reason</span><span class=\"p\">);</span>\n<span class=\"p\">}).</span><span class=\"k\">finally</span><span class=\"p\">(()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">done</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n<span class=\"p\">});</span>\n\n<span class=\"c1\">// create resolved pledges</span>\n<span class=\"kd\">const</span> <span class=\"nx\">fulfilled</span> <span class=\"o\">=</span> <span class=\"nx\">Pledge</span><span class=\"p\">.</span><span class=\"nx\">resolve</span><span class=\"p\">(</span><span class=\"mi\">42</span><span class=\"p\">);</span>\n<span class=\"kd\">const</span> <span class=\"nx\">rejected</span> <span class=\"o\">=</span> <span class=\"nx\">Pledge</span><span class=\"p\">.</span><span class=\"nx\">reject</span><span class=\"p\">(</span><span class=\"k\">new</span> <span class=\"nb\">Error</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">Uh oh!</span><span class=\"dl\">\"</span><span class=\"p\">));</span>\n</code></pre></div></div>\n\n<p>Being able to see behind each code example has helped me understand promises a lot better, and I hope it will do the same for you.</p>\n\n<p><strong>Note:</strong> This library is not intended for use in production. It’s intended only as an educational tool. There’s no reason not to use the native <code class=\"highlighter-rouge\">Promise</code> functionality.</p>\n\n<h2 id=\"internal-properties-of-a-promise\">Internal properties of a promise</h2>\n\n<p>ECMA-262<sup id=\"fnref:2\"><a href="https://humanwhocodes.com/feeds/\&quot;#fn:2\"" class=\"footnote\">2</a></sup> specifies the following internal properties (called <em>slots</em> in the spec) for instances of <code class=\"highlighter-rouge\">Promise</code>:</p>\n\n<table>\n  <thead>\n    <tr>\n      <th><strong>Internal Slot</strong></th>\n      <th><strong>Description</strong></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><code class=\"highlighter-rouge\">[[PromiseState]]</code></td>\n      <td>One of <code class=\"highlighter-rouge\">pending</code>, <code class=\"highlighter-rouge\">fulfilled</code>, or <code class=\"highlighter-rouge\">rejected</code>. Governs how a promise will react to incoming calls to its then method.</td>\n    </tr>\n    <tr>\n      <td><code class=\"highlighter-rouge\">[[PromiseResult]]</code></td>\n      <td>The value with which the promise has been fulfilled or rejected, if any. Only meaningful if <code class=\"highlighter-rouge\">[[PromiseState]]</code> is not <code class=\"highlighter-rouge\">pending</code>.</td>\n    </tr>\n    <tr>\n      <td><code class=\"highlighter-rouge\">[[PromiseFulfillReactions]]</code></td>\n      <td>A <code class=\"highlighter-rouge\">List</code> of <code class=\"highlighter-rouge\">PromiseReaction</code> records to be processed when/if the promise transitions from the pending state to the fulfilled state.</td>\n    </tr>\n    <tr>\n      <td><code class=\"highlighter-rouge\">[[PromiseRejectReactions]]</code></td>\n      <td>A <code class=\"highlighter-rouge\">List</code> of <code class=\"highlighter-rouge\">PromiseReaction</code> records to be processed when/if the promise transitions from the pending state to the rejected state.</td>\n    </tr>\n    <tr>\n      <td><code class=\"highlighter-rouge\">[[PromiseIsHandled]]</code></td>\n      <td>A boolean indicating whether the promise has ever had a fulfillment or rejection handler; used in unhandled rejection tracking.</td>\n    </tr>\n  </tbody>\n</table>\n\n<p>Because these properties are not supposed to be visible to developers but need to exist on the instances themselves for easy tracking and manipulation, I chose to use symbols for their identifiers and created the <code class=\"highlighter-rouge\">PledgeSymbol</code> object as an easy way to reference them in various files:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">export</span> <span class=\"kd\">const</span> <span class=\"nx\">PledgeSymbol</span> <span class=\"o\">=</span> <span class=\"nb\">Object</span><span class=\"p\">.</span><span class=\"nx\">freeze</span><span class=\"p\">({</span>\n    <span class=\"na\">state</span><span class=\"p\">:</span> <span class=\"nb\">Symbol</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">PledgeState</span><span class=\"dl\">\"</span><span class=\"p\">),</span>\n    <span class=\"na\">result</span><span class=\"p\">:</span> <span class=\"nb\">Symbol</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">PledgeResult</span><span class=\"dl\">\"</span><span class=\"p\">),</span>\n    <span class=\"na\">isHandled</span><span class=\"p\">:</span> <span class=\"nb\">Symbol</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">PledgeIsHandled</span><span class=\"dl\">\"</span><span class=\"p\">),</span>\n    <span class=\"na\">fulfillReactions</span><span class=\"p\">:</span> <span class=\"nb\">Symbol</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">PledgeFulfillReactions</span><span class=\"dl\">\"</span><span class=\"p\">),</span>\n    <span class=\"na\">rejectReactions</span><span class=\"p\">:</span> <span class=\"nb\">Symbol</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">PledgeRejectReactions</span><span class=\"dl\">\"</span><span class=\"p\">)</span>\n<span class=\"p\">});</span>\n</code></pre></div></div>\n\n<p>With <code class=\"highlighter-rouge\">PledgeSymbol</code> now defined, it’s time to move on to creating the <code class=\"highlighter-rouge\">Pledge</code> constructor.</p>\n\n<h2 id=\"how-does-the-promise-constructor-work\">How does the <code class=\"highlighter-rouge\">Promise</code> constructor work?</h2>\n\n<p>The <code class=\"highlighter-rouge\">Promise</code> constructor is used to create a new promise in JavaScript. You pass in a function (called the <em>executor</em>) that receives two arguments, <code class=\"highlighter-rouge\">resolve</code> and <code class=\"highlighter-rouge\">reject</code> which are functions that bring the promise’s lifecycle to completion. The <code class=\"highlighter-rouge\">resolve()</code> function resolves the promise to some value (or no value) and the <code class=\"highlighter-rouge\">reject()</code> function rejects the promise with a given reason (or no reason). For example:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">const</span> <span class=\"nx\">promise</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nb\">Promise</span><span class=\"p\">((</span><span class=\"nx\">resolve</span><span class=\"p\">,</span> <span class=\"nx\">reject</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nx\">resolve</span><span class=\"p\">(</span><span class=\"mi\">42</span><span class=\"p\">);</span>\n<span class=\"p\">});</span>\n\n<span class=\"nx\">promise</span><span class=\"p\">.</span><span class=\"nx\">then</span><span class=\"p\">(</span><span class=\"nx\">value</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">value</span><span class=\"p\">);</span>     <span class=\"c1\">// 42</span>\n<span class=\"p\">})</span>\n</code></pre></div></div>\n\n<p>The executor is run immediately so the variable <code class=\"highlighter-rouge\">promise</code> in this example is already fulfilled with the value <code class=\"highlighter-rouge\">42</code> (the internal <code class=\"highlighter-rouge\">[[PromiseState]]</code> property is <code class=\"highlighter-rouge\">Fulfilled</code>). (If you used <code class=\"highlighter-rouge\">reject()</code> instead of <code class=\"highlighter-rouge\">resolve()</code>, then <code class=\"highlighter-rouge\">promise</code> would be in a rejected state.)</p>\n\n<p>Additionally, if the executor throws an error, then that error is caught and the promise is rejected, as in this example:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">const</span> <span class=\"nx\">promise</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nb\">Promise</span><span class=\"p\">((</span><span class=\"nx\">resolve</span><span class=\"p\">,</span> <span class=\"nx\">reject</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"k\">throw</span> <span class=\"k\">new</span> <span class=\"nb\">Error</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">Oops!</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n<span class=\"p\">});</span>\n\n<span class=\"nx\">promise</span><span class=\"p\">.</span><span class=\"k\">catch</span><span class=\"p\">(</span><span class=\"nx\">reason</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">reason</span><span class=\"p\">.</span><span class=\"nx\">message</span><span class=\"p\">);</span>     <span class=\"c1\">// \"Oops!\"</span>\n<span class=\"p\">})</span>\n</code></pre></div></div>\n\n<p>A couple of other notes about how the constructor works:</p>\n\n<ol>\n  <li>If the executor is missing then an error is thrown</li>\n  <li>If the executor is not a function then an error is thrown</li>\n</ol>\n\n<p>In both cases, the error is thrown as usual and does not result in a rejected promise.</p>\n\n<p>With all of this background information, here’s what the code to implement these behaviors looks like:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">export</span> <span class=\"kd\">class</span> <span class=\"nx\">Pledge</span> <span class=\"p\">{</span>\n    <span class=\"kd\">constructor</span><span class=\"p\">(</span><span class=\"nx\">executor</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"k\">typeof</span> <span class=\"nx\">executor</span> <span class=\"o\">===</span> <span class=\"dl\">\"</span><span class=\"s2\">undefined</span><span class=\"dl\">\"</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"k\">throw</span> <span class=\"k\">new</span> <span class=\"nx\">TypeError</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">Executor missing.</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"nx\">isCallable</span><span class=\"p\">(</span><span class=\"nx\">executor</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n            <span class=\"k\">throw</span> <span class=\"k\">new</span> <span class=\"nx\">TypeError</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">Executor must be a function.</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"c1\">// initialize properties</span>\n        <span class=\"k\">this</span><span class=\"p\">[</span><span class=\"nx\">PledgeSymbol</span><span class=\"p\">.</span><span class=\"nx\">state</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"dl\">\"</span><span class=\"s2\">pending</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n        <span class=\"k\">this</span><span class=\"p\">[</span><span class=\"nx\">PledgeSymbol</span><span class=\"p\">.</span><span class=\"nx\">result</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">undefined</span><span class=\"p\">;</span>\n        <span class=\"k\">this</span><span class=\"p\">[</span><span class=\"nx\">PledgeSymbol</span><span class=\"p\">.</span><span class=\"nx\">isHandled</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">false</span><span class=\"p\">;</span>\n        <span class=\"k\">this</span><span class=\"p\">[</span><span class=\"nx\">PledgeSymbol</span><span class=\"p\">.</span><span class=\"nx\">fulfillReactions</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[];</span>\n        <span class=\"k\">this</span><span class=\"p\">[</span><span class=\"nx\">PledgeSymbol</span><span class=\"p\">.</span><span class=\"nx\">rejectReactions</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[];</span>\n\n        <span class=\"kd\">const</span> <span class=\"p\">{</span> <span class=\"nx\">resolve</span><span class=\"p\">,</span> <span class=\"nx\">reject</span> <span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"nx\">createResolvingFunctions</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">);</span>\n\n        <span class=\"cm\">/*\n         * The executor is executed immediately. If it throws an error, then\n         * that is a rejection. The error should not be allowed to bubble\n         * out of this function.\n         */</span>\n        <span class=\"k\">try</span> <span class=\"p\">{</span>\n            <span class=\"nx\">executor</span><span class=\"p\">(</span><span class=\"nx\">resolve</span><span class=\"p\">,</span> <span class=\"nx\">reject</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span> <span class=\"k\">catch</span><span class=\"p\">(</span><span class=\"nx\">error</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"nx\">reject</span><span class=\"p\">(</span><span class=\"nx\">error</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span>\n\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>After checking the validity of the <code class=\"highlighter-rouge\">executor</code> argument, the constructor next initializes all of the internal properties by using <code class=\"highlighter-rouge\">PledgeSymbol</code>. These properties are close approximations of what the specification describes, where a string is used for the state instead of an enum and the fulfill and reject reactions are instances of <code class=\"highlighter-rouge\">Array</code> because there is no <code class=\"highlighter-rouge\">List</code> class in JavaScript.</p>\n\n<p>Next, the <code class=\"highlighter-rouge\">resolve</code> and <code class=\"highlighter-rouge\">reject</code> functions used in the executor are created using the <code class=\"highlighter-rouge\">createResolvingFunctions()</code> function. (I’ll go into detail about this function later in this post.) Last, the executor is run, passing in <code class=\"highlighter-rouge\">resolve</code> and <code class=\"highlighter-rouge\">reject</code>. It’s important to run the executor inside of a <code class=\"highlighter-rouge\">try-catch</code> statement to ensure that any error results in a promise rejection rather than a thrown error.</p>\n\n<p>The <code class=\"highlighter-rouge\">isCallable()</code> function is just a helper function I created to make the code read more like the specification. Here’s the implementation:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">export</span> <span class=\"kd\">function</span> <span class=\"nx\">isCallable</span><span class=\"p\">(</span><span class=\"nx\">argument</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"k\">typeof</span> <span class=\"nx\">argument</span> <span class=\"o\">===</span> <span class=\"dl\">\"</span><span class=\"s2\">function</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>I think you’ll agree that the <code class=\"highlighter-rouge\">Pledge</code> constructor itself is not very complicated and follows a fairly standard process of validating the input, initializing instance properties, and then performing some operations. The real work is done inside of <code class=\"highlighter-rouge\">createResolvingFunctions()</code>.</p>\n\n<h2 id=\"creating-the-resolving-functions\">Creating the resolving functions</h2>\n\n<p>The specification defines a <code class=\"highlighter-rouge\">CreateResolvingFunctions</code> abstract operation<sup id=\"fnref:3\"><a href="https://humanwhocodes.com/feeds/\&quot;#fn:3\"" class=\"footnote\">3</a></sup>, which is a fancy way of saying that it’s a series of steps to perform as part of some other function or method. To make it easy to go back and forth between the specification and the Pledge library, I’ve opted to use the same name for an actual function. The details in the specification aren’t all relevant to implementing the code in JavaScript, so I’ve omitted or changed some parts. I’ve also kept some parts that may seem nonsensical within the context of JavaScript – I’ve done that intentionally, once again, for ease of going back and forth with the specification.</p>\n\n<p>The <code class=\"highlighter-rouge\">createResolvingFunctions()</code> function is responsible for creating the <code class=\"highlighter-rouge\">resolve</code> and <code class=\"highlighter-rouge\">reject</code> functions that are passed into the executor. However, this function is actually used elsewhere, as well, allowing any parts of the library to retrieve these functions in order to manipulate existing <code class=\"highlighter-rouge\">Pledge</code> instances.</p>\n\n<p>To start, the basic structure of the function is as follows:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">export</span> <span class=\"kd\">function</span> <span class=\"nx\">createResolvingFunctions</span><span class=\"p\">(</span><span class=\"nx\">pledge</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\n    <span class=\"c1\">// this \"record\" is used to track whether a Pledge is already resolved</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">alreadyResolved</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"na\">value</span><span class=\"p\">:</span> <span class=\"kc\">false</span> <span class=\"p\">};</span>\n\n    <span class=\"kd\">const</span> <span class=\"nx\">resolve</span> <span class=\"o\">=</span> <span class=\"nx\">resolution</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n        <span class=\"c1\">// TODO</span>\n    <span class=\"p\">};</span>\n\n    <span class=\"c1\">// attach the record of resolution and the original pledge</span>\n    <span class=\"nx\">resolve</span><span class=\"p\">.</span><span class=\"nx\">alreadyResolved</span> <span class=\"o\">=</span> <span class=\"nx\">alreadyResolved</span><span class=\"p\">;</span>\n    <span class=\"nx\">resolve</span><span class=\"p\">.</span><span class=\"nx\">pledge</span> <span class=\"o\">=</span> <span class=\"nx\">pledge</span><span class=\"p\">;</span>\n\n    <span class=\"kd\">const</span> <span class=\"nx\">reject</span> <span class=\"o\">=</span> <span class=\"nx\">reason</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n        <span class=\"c1\">// TODO</span>\n    <span class=\"p\">};</span>\n\n    <span class=\"c1\">// attach the record of resolution and the original pledge</span>\n    <span class=\"nx\">reject</span><span class=\"p\">.</span><span class=\"nx\">alreadyResolved</span> <span class=\"o\">=</span> <span class=\"nx\">alreadyResolved</span><span class=\"p\">;</span>\n    <span class=\"nx\">reject</span><span class=\"p\">.</span><span class=\"nx\">pledge</span> <span class=\"o\">=</span> <span class=\"nx\">pledge</span><span class=\"p\">;</span>\n\n    <span class=\"k\">return</span> <span class=\"p\">{</span>\n        <span class=\"nx\">resolve</span><span class=\"p\">,</span>\n        <span class=\"nx\">reject</span>\n    <span class=\"p\">};</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>The first oddity of this function is the <code class=\"highlighter-rouge\">alreadyResolved</code> object. The specification states that it’s a record, so I’ve chosen to implement it using an object. Doing so ensures the same value is being read and modified regardless of location (using a simple boolean value would not have allowed for this sharing if the value was being written to or read from the <code class=\"highlighter-rouge\">resolve</code> and <code class=\"highlighter-rouge\">reject</code> properties).</p>\n\n<p>The specification also indicates that the <code class=\"highlighter-rouge\">resolve</code> and <code class=\"highlighter-rouge\">reject</code> functions should have properties containing <code class=\"highlighter-rouge\">alreadyResolved</code> and the original promise (<code class=\"highlighter-rouge\">pledge</code>). This is done so that the <code class=\"highlighter-rouge\">resolve</code> and <code class=\"highlighter-rouge\">reject</code> functions can access those values while executing. However, that’s not necessary in JavaScript because both functions are closures and can access those same values directly. I’ve opted to keep this detail in the code for completeness with the specification but they won’t actually be used.</p>\n\n<p>As mentioned previously, the contents of each function is where most of the work is done. However, the functions vary in how complex they are. I’ll start by describing the <code class=\"highlighter-rouge\">reject</code> function, as that is a great deal simpler than <code class=\"highlighter-rouge\">resolve</code>.</p>\n\n<h3 id=\"creating-the-reject-function\">Creating the <code class=\"highlighter-rouge\">reject</code> function</h3>\n\n<p>The <code class=\"highlighter-rouge\">reject</code> function accepts a single argument, the reason for the rejection, and places the promise in a rejected state. That means any rejection handlers added using <code class=\"highlighter-rouge\">then()</code> or <code class=\"highlighter-rouge\">catch()</code> will be executed. The first step in that process is to ensure that the promise hasn’t already been resolved, so you check the value of <code class=\"highlighter-rouge\">alreadyResolved.value</code>, and if <code class=\"highlighter-rouge\">true</code>, just return without doing anything. If <code class=\"highlighter-rouge\">alreadyResolved.value</code> is <code class=\"highlighter-rouge\">false</code> then you can continue on and the value to <code class=\"highlighter-rouge\">true</code>. This ensures that this set of <code class=\"highlighter-rouge\">resolve</code> and <code class=\"highlighter-rouge\">reject</code> handlers can only be called once. After that, you can continue on change the internal state of the promise. Here’s what that function looks like in the Pledge library:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">export</span> <span class=\"kd\">function</span> <span class=\"nx\">createResolvingFunctions</span><span class=\"p\">(</span><span class=\"nx\">pledge</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\n    <span class=\"kd\">const</span> <span class=\"nx\">alreadyResolved</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"na\">value</span><span class=\"p\">:</span> <span class=\"kc\">false</span> <span class=\"p\">};</span>\n\n    <span class=\"c1\">// resolve function omitted for ease of reading</span>\n\n    <span class=\"kd\">const</span> <span class=\"nx\">reject</span> <span class=\"o\">=</span> <span class=\"nx\">reason</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">alreadyResolved</span><span class=\"p\">.</span><span class=\"nx\">value</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"k\">return</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"nx\">alreadyResolved</span><span class=\"p\">.</span><span class=\"nx\">value</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"p\">;</span>\n\n        <span class=\"k\">return</span> <span class=\"nx\">rejectPledge</span><span class=\"p\">(</span><span class=\"nx\">pledge</span><span class=\"p\">,</span> <span class=\"nx\">reason</span><span class=\"p\">);</span>\n    <span class=\"p\">};</span>\n\n    <span class=\"nx\">reject</span><span class=\"p\">.</span><span class=\"nx\">pledge</span> <span class=\"o\">=</span> <span class=\"nx\">pledge</span><span class=\"p\">;</span>\n    <span class=\"nx\">reject</span><span class=\"p\">.</span><span class=\"nx\">alreadyResolved</span> <span class=\"o\">=</span> <span class=\"nx\">alreadyResolved</span><span class=\"p\">;</span>\n\n    <span class=\"k\">return</span> <span class=\"p\">{</span>\n        <span class=\"nx\">resolve</span><span class=\"p\">,</span>\n        <span class=\"nx\">reject</span>\n    <span class=\"p\">};</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>The <code class=\"highlighter-rouge\">rejectPledge()</code> function is another abstract operation from the specification<sup id=\"fnref:4\"><a href="https://humanwhocodes.com/feeds/\&quot;#fn:4\"" class=\"footnote\">4</a></sup> that is used in multiple places and is responsible for changing the internal state of a promise. Here’s the steps directly from the specification:</p>\n\n<ol>\n  <li>Assert: The value of <code class=\"highlighter-rouge\">promise.[[PromiseState]]</code> is <code class=\"highlighter-rouge\">pending</code>.</li>\n  <li>Let <code class=\"highlighter-rouge\">reactions</code> be <code class=\"highlighter-rouge\">promise.[[PromiseRejectReactions]]</code>.</li>\n  <li>Set <code class=\"highlighter-rouge\">promise.[[PromiseResult]]</code> to <code class=\"highlighter-rouge\">reason</code>.</li>\n  <li>Set <code class=\"highlighter-rouge\">promise.[[PromiseFulfillReactions]]</code> to <code class=\"highlighter-rouge\">undefined</code>.</li>\n  <li>Set <code class=\"highlighter-rouge\">promise.[[PromiseRejectReactions]]</code> to <code class=\"highlighter-rouge\">undefined</code>.</li>\n  <li>Set <code class=\"highlighter-rouge\">promise.[[PromiseState]]</code> to <code class=\"highlighter-rouge\">rejected</code>.</li>\n  <li>If <code class=\"highlighter-rouge\">promise.[[PromiseIsHandled]]</code> is <code class=\"highlighter-rouge\">false</code>, perform <code class=\"highlighter-rouge\">HostPromiseRejectionTracker(promise, \"reject\")</code>.</li>\n  <li>Return <code class=\"highlighter-rouge\">TriggerPromiseReactions(reactions, reason)</code>.</li>\n</ol>\n\n<p>For the time being, I’m going to skip steps 7 and 8, as those are concepts I’ll cover later in this series of blog posts. The rest can be almost directly translated into JavaScript code like this:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">export</span> <span class=\"kd\">function</span> <span class=\"nx\">rejectPledge</span><span class=\"p\">(</span><span class=\"nx\">pledge</span><span class=\"p\">,</span> <span class=\"nx\">reason</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">pledge</span><span class=\"p\">[</span><span class=\"nx\">PledgeSymbol</span><span class=\"p\">.</span><span class=\"nx\">state</span><span class=\"p\">]</span> <span class=\"o\">!==</span> <span class=\"dl\">\"</span><span class=\"s2\">pending</span><span class=\"dl\">\"</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">throw</span> <span class=\"k\">new</span> <span class=\"nb\">Error</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">Pledge is already settled.</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"kd\">const</span> <span class=\"nx\">reactions</span> <span class=\"o\">=</span> <span class=\"nx\">pledge</span><span class=\"p\">[</span><span class=\"nx\">PledgeSymbol</span><span class=\"p\">.</span><span class=\"nx\">rejectReactions</span><span class=\"p\">];</span>\n\n    <span class=\"nx\">pledge</span><span class=\"p\">[</span><span class=\"nx\">PledgeSymbol</span><span class=\"p\">.</span><span class=\"nx\">result</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nx\">reason</span><span class=\"p\">;</span>\n    <span class=\"nx\">pledge</span><span class=\"p\">[</span><span class=\"nx\">PledgeSymbol</span><span class=\"p\">.</span><span class=\"nx\">fulfillReactions</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">undefined</span><span class=\"p\">;</span>\n    <span class=\"nx\">pledge</span><span class=\"p\">[</span><span class=\"nx\">PledgeSymbol</span><span class=\"p\">.</span><span class=\"nx\">rejectReactions</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">undefined</span><span class=\"p\">;</span>\n    <span class=\"nx\">pledge</span><span class=\"p\">[</span><span class=\"nx\">PledgeSymbol</span><span class=\"p\">.</span><span class=\"nx\">state</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"dl\">\"</span><span class=\"s2\">rejected</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"nx\">pledge</span><span class=\"p\">[</span><span class=\"nx\">PledgeSymbol</span><span class=\"p\">.</span><span class=\"nx\">isHandled</span><span class=\"p\">])</span> <span class=\"p\">{</span>\n        <span class=\"c1\">// TODO: perform HostPromiseRejectionTracker(promise, \"reject\").</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"c1\">// TODO: Return `TriggerPromiseReactions(reactions, reason)`.</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>All <code class=\"highlighter-rouge\">rejectPledge()</code> is really doing is setting the various internal properties to the appropriate values for a rejection and then triggering the reject reactions. Once you understand that promises are being ruled by their internal properties, they become a lot less mysterious.</p>\n\n<p>The next step is to implement the <code class=\"highlighter-rouge\">resolve</code> function, which is quite a bit more involved than <code class=\"highlighter-rouge\">reject</code> but fundamentally is still modifying internal state.</p>\n\n<h3 id=\"creating-the-resolve-function\">Creating the <code class=\"highlighter-rouge\">resolve</code> function</h3>\n\n<p>I’ve saved the <code class=\"highlighter-rouge\">resolve</code> function for last due to the number of steps involved. If you’re unfamiliar with promises, you may wonder why it’s more complicated than <code class=\"highlighter-rouge\">reject</code>, as they should be doing most of the same steps but with different values. The complexity comes due to the different ways <code class=\"highlighter-rouge\">resolve</code> handles different types of values:</p>\n\n<ol>\n  <li>If the resolution value is the promise itself, then throw an error.</li>\n  <li>If the resolution value is a non-object, then fulfill the promise with the resolution value.</li>\n  <li>If the resolution value is an object with a <code class=\"highlighter-rouge\">then</code> property:\n    <ol>\n      <li>If the <code class=\"highlighter-rouge\">then</code> property is not a method, then fulfill the promise with the resolution value.</li>\n      <li>If the <code class=\"highlighter-rouge\">then</code> property is a method (that makes the object a <em>thenable</em>), then call <code class=\"highlighter-rouge\">then</code> with both a fulfillment and a rejection handler that will resolve or reject the promise.</li>\n    </ol>\n  </li>\n</ol>\n\n<p>So the <code class=\"highlighter-rouge\">resolve</code> function only fulfills a promise immediately in the case of a non-object resolution value or a resolution value that is an object but doesn’t have a callable <code class=\"highlighter-rouge\">then</code> property. If a second promise is passed to <code class=\"highlighter-rouge\">resolve</code> then the original promise can’t be settled (either fulfilled or rejected) until the second promise is settled. Here’s what the code looks like:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">export</span> <span class=\"kd\">function</span> <span class=\"nx\">createResolvingFunctions</span><span class=\"p\">(</span><span class=\"nx\">pledge</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\n    <span class=\"kd\">const</span> <span class=\"nx\">alreadyResolved</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"na\">value</span><span class=\"p\">:</span> <span class=\"kc\">false</span> <span class=\"p\">};</span>\n\n    <span class=\"kd\">const</span> <span class=\"nx\">resolve</span> <span class=\"o\">=</span> <span class=\"nx\">resolution</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">alreadyResolved</span><span class=\"p\">.</span><span class=\"nx\">value</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"k\">return</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"nx\">alreadyResolved</span><span class=\"p\">.</span><span class=\"nx\">value</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"p\">;</span>\n\n        <span class=\"c1\">// can't resolve to the same pledge</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nb\">Object</span><span class=\"p\">.</span><span class=\"nx\">is</span><span class=\"p\">(</span><span class=\"nx\">resolution</span><span class=\"p\">,</span> <span class=\"nx\">pledge</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n            <span class=\"kd\">const</span> <span class=\"nx\">selfResolutionError</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">TypeError</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">Cannot resolve to self.</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n            <span class=\"k\">return</span> <span class=\"nx\">rejectPledge</span><span class=\"p\">(</span><span class=\"nx\">pledge</span><span class=\"p\">,</span> <span class=\"nx\">selfResolutionError</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"c1\">// non-objects fulfill immediately</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"nx\">isObject</span><span class=\"p\">(</span><span class=\"nx\">resolution</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n            <span class=\"k\">return</span> <span class=\"nx\">fulfillPledge</span><span class=\"p\">(</span><span class=\"nx\">pledge</span><span class=\"p\">,</span> <span class=\"nx\">resolution</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"kd\">let</span> <span class=\"nx\">thenAction</span><span class=\"p\">;</span>\n\n        <span class=\"cm\">/*\n         * At this point, we know `resolution` is an object. If the object\n         * is a thenable, then we need to wait until the thenable is resolved\n         * before resolving the original pledge.\n         * \n         * The `try-catch` is because retrieving the `then` property may cause\n         * an error if it has a getter and any errors must be caught and used\n         * to reject the pledge.\n         */</span>\n        <span class=\"k\">try</span> <span class=\"p\">{</span>\n            <span class=\"nx\">thenAction</span> <span class=\"o\">=</span> <span class=\"nx\">resolution</span><span class=\"p\">.</span><span class=\"nx\">then</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span> <span class=\"k\">catch</span> <span class=\"p\">(</span><span class=\"nx\">thenError</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"k\">return</span> <span class=\"nx\">rejectPledge</span><span class=\"p\">(</span><span class=\"nx\">pledge</span><span class=\"p\">,</span> <span class=\"nx\">thenError</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"c1\">// if the thenAction isn't callable then fulfill the pledge</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"nx\">isCallable</span><span class=\"p\">(</span><span class=\"nx\">thenAction</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n            <span class=\"k\">return</span> <span class=\"nx\">fulfillPledge</span><span class=\"p\">(</span><span class=\"nx\">pledge</span><span class=\"p\">,</span> <span class=\"nx\">resolution</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"cm\">/*\n         * If `thenAction` is callable, then we need to wait for the thenable\n         * to resolve before we can resolve this pledge.\n         */</span>\n\n        <span class=\"c1\">// TODO: Let job be NewPromiseResolveThenableJob(promise, resolution, thenAction).</span>\n        <span class=\"c1\">// TODO: Perform HostEnqueuePromiseJob(job.[[Job]], job.[[Realm]]).</span>\n    <span class=\"p\">};</span>\n\n    <span class=\"c1\">// attach the record of resolution and the original pledge</span>\n    <span class=\"nx\">resolve</span><span class=\"p\">.</span><span class=\"nx\">alreadyResolved</span> <span class=\"o\">=</span> <span class=\"nx\">alreadyResolved</span><span class=\"p\">;</span>\n    <span class=\"nx\">resolve</span><span class=\"p\">.</span><span class=\"nx\">pledge</span> <span class=\"o\">=</span> <span class=\"nx\">pledge</span><span class=\"p\">;</span>\n\n    <span class=\"c1\">// reject function omitted for ease of reading</span>\n\n    <span class=\"k\">return</span> <span class=\"p\">{</span>\n        <span class=\"nx\">resolve</span><span class=\"p\">,</span>\n        <span class=\"nx\">reject</span>\n    <span class=\"p\">};</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>As with the <code class=\"highlighter-rouge\">reject</code> function, the first step in the <code class=\"highlighter-rouge\">resolve</code> function is to check the value of <code class=\"highlighter-rouge\">alreadyResolved.value</code> and either return immediately if <code class=\"highlighter-rouge\">true</code> or set to <code class=\"highlighter-rouge\">true</code>. After that, the <code class=\"highlighter-rouge\">resolution</code> value needs to be checked to see what action to take. The last step in the <code class=\"highlighter-rouge\">resolve</code> function (marked with <code class=\"highlighter-rouge\">TODO</code> comments) is for the case of a thenable that needs handlers attached. This will be discussed in my next post.</p>\n\n<p>The <code class=\"highlighter-rouge\">fulfillPledge()</code> function referenced in the <code class=\"highlighter-rouge\">resolve</code> function looks a lot like the <code class=\"highlighter-rouge\">rejectPledge()</code> function referenced in the <code class=\"highlighter-rouge\">reject</code> function and simply sets the internal state:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">export</span> <span class=\"kd\">function</span> <span class=\"nx\">fulfillPledge</span><span class=\"p\">(</span><span class=\"nx\">pledge</span><span class=\"p\">,</span> <span class=\"nx\">value</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">pledge</span><span class=\"p\">[</span><span class=\"nx\">PledgeSymbol</span><span class=\"p\">.</span><span class=\"nx\">state</span><span class=\"p\">]</span> <span class=\"o\">!==</span> <span class=\"dl\">\"</span><span class=\"s2\">pending</span><span class=\"dl\">\"</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">throw</span> <span class=\"k\">new</span> <span class=\"nb\">Error</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">Pledge is already settled.</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"kd\">const</span> <span class=\"nx\">reactions</span> <span class=\"o\">=</span> <span class=\"nx\">pledge</span><span class=\"p\">[</span><span class=\"nx\">PledgeSymbol</span><span class=\"p\">.</span><span class=\"nx\">fulfillReactions</span><span class=\"p\">];</span>\n\n    <span class=\"nx\">pledge</span><span class=\"p\">[</span><span class=\"nx\">PledgeSymbol</span><span class=\"p\">.</span><span class=\"nx\">result</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nx\">value</span><span class=\"p\">;</span>\n    <span class=\"nx\">pledge</span><span class=\"p\">[</span><span class=\"nx\">PledgeSymbol</span><span class=\"p\">.</span><span class=\"nx\">fulfillReactions</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">undefined</span><span class=\"p\">;</span>\n    <span class=\"nx\">pledge</span><span class=\"p\">[</span><span class=\"nx\">PledgeSymbol</span><span class=\"p\">.</span><span class=\"nx\">rejectReactions</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">undefined</span><span class=\"p\">;</span>\n    <span class=\"nx\">pledge</span><span class=\"p\">[</span><span class=\"nx\">PledgeSymbol</span><span class=\"p\">.</span><span class=\"nx\">state</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"dl\">\"</span><span class=\"s2\">fulfilled</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n\n    <span class=\"c1\">// TODO: Return `TriggerPromiseReactions(reactions, reason)`.</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>As with <code class=\"highlighter-rouge\">rejectPledge()</code>, I’m leaving off the <code class=\"highlighter-rouge\">TriggerPromiseReactions</code> operations for discussion in a later post.</p>\n\n<h2 id=\"wrapping-up\">Wrapping Up</h2>\n\n<p>At this point, you should have a good understanding of how a <code class=\"highlighter-rouge\">Promise</code> constructor works. The most important thing to remember is that every operation so far is synchronous; there is no asynchronous operation until we start dealing with other operations, such as <code class=\"highlighter-rouge\">then()</code>, <code class=\"highlighter-rouge\">catch()</code>, and <code class=\"highlighter-rouge\">finally()</code>, which will be covered later in this series. When you create a new instance of <code class=\"highlighter-rouge\">Promise</code> and pass in an executor, that executor is run immediately, and if either <code class=\"highlighter-rouge\">resolve</code> or <code class=\"highlighter-rouge\">reject</code> is called synchronously, then the newly created promise is already fulfilled or rejected, respectively. It’s only what happens after that point where you get into asynchronous operations, and asynchronous operations are discussed in the <a href="https://humanwhocodes.com/feeds/\&quot;https://humanwhocodes.com/blog/2020/09/creating-javascript-promise-from-scratch-resolving-to-a-promise/\&quot;">next post</a>.</p>\n\n<p>All of this code is available in the <a href="https://humanwhocodes.com/feeds/\&quot;https://github.com/humanwhocodes/pledge\&quot;">Pledge</a> on GitHub. I hope you’ll download it and try it out to get a better understanding of promises.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n  <ol>\n    <li id=\"fn:1\">\n      <p><a href="https://humanwhocodes.com/feeds/\&quot;https://www.ecma-international.org/ecma-262/11.0/index.html#sec-promise-objects\"">Promise Objects</a> <a href="https://humanwhocodes.com/feeds/\&quot;#fnref:1\"" class=\"reversefootnote\">&#8617;</a></p>\n    </li>\n    <li id=\"fn:2\">\n      <p><a href="https://humanwhocodes.com/feeds/\&quot;https://www.ecma-international.org/ecma-262/11.0/index.html#sec-properties-of-promise-instances\"">Properties of Promise instances</a> <a href="https://humanwhocodes.com/feeds/\&quot;#fnref:2\"" class=\"reversefootnote\">&#8617;</a></p>\n    </li>\n    <li id=\"fn:3\">\n      <p><a href="https://humanwhocodes.com/feeds/\&quot;https://www.ecma-international.org/ecma-262/11.0/index.html#sec-createresolvingfunctions\"">CreateResolvingFunctions(promise)</a> <a href="https://humanwhocodes.com/feeds/\&quot;#fnref:3\"" class=\"reversefootnote\">&#8617;</a></p>\n    </li>\n    <li id=\"fn:4\">\n      <p><a href="https://humanwhocodes.com/feeds/\&quot;https://www.ecma-international.org/ecma-262/11.0/index.html#sec-rejectpromise\"">RejectPromise(promise, reason)</a> <a href="https://humanwhocodes.com/feeds/\&quot;#fnref:4\"" class=\"reversefootnote\">&#8617;</a></p>\n    </li>\n  </ol>\n</div>\n",
            "url": "https://humanwhocodes.com/blog/2020/09/creating-javascript-promise-from-scratch-constructor/",
            
            
            
            "tags": ["JavaScript","Promises","ECMAScript 6"],
            
            "date_published": "2020-09-22T00:00:00+00:00",
            "date_modified": "2020-09-22T00:00:00+00:00",
            
                "author": 
                ""
                
            
        },
    
        {
            "id": "https://humanwhocodes.com/blog/2020/07/safely-use-github-actions-in-organizations/",
            "title": "How to safely use GitHub Actions in organizations",
            "summary": "GitHub Actions1 are programs designed to run inside of workflows2, triggered by specific events inside a GitHub repository. To date, people use GitHub Actions to do things like run continuous integration (CI) tests, publish releases, respond to issues, and more. Because the workflows are executed inside a fresh virtual machine that is deleted after the workflow completes, there isn’t much risk of abuse inside of the system. There is a risk, however, to your data.            GitHub: GitHub Actions &#8617;              GitHub: Configuring and managing workflow files and runs &#8617;      ",
            "content_text": "GitHub Actions1 are programs designed to run inside of workflows2, triggered by specific events inside a GitHub repository. To date, people use GitHub Actions to do things like run continuous integration (CI) tests, publish releases, respond to issues, and more. Because the workflows are executed inside a fresh virtual machine that is deleted after the workflow completes, there isn’t much risk of abuse inside of the system. There is a risk, however, to your data.\n\n\n  This post is aimed at those who are using GitHub organizations to manage their projects, which is to say, there is more than one maintainer. In that situation, you may not always be aware of who is accessing your repository, whether that be another coworker or a collaborator you’ve never met. If you are the only maintainer of a project then your risk is limited to people who steal your credentials and the other recommendations in this post aren’t as necessary.\n\n\nCredential stealing risk\n\nThe primary risk for your workflows is credential stealing, where you provided some sensitive information inside of the workflow and somehow that information is stolen. This credential stealing generally takes two forms:\n\n\n  Opportunistic - sensitive information is accidentally output to the log and an attacker finds it and uses it\n  Intentional - an attacker is able to insert a program into your workflow that steals credentials and sends them to the attacker\n\n\nGitHub, to its credit, is aware of this possibility and allows you to store sensitive information in secrets3. You can store secrets either on a single repository or on an organization, where they can be shared across multiple repositories. You can store things like API tokens or deploy keys securely and then reference them directly inside of a workflow.\n\nBy default, there are some important security features built in to GitHub secrets:\n\n\n  Once a secret is created, you can never view the value inside of the GitHub interface or retrieve it using the API; you can only rename the secret, change the value, or delete the secret.\n  Secrets are automatically masked from log output when GitHub Actions execute. You’ll never accidentally configure a secret to show in the log.\n  Only administrators can create, modify, or delete secrets. For individuals that means you must be the owner of the repository; for organizations that means you must be an administrator.\n\n\nThese measures are a good default starting place for securing sensitive information, but that doesn’t mean this data is completely safe by default.\n\nShowing secrets in the log\n\nWorkflow logs are displayed on each repository under the “Actions” tab and are visible to the public. GitHub Actions tend to hide a lot of their own output for security purposes but not every command inside of a workflow is implemented with a GitHub Action. Luckily, workflows are designed to hide secrets by default, so it’s unlikely that you’ll end up accidentally outputting the secrets in plain text. When you access a secret as in the following workflow, the output will be masked in the log. For example, suppose this is part of your workflow:\n\nsteps:\n  - name: Try to output a secret\n    run: echo 'SECRET:${{ secrets.GITHUB_TOKEN }}'\n\n\nAccessing data off of the secrets object automatically masks the value in the log, so you’ll end up seeing something like this in the log:\n\nSECRET:***\n\n\nYou’re safe so long as your secrets stay within the confines of a workflow where GitHub will mask the values for you. The more dangerous situation is what happens with the command executed as part of your workflow. If they make use of a secret, they could potentially reveal it in the log.\n\nFor example, suppose you have a Node.js file named echo.js containing the following:\n\nconsole.log(process.argv[2]);\n\n\nThis file will output the first argument passed to the Node.js process. If you configure it in a workflow, you could very easily display a secret accidentally, such as:\n\nsteps:\n  - name: Try to output a secret\n    run: node ./echo.js ${{ secrets.GITHUB_TOKEN }}\n\n\nWhile the command line itself will be masked in the log, there is no accounting for the output of the command, which will output whatever is passed in.\n\nKey points about this scenario:\n\n\n  This is most likely an accident rather than an attack. An attacker would most likely want to hide the fact that they were able to get access to your secret. By outputting it into the log, it’s there for anyone to see and trace back to the source.\n  An accident like this can open the door for opportunistic credential stealing4 by someone who notices the secrets were exposed.\n\n\nAlthough accidentally outputting secrets to the log is a bad situation, remote credential stealing is worse.\n\nRemote credential stealing\n\nThis scenario is more likely an attack than an accident. The way this happens is that a rogue command has made it into your workflow file and is able to read your secrets and then transmit them to a different server. There isn’t any overt indication that this has happened in the log so it may go unnoticed for a long time (or forever).\n\nThere are a number of ways for these rogue utilities to be introduced because GitHub workflows rely on installing external dependencies to execute. Whether you need to execute a third-party GitHub action or install something using a package manager, you are assuming that you’re not using malicious software.\n\nThe most important question to ask is how might a malicious utility make it into your workflow files? There are two answers: accidentally or intentionally. However, there are several ways each can play out:\n\n\n  As with outputting secrets to the log, a well-intentioned developer might have copy-pasted something from another workflow file and introduced it into your codebase. Maybe it was committed directly to the development branch without review because it’s a small project. This scenario plays out every day as attackers try to trick developers into installing malicious software that otherwise looks harmless.\n  An attacker might have gained control of a package that already has a reputation as reliable and update it to contain malicious code. (I’m painfully aware of how this can happen.5) Your workflow may blindly pull in the package and use it expecting it to be safe.\n  An attacker might submit a pull request to your repository containing a workflow change, hoping no one will look at it too closely before merging.\n  An attacker might have stolen someone’s credentials and used them to modify a workflow to contain a malicious command.\n\n\nIn any case, there are enough ways for attackers to introduce malicious software into your workflow. Fortunately, there are a number of ways to protect yourself.\n\nProtection strategies\n\nGenerally speaking, the strategies to further protect your GitHub workflows fall into the following categories:\n\n\n  Protect yourself\n  Protect your development branch\n  Limit scopes\n  Workflow best practices\n\n\nProtect yourself\n\nThe easiest way to steal credentials is for an attacker to pretend that they’re you. Once they have control of your GitHub or package manager account, they have all the access they need to not only harm you but also harm others. The advice here is timeless, but worth repeating:\n\n\n  Use a password manager and generate a strong, unique password for each site you use. Your GitHub password should not be the same as your npm password, for example.\n  Enable two-factor authentication (2FA) on GitHub6 and any other sites you use. Prefer to use an authentication app or a security key instead of text messages whenever possible.\n  If you are a GitHub organization administrator, require all organization members to enable 2FA.7\n\n\nBy protecting your own login information, you make it a lot harder for attackers to use your projects to attack you or others.\n\nProtect your branches\n\nAt a minimum, you should protect your development branch with rules about what is allowed to be merged. Your development branch is the branch where pull requests are sent and where your releases are cut from. In many cases that will be the master branch, but some teams also use dev, trunk, or any number of other names. Once code makes it into your development branch, it is effectively “live” (for workflows) and highly likely to make it into a release (where it could negatively affect others). That’s why protecting your development branch is important.\n\nGitHub allows you to protect any branch in a number of ways.8 To set up a protected branch, go to your repository settings, click on “Branches” on the menu, then under “Branch Protection Rules” click the “Add Rule” button. Then, you can specify the branches to protect and exactly how to protect them.\n\nThere are a lot of options, but here are the ones I recommend as a starting point for your development branch:\n\n\n  Require pull requests before merging - this prevents you from pushing directly to the development branch. All changes must go through a pull request, even from admins (though you can override this to allow specific people to override the protection – but that’s not advisable). This is important to ensure that there’s some notification of any changes made to the development branch and someone has the opportunity to review them before merging.\n  Required approval reviews - by default this is set to one. Ideally, you should require approvals from at least two people to avoid the case where a malicious actor has secured the login of one team member and can therefore self-approve a pull request.\n  Dismiss stale pull request approvals when new commits are pushed - by default this is off, and you should turn it on. This prevents an attack where a malicious actor submits an appropriate pull request, waits for approval, and then adds new commits to the pull request before merging. With this option enabled, new commits pushed to the pull request will invalidate previous approvals.\n  Require review from Code Owners - it’s a good idea to set up code owners8 for workflow files and other sensitive files. Once you do, you can enable this option to require the code owners approve any pull requests related to the code they own. This ensures that those who are most knowledgeable about GitHub Actions are required to approve any pull requests.\n  Require status checks to pass before merging - assuming you have status checks running on pull requests (such as automated testing or linting), enable this option to ensure pull requests can’t be merged that have failing status checks. This is another layer of security to prevent malicious code from making it into your repository.\n  Include administrators - this option ensures that even administrators must adhere to the rules you’ve set up for the branch. While a compromised administrator account can turn this setting off, turning it on ensures administrators don’t accidentally merge or push changes.\n  Allow force pushes - this is off by default and should remain off. Force pushes allow someone to completely overwrite the remote branch, which opens you up to all kinds of bad situations. Force pushes to the development branch should never be allowed in an organization.\n  Allow deletions - this is also off by default and should remain off. You don’t want to accidentally delete your development branch.\n\n\nWhile these settings won’t prevent all attacks, they certainly make a number of common attacks a lot more difficult. You can, of course, create rules that are more strict if you have other needs.\n\n\n  Because GitHub Actions and workflows are executed in every branch of your repository, it’s important to consider whether or not you need to protect all of your remote branches. If your team doesn’t use remote branches for feature development then I would recommend protecting all of your branches.\n\n\nLimit scopes\n\nOne of the classic pieces of computer security advice is to always limit the scope of changes allowed at one time. For protecting your secrets, here are a number of ways you can limit scope:\n\n\n  Favor repository-only secrets - if you only have one repository that needs access to a secret, then create the secret only on the repository instead of on the organization. This further limits the attack surface.\n  Limit organization secret scope - organization secrets can be scoped to only public, only private, or just specific repositories. Limiting the number of repositories with access to the secrets also decreases the attack surface. Your credentials are only as secure as your least secure repository with access to your secrets.\n  Limit the number of admins - keep the number of repository or organization administrators small. Only admins can manage GitHub secrets, so keeping this group small will also minimize the risk.\n  Minimize credentials - ensure that any credentials generated to use in secrets have the minimal required permissions to be useful. If an app needs write permission and not read permission, then generate a credential that only allows writes. This way you minimize the damage if a credential is stolen.\n\n\nEven if you don’t follow any of the other advice in this article, limiting the scope of your secrets is really the minimum you should do to protect them.\n\n\n  Never store a GitHub token with administrator privileges as a secret. This would allow any workflow in any branch (even unprotected branches) to modify your repository in any way it wants, including pushing to protected branches.9\n\n\nWorkflow best practices\n\nThe last step is to ensure your workflows are as safe as possible. The concern here is that you pass secrets into a utility that will either log that data unmasked or steal the credentials silently. Naturally, the first step is to verify the actions and utilities you are using are safe to use.\n\nDisabling Actions\n\nIf you don’t intend to use GitHub Actions in your organization, you can disable them for the entire organization. On the organization Settings page, go to “Actions” and then select “Disable actions for this organization.”10 This ensures that no repositories can use GitHub Actions and is the safest setting if you don’t intend to use them.\n\nUse only local Actions\n\nAnother options is to allow the organization to use workflows but only with actions that are contained inside the same repository. This effectively forces repositories to install their own copies of actions to control which actions may be executed.\n\nTo enable this setting, go to the organization Settings page, go to “Actions”, and then select “Enable local Actions only for this organization.”10\n\nIdentifying safe Actions\n\nThere are a couple ways you can know that a published GitHub Action is safe:\n\n\n  It begins with action/, such as actions/checkout. These are published by GitHub itself and are therefore safe to use.\n  The action is published in the GitHub Action Marketplace11 and has a “verified creator” badge next to the author. This indicates that the creator is a verified partner of GitHub and therefore the action is safe.\n\n\nIf an action doesn’t fall into one of these two categories, that doesn’t mean it’s not safe, just that you need to do more research into the action.\n\nAll actions in the GitHub Action Marketplace link back to the source code repository they are published from. You should always look at the source code to ensure that it is performing the operations it claims to be performing (and doing nothing else). Of course, you happen to know and trust the publisher of the Action, you may want to trust that the action does what it says.\n\nProvide secrets one command at a time\n\nWhen configuring a workflow, ensure that you are limiting the number of commands with access. For example, you might configure a secret as an environment variable to run a command, such as this:\n\nsteps:\n  - name: Run a command\n    run: some-command\n    env:\n      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n\n\nHere, the GITHUB_TOKEN environment variable is set with the secrets.GITHUB_TOKEN secret value. The some-command utility has access to that environment variable. Assuming that some-command is a trusted utility, there is no problem. The problem occurs when you run multiple commands inside of a run statement, such as:\n\nsteps:\n  - name: Run a command\n  - run: |\n      some-command\n      some-other-command\n      yet-another-command\n    env:\n      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n\n\nIn this case, the run statement is running multiple commands at once. The env statement now applies to all of those commands and will be available whether they need access to GITHUB_TOKEN or not. If the only utility that needs GITHUB_TOKEN is some-command, then limit the use of env to just that command, such as:\n\nsteps:\n  - name: Run a command\n    run: some-command\n    env:\n      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n  - run: |\n      some-other-command\n      yet-another-command\n\n\nWith this rewritten example, only some-command has access to GITHUB_TOKEN while the other commands are run separately without GITHUB_TOKEN. Limiting which commands have access to your secrets is another important step in preventing credential stealing.\n\nConclusion\n\nWhile GitHub Actions are a great addition to the GitHub development ecosystem, it’s still important to take security into account when using them. The security considerations are quite a bit different when you’re dealing with a GitHub organization maintaining projects rather than a single maintainer. The more people who can commit directly to your development branch, the more chances there are for security breaches.\n\nThe most important takeaway from this post is that you need to have protections, both automated and manual, in order to safely using GitHub Actions in organizations. Whether you decide to only allow local actions or to assign someone as a code owner who must approve all workflows, it’s better to have some protections in place than to have none. That is especially true when you have credentials stored as GitHub secrets that would allow people to interact with outside systems on your behalf.\n\nRemember, you are only as secure as your least secure user, branch, or repository.\n\n\n  \n    \n      GitHub: GitHub Actions &#8617;\n    \n    \n      GitHub: Configuring and managing workflow files and runs &#8617;\n    \n    \n      GitHub: Creating and storing encrypted secrets &#8617;\n    \n    \n      Credential Stealing as an Attack Vector &#8617;\n    \n    \n      ESLint postmortem for malicious package publishes &#8617;\n    \n    \n      GitHub: Securing your account with two-factor authentication (2FA) &#8617;\n    \n    \n      GitHub: Requiring two-factor authentication in your organization &#8617;\n    \n    \n      GitHub: Configuring protected branches &#8617; &#8617;2\n    \n    \n      Allowing github-actions(bot) to push to protected branch &#8617;\n    \n    \n      GitHub: Disabling or limiting GitHub Actions for your organization &#8617; &#8617;2\n    \n    \n      GitHub Actions Marketplace &#8617;\n    \n  \n\n",
            "content_html": "<p>GitHub Actions<sup id=\"fnref:1\"><a href="https://humanwhocodes.com/feeds/\&quot;#fn:1\"" class=\"footnote\">1</a></sup> are programs designed to run inside of workflows<sup id=\"fnref:2\"><a href="https://humanwhocodes.com/feeds/\&quot;#fn:2\"" class=\"footnote\">2</a></sup>, triggered by specific events inside a GitHub repository. To date, people use GitHub Actions to do things like run continuous integration (CI) tests, publish releases, respond to issues, and more. Because the workflows are executed inside a fresh virtual machine that is deleted after the workflow completes, there isn’t much risk of abuse inside of the system. There is a risk, however, to your data.</p>\n\n<aside>\n  <p>This post is aimed at those who are using GitHub organizations to manage their projects, which is to say, there is more than one maintainer. In that situation, you may not always be aware of who is accessing your repository, whether that be another coworker or a collaborator you’ve never met. If you are the only maintainer of a project then your risk is limited to people who steal your credentials and the other recommendations in this post aren’t as necessary.</p>\n</aside>\n\n<h2 id=\"credential-stealing-risk\">Credential stealing risk</h2>\n\n<p>The primary risk for your workflows is credential stealing, where you provided some sensitive information inside of the workflow and somehow that information is stolen. This credential stealing generally takes two forms:</p>\n\n<ol>\n  <li>Opportunistic - sensitive information is accidentally output to the log and an attacker finds it and uses it</li>\n  <li>Intentional - an attacker is able to insert a program into your workflow that steals credentials and sends them to the attacker</li>\n</ol>\n\n<p>GitHub, to its credit, is aware of this possibility and allows you to store sensitive information in secrets<sup id=\"fnref:3\"><a href="https://humanwhocodes.com/feeds/\&quot;#fn:3\"" class=\"footnote\">3</a></sup>. You can store secrets either on a single repository or on an organization, where they can be shared across multiple repositories. You can store things like API tokens or deploy keys securely and then reference them directly inside of a workflow.</p>\n\n<p>By default, there are some important security features built in to GitHub secrets:</p>\n\n<ol>\n  <li>Once a secret is created, you can never view the value inside of the GitHub interface or retrieve it using the API; you can only rename the secret, change the value, or delete the secret.</li>\n  <li>Secrets are automatically masked from log output when GitHub Actions execute. You’ll never accidentally configure a secret to show in the log.</li>\n  <li>Only administrators can create, modify, or delete secrets. For individuals that means you must be the owner of the repository; for organizations that means you must be an administrator.</li>\n</ol>\n\n<p>These measures are a good default starting place for securing sensitive information, but that doesn’t mean this data is completely safe by default.</p>\n\n<h3 id=\"showing-secrets-in-the-log\">Showing secrets in the log</h3>\n\n<p>Workflow logs are displayed on each repository under the “Actions” tab and are visible to the public. GitHub Actions tend to hide a lot of their own output for security purposes but not every command inside of a workflow is implemented with a GitHub Action. Luckily, workflows are designed to hide secrets by default, so it’s unlikely that you’ll end up accidentally outputting the secrets in plain text. When you access a secret as in the following workflow, the output will be masked in the log. For example, suppose this is part of your workflow:</p>\n\n<div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>steps:\n  - name: Try to output a secret\n    run: echo 'SECRET:${{ secrets.GITHUB_TOKEN }}'\n</code></pre></div></div>\n\n<p>Accessing data off of the <code class=\"highlighter-rouge\">secrets</code> object automatically masks the value in the log, so you’ll end up seeing something like this in the log:</p>\n\n<div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>SECRET:***\n</code></pre></div></div>\n\n<p>You’re safe so long as your secrets stay within the confines of a workflow where GitHub will mask the values for you. The more dangerous situation is what happens with the command executed as part of your workflow. If they make use of a secret, they could potentially reveal it in the log.</p>\n\n<p>For example, suppose you have a Node.js file named <code class=\"highlighter-rouge\">echo.js</code> containing the following:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">process</span><span class=\"p\">.</span><span class=\"nx\">argv</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]);</span>\n</code></pre></div></div>\n\n<p>This file will output the first argument passed to the Node.js process. If you configure it in a workflow, you could very easily display a secret accidentally, such as:</p>\n\n<div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>steps:\n  - name: Try to output a secret\n    run: node ./echo.js ${{ secrets.GITHUB_TOKEN }}\n</code></pre></div></div>\n\n<p>While the command line itself will be masked in the log, there is no accounting for the output of the command, which will output whatever is passed in.</p>\n\n<p>Key points about this scenario:</p>\n\n<ul>\n  <li>This is most likely an accident rather than an attack. An attacker would most likely want to hide the fact that they were able to get access to your secret. By outputting it into the log, it’s there for anyone to see and trace back to the source.</li>\n  <li>An accident like this can open the door for opportunistic credential stealing<sup id=\"fnref:4\"><a href="https://humanwhocodes.com/feeds/\&quot;#fn:4\"" class=\"footnote\">4</a></sup> by someone who notices the secrets were exposed.</li>\n</ul>\n\n<p>Although accidentally outputting secrets to the log is a bad situation, remote credential stealing is worse.</p>\n\n<h3 id=\"remote-credential-stealing\">Remote credential stealing</h3>\n\n<p>This scenario is more likely an attack than an accident. The way this happens is that a rogue command has made it into your workflow file and is able to read your secrets and then transmit them to a different server. There isn’t any overt indication that this has happened in the log so it may go unnoticed for a long time (or forever).</p>\n\n<p>There are a number of ways for these rogue utilities to be introduced because GitHub workflows rely on installing external dependencies to execute. Whether you need to execute a third-party GitHub action or install something using a package manager, you are assuming that you’re not using malicious software.</p>\n\n<p>The most important question to ask is how might a malicious utility make it into your workflow files? There are two answers: accidentally or intentionally. However, there are several ways each can play out:</p>\n\n<ul>\n  <li>As with outputting secrets to the log, a well-intentioned developer might have copy-pasted something from another workflow file and introduced it into your codebase. Maybe it was committed directly to the development branch without review because it’s a small project. This scenario plays out every day as attackers try to trick developers into installing malicious software that otherwise looks harmless.</li>\n  <li>An attacker might have gained control of a package that already has a reputation as reliable and update it to contain malicious code. (I’m painfully aware of how this can happen.<sup id=\"fnref:5\"><a href="https://humanwhocodes.com/feeds/\&quot;#fn:5\"" class=\"footnote\">5</a></sup>) Your workflow may blindly pull in the package and use it expecting it to be safe.</li>\n  <li>An attacker might submit a pull request to your repository containing a workflow change, hoping no one will look at it too closely before merging.</li>\n  <li>An attacker might have stolen someone’s credentials and used them to modify a workflow to contain a malicious command.</li>\n</ul>\n\n<p>In any case, there are enough ways for attackers to introduce malicious software into your workflow. Fortunately, there are a number of ways to protect yourself.</p>\n\n<h2 id=\"protection-strategies\">Protection strategies</h2>\n\n<p>Generally speaking, the strategies to further protect your GitHub workflows fall into the following categories:</p>\n\n<ol>\n  <li>Protect yourself</li>\n  <li>Protect your development branch</li>\n  <li>Limit scopes</li>\n  <li>Workflow best practices</li>\n</ol>\n\n<h3 id=\"protect-yourself\">Protect yourself</h3>\n\n<p>The easiest way to steal credentials is for an attacker to pretend that they’re you. Once they have control of your GitHub or package manager account, they have all the access they need to not only harm you but also harm others. The advice here is timeless, but worth repeating:</p>\n\n<ul>\n  <li>Use a password manager and generate a strong, unique password for each site you use. Your GitHub password should not be the same as your npm password, for example.</li>\n  <li>Enable two-factor authentication (2FA) on GitHub<sup id=\"fnref:6\"><a href="https://humanwhocodes.com/feeds/\&quot;#fn:6\"" class=\"footnote\">6</a></sup> and any other sites you use. Prefer to use an authentication app or a security key instead of text messages whenever possible.</li>\n  <li>If you are a GitHub organization administrator, require all organization members to enable 2FA.<sup id=\"fnref:7\"><a href="https://humanwhocodes.com/feeds/\&quot;#fn:7\"" class=\"footnote\">7</a></sup></li>\n</ul>\n\n<p>By protecting your own login information, you make it a lot harder for attackers to use your projects to attack you or others.</p>\n\n<h3 id=\"protect-your-branches\">Protect your branches</h3>\n\n<p>At a minimum, you should protect your development branch with rules about what is allowed to be merged. Your development branch is the branch where pull requests are sent and where your releases are cut from. In many cases that will be the <code class=\"highlighter-rouge\">master</code> branch, but some teams also use <code class=\"highlighter-rouge\">dev</code>, <code class=\"highlighter-rouge\">trunk</code>, or any number of other names. Once code makes it into your development branch, it is effectively “live” (for workflows) and highly likely to make it into a release (where it could negatively affect others). That’s why protecting your development branch is important.</p>\n\n<p>GitHub allows you to protect any branch in a number of ways.<sup id=\"fnref:8\"><a href="https://humanwhocodes.com/feeds/\&quot;#fn:8\"" class=\"footnote\">8</a></sup> To set up a protected branch, go to your repository settings, click on “Branches” on the menu, then under “Branch Protection Rules” click the “Add Rule” button. Then, you can specify the branches to protect and exactly how to protect them.</p>\n\n<p>There are a lot of options, but here are the ones I recommend as a starting point for your development branch:</p>\n\n<ol>\n  <li><strong>Require pull requests before merging</strong> - this prevents you from pushing directly to the development branch. All changes must go through a pull request, even from admins (though you can override this to allow specific people to override the protection – but that’s not advisable). This is important to ensure that there’s some notification of any changes made to the development branch and someone has the opportunity to review them before merging.</li>\n  <li><strong>Required approval reviews</strong> - by default this is set to one. Ideally, you should require approvals from at least two people to avoid the case where a malicious actor has secured the login of one team member and can therefore self-approve a pull request.</li>\n  <li><strong>Dismiss stale pull request approvals when new commits are pushed</strong> - by default this is off, and you should turn it on. This prevents an attack where a malicious actor submits an appropriate pull request, waits for approval, and then adds new commits to the pull request before merging. With this option enabled, new commits pushed to the pull request will invalidate previous approvals.</li>\n  <li><strong>Require review from Code Owners</strong> - it’s a good idea to set up code owners<sup id=\"fnref:8:1\"><a href="https://humanwhocodes.com/feeds/\&quot;#fn:8\"" class=\"footnote\">8</a></sup> for workflow files and other sensitive files. Once you do, you can enable this option to require the code owners approve any pull requests related to the code they own. This ensures that those who are most knowledgeable about GitHub Actions are required to approve any pull requests.</li>\n  <li><strong>Require status checks to pass before merging</strong> - assuming you have status checks running on pull requests (such as automated testing or linting), enable this option to ensure pull requests can’t be merged that have failing status checks. This is another layer of security to prevent malicious code from making it into your repository.</li>\n  <li><strong>Include administrators</strong> - this option ensures that even administrators must adhere to the rules you’ve set up for the branch. While a compromised administrator account can turn this setting off, turning it on ensures administrators don’t accidentally merge or push changes.</li>\n  <li><strong>Allow force pushes</strong> - this is off by default and should remain off. Force pushes allow someone to completely overwrite the remote branch, which opens you up to all kinds of bad situations. Force pushes to the development branch should never be allowed in an organization.</li>\n  <li><strong>Allow deletions</strong> - this is also off by default and should remain off. You don’t want to accidentally delete your development branch.</li>\n</ol>\n\n<p>While these settings won’t prevent all attacks, they certainly make a number of common attacks a lot more difficult. You can, of course, create rules that are more strict if you have other needs.</p>\n\n<aside class=\"warn\">\n  <p>Because GitHub Actions and workflows are executed in every branch of your repository, it’s important to consider whether or not you need to protect all of your remote branches. If your team doesn’t use remote branches for feature development then I would recommend protecting all of your branches.</p>\n</aside>\n\n<h3 id=\"limit-scopes\">Limit scopes</h3>\n\n<p>One of the classic pieces of computer security advice is to always limit the scope of changes allowed at one time. For protecting your secrets, here are a number of ways you can limit scope:</p>\n\n<ul>\n  <li><strong>Favor repository-only secrets</strong> - if you only have one repository that needs access to a secret, then create the secret only on the repository instead of on the organization. This further limits the attack surface.</li>\n  <li><strong>Limit organization secret scope</strong> - organization secrets can be scoped to only public, only private, or just specific repositories. Limiting the number of repositories with access to the secrets also decreases the attack surface. Your credentials are only as secure as your least secure repository with access to your secrets.</li>\n  <li><strong>Limit the number of admins</strong> - keep the number of repository or organization administrators small. Only admins can manage GitHub secrets, so keeping this group small will also minimize the risk.</li>\n  <li><strong>Minimize credentials</strong> - ensure that any credentials generated to use in secrets have the minimal required permissions to be useful. If an app needs write permission and not read permission, then generate a credential that only allows writes. This way you minimize the damage if a credential is stolen.</li>\n</ul>\n\n<p>Even if you don’t follow any of the other advice in this article, limiting the scope of your secrets is really the minimum you should do to protect them.</p>\n\n<aside class=\"warn\">\n  <p>Never store a GitHub token with administrator privileges as a secret. This would allow any workflow in any branch (even unprotected branches) to modify your repository in any way it wants, including pushing to protected branches.<sup id=\"fnref:10\"><a href="https://humanwhocodes.com/feeds/\&quot;#fn:10\"" class=\"footnote\">9</a></sup></p>\n</aside>\n\n<h3 id=\"workflow-best-practices\">Workflow best practices</h3>\n\n<p>The last step is to ensure your workflows are as safe as possible. The concern here is that you pass secrets into a utility that will either log that data unmasked or steal the credentials silently. Naturally, the first step is to verify the actions and utilities you are using are safe to use.</p>\n\n<h4 id=\"disabling-actions\">Disabling Actions</h4>\n\n<p>If you don’t intend to use GitHub Actions in your organization, you can disable them for the entire organization. On the organization Settings page, go to “Actions” and then select “Disable actions for this organization.”<sup id=\"fnref:11\"><a href="https://humanwhocodes.com/feeds/\&quot;#fn:11\"" class=\"footnote\">10</a></sup> This ensures that no repositories can use GitHub Actions and is the safest setting if you don’t intend to use them.</p>\n\n<h4 id=\"use-only-local-actions\">Use only local Actions</h4>\n\n<p>Another options is to allow the organization to use workflows but only with actions that are contained inside the same repository. This effectively forces repositories to install their own copies of actions to control which actions may be executed.</p>\n\n<p>To enable this setting, go to the organization Settings page, go to “Actions”, and then select “Enable local Actions only for this organization.”<sup id=\"fnref:11:1\"><a href="https://humanwhocodes.com/feeds/\&quot;#fn:11\"" class=\"footnote\">10</a></sup></p>\n\n<h4 id=\"identifying-safe-actions\">Identifying safe Actions</h4>\n\n<p>There are a couple ways you can know that a published GitHub Action is safe:</p>\n\n<ol>\n  <li>It begins with <code class=\"highlighter-rouge\">action/</code>, such as <code class=\"highlighter-rouge\">actions/checkout</code>. These are published by GitHub itself and are therefore safe to use.</li>\n  <li>The action is published in the GitHub Action Marketplace<sup id=\"fnref:12\"><a href="https://humanwhocodes.com/feeds/\&quot;#fn:12\"" class=\"footnote\">11</a></sup> and has a “verified creator” badge next to the author. This indicates that the creator is a verified partner of GitHub and therefore the action is safe.</li>\n</ol>\n\n<p>If an action doesn’t fall into one of these two categories, that doesn’t mean it’s not safe, just that you need to do more research into the action.</p>\n\n<p>All actions in the GitHub Action Marketplace link back to the source code repository they are published from. You should always look at the source code to ensure that it is performing the operations it claims to be performing (and doing nothing else). Of course, you happen to know and trust the publisher of the Action, you may want to trust that the action does what it says.</p>\n\n<h4 id=\"provide-secrets-one-command-at-a-time\">Provide secrets one command at a time</h4>\n\n<p>When configuring a workflow, ensure that you are limiting the number of commands with access. For example, you might configure a secret as an environment variable to run a command, such as this:</p>\n\n<div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>steps:\n  - name: Run a command\n    run: some-command\n    env:\n      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n</code></pre></div></div>\n\n<p>Here, the <code class=\"highlighter-rouge\">GITHUB_TOKEN</code> environment variable is set with the <code class=\"highlighter-rouge\">secrets.GITHUB_TOKEN</code> secret value. The <code class=\"highlighter-rouge\">some-command</code> utility has access to that environment variable. Assuming that <code class=\"highlighter-rouge\">some-command</code> is a trusted utility, there is no problem. The problem occurs when you run multiple commands inside of a <code class=\"highlighter-rouge\">run</code> statement, such as:</p>\n\n<div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>steps:\n  - name: Run a command\n  - run: |\n      some-command\n      some-other-command\n      yet-another-command\n    env:\n      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n</code></pre></div></div>\n\n<p>In this case, the <code class=\"highlighter-rouge\">run</code> statement is running multiple commands at once. The <code class=\"highlighter-rouge\">env</code> statement now applies to all of those commands and will be available whether they need access to <code class=\"highlighter-rouge\">GITHUB_TOKEN</code> or not. If the only utility that needs <code class=\"highlighter-rouge\">GITHUB_TOKEN</code> is <code class=\"highlighter-rouge\">some-command</code>, then limit the use of <code class=\"highlighter-rouge\">env</code> to just that command, such as:</p>\n\n<div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>steps:\n  - name: Run a command\n    run: some-command\n    env:\n      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n  - run: |\n      some-other-command\n      yet-another-command\n</code></pre></div></div>\n\n<p>With this rewritten example, only <code class=\"highlighter-rouge\">some-command</code> has access to <code class=\"highlighter-rouge\">GITHUB_TOKEN</code> while the other commands are run separately without <code class=\"highlighter-rouge\">GITHUB_TOKEN</code>. Limiting which commands have access to your secrets is another important step in preventing credential stealing.</p>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<p>While GitHub Actions are a great addition to the GitHub development ecosystem, it’s still important to take security into account when using them. The security considerations are quite a bit different when you’re dealing with a GitHub organization maintaining projects rather than a single maintainer. The more people who can commit directly to your development branch, the more chances there are for security breaches.</p>\n\n<p>The most important takeaway from this post is that you need to have protections, both automated and manual, in order to safely using GitHub Actions in organizations. Whether you decide to only allow local actions or to assign someone as a code owner who must approve all workflows, it’s better to have some protections in place than to have none. That is especially true when you have credentials stored as GitHub secrets that would allow people to interact with outside systems on your behalf.</p>\n\n<p>Remember, you are only as secure as your least secure user, branch, or repository.</p>\n\n<div class=\"footnotes\">\n  <ol>\n    <li id=\"fn:1\">\n      <p><a href="https://humanwhocodes.com/feeds/\&quot;https://docs.github.com/en/actions\&quot;">GitHub: GitHub Actions</a> <a href="https://humanwhocodes.com/feeds/\&quot;#fnref:1\"" class=\"reversefootnote\">&#8617;</a></p>\n    </li>\n    <li id=\"fn:2\">\n      <p><a href="https://humanwhocodes.com/feeds/\&quot;https://help.github.com/en/actions/configuring-and-managing-workflows/configuring-and-managing-workflow-files-and-runs\&quot;">GitHub: Configuring and managing workflow files and runs</a> <a href="https://humanwhocodes.com/feeds/\&quot;#fnref:2\"" class=\"reversefootnote\">&#8617;</a></p>\n    </li>\n    <li id=\"fn:3\">\n      <p><a href="https://humanwhocodes.com/feeds/\&quot;https://help.github.com/en/actions/configuring-and-managing-workflows/creating-and-storing-encrypted-secrets\&quot;">GitHub: Creating and storing encrypted secrets</a> <a href="https://humanwhocodes.com/feeds/\&quot;#fnref:3\"" class=\"reversefootnote\">&#8617;</a></p>\n    </li>\n    <li id=\"fn:4\">\n      <p><a href="https://humanwhocodes.com/feeds/\&quot;https://www.schneier.com/blog/archives/2016/05/credential_stea.html\&quot;">Credential Stealing as an Attack Vector</a> <a href="https://humanwhocodes.com/feeds/\&quot;#fnref:4\"" class=\"reversefootnote\">&#8617;</a></p>\n    </li>\n    <li id=\"fn:5\">\n      <p><a href="https://humanwhocodes.com/feeds/\&quot;https://eslint.org/blog/2018/07/postmortem-for-malicious-package-publishes\&quot;">ESLint postmortem for malicious package publishes</a> <a href="https://humanwhocodes.com/feeds/\&quot;#fnref:5\"" class=\"reversefootnote\">&#8617;</a></p>\n    </li>\n    <li id=\"fn:6\">\n      <p><a href="https://humanwhocodes.com/feeds/\&quot;https://help.github.com/en/github/authenticating-to-github/securing-your-account-with-two-factor-authentication-2fa\&quot;">GitHub: Securing your account with two-factor authentication (2FA)</a> <a href="https://humanwhocodes.com/feeds/\&quot;#fnref:6\"" class=\"reversefootnote\">&#8617;</a></p>\n    </li>\n    <li id=\"fn:7\">\n      <p><a href="https://humanwhocodes.com/feeds/\&quot;https://help.github.com/en/github/setting-up-and-managing-organizations-and-teams/requiring-two-factor-authentication-in-your-organization\&quot;">GitHub: Requiring two-factor authentication in your organization</a> <a href="https://humanwhocodes.com/feeds/\&quot;#fnref:7\"" class=\"reversefootnote\">&#8617;</a></p>\n    </li>\n    <li id=\"fn:8\">\n      <p><a href="https://humanwhocodes.com/feeds/\&quot;https://docs.github.com/en/github/administering-a-repository/configuring-protected-branches\&quot;">GitHub: Configuring protected branches</a> <a href="https://humanwhocodes.com/feeds/\&quot;#fnref:8\"" class=\"reversefootnote\">&#8617;</a> <a href="https://humanwhocodes.com/feeds/\&quot;#fnref:8:1\"" class=\"reversefootnote\">&#8617;<sup>2</sup></a></p>\n    </li>\n    <li id=\"fn:10\">\n      <p><a href="https://humanwhocodes.com/feeds/\&quot;https://github.community/t/allowing-github-actions-bot-to-push-to-protected-branch/16536/2\&quot;">Allowing github-actions(bot) to push to protected branch</a> <a href="https://humanwhocodes.com/feeds/\&quot;#fnref:10\"" class=\"reversefootnote\">&#8617;</a></p>\n    </li>\n    <li id=\"fn:11\">\n      <p><a href="https://humanwhocodes.com/feeds/\&quot;https://docs.github.com/en/github/setting-up-and-managing-organizations-and-teams/disabling-or-limiting-github-actions-for-your-organization\&quot;">GitHub: Disabling or limiting GitHub Actions for your organization</a> <a href="https://humanwhocodes.com/feeds/\&quot;#fnref:11\"" class=\"reversefootnote\">&#8617;</a> <a href="https://humanwhocodes.com/feeds/\&quot;#fnref:11:1\"" class=\"reversefootnote\">&#8617;<sup>2</sup></a></p>\n    </li>\n    <li id=\"fn:12\">\n      <p><a href="https://humanwhocodes.com/feeds/\&quot;https://github.com/marketplace?type=actions\&quot;">GitHub Actions Marketplace</a> <a href="https://humanwhocodes.com/feeds/\&quot;#fnref:12\"" class=\"reversefootnote\">&#8617;</a></p>\n    </li>\n  </ol>\n</div>\n",
            "url": "https://humanwhocodes.com/blog/2020/07/safely-use-github-actions-in-organizations/",
            
            
            
            "tags": ["GitHub","GitHub Actions","Tokens","Keys","Secrets","Environment Variables"],
            
            "date_published": "2020-07-21T00:00:00+00:00",
            "date_modified": "2020-07-21T00:00:00+00:00",
            
                "author": 
                ""
                
            
        },
    
        {
            "id": "https://humanwhocodes.com/blog/2020/02/how-i-think-about-solving-problems/",
            "title": "How I think about solving problems",
            "summary": "Early on in my career as a software developer I thought my primary contribution was writing code. After all, software engineers are paid to ship software and writing code is a key component of that. It took several years for me to realize that there are numerous other contributions that go into shipping software (if not, why are there managers, designers, product managers, salespeople, etc.?). I slowly came to see myself less as a coder and more as a problem solver. Sometimes the problem could be solved by writing code while other times the solution didn’t involve code at all.",
            "content_text": "Early on in my career as a software developer I thought my primary contribution was writing code. After all, software engineers are paid to ship software and writing code is a key component of that. It took several years for me to realize that there are numerous other contributions that go into shipping software (if not, why are there managers, designers, product managers, salespeople, etc.?). I slowly came to see myself less as a coder and more as a problem solver. Sometimes the problem could be solved by writing code while other times the solution didn’t involve code at all.\n\nOnce I realized my value as a problem solver, I set out to determine the most efficient way to address problems as they occurred. Moving into a tech lead position immediately thrust me into the middle of numerous ongoing daily problems. I had to figure out some way to act decisively, prioritize effectively, and solve as many problems as possible.\n\nEventually, I settled on a list of questions I would ask myself for each problem as it arose. I found that asking these questions, in order, helped me make the best decision possible:\n\n\n  Is this really a problem?\n  Does the problem need to be solved?\n  Does the problem need to be solved now?\n  Does the problem need to be solved by me?\n  Is there a simpler problem I can solve instead?\n\n\nEach question is designed to reveal something about the problem that allows you to go to the next step, or if you’re lucky, just avoid the problem altogether. There is some nuance to each question, so it’s helpful to describe each in more detail.\n\nIs this really a problem?\n\nThe first step to addressing any problem is to determine if it actually is a problem, and that requires a definition. For the purposes of this article, I’ll define a problem as anything that leads to an objectively undesirable outcome if not addressed. That means leaving your window open over night when it’s raining is a problem because the inside will get wet and that could potentially ruin your floor, furniture, or other possessions. A solution to the problem prevents the undesirable outcome, so closing the window before you go to bed will prevent your belongings from being ruined.\n\nWhen in a leadership role, it’s common to receive complaints that sound like problems but are just opinions. For example, I’ve spoken with many software engineers who immediately upon starting a new job or joining a new team feel like the team is doing many things wrong: the framework they are using is wrong; the code style is wrong; the way files are organized is wrong. How will they ever get around to fixing all of these problems? It’s a monumental task.\n\nI ask these software engineers this question: is it a problem or is it just different?\nIn many cases “wrong” just means “not what I’m used to or prefer.” If you can identify that a reported problem is not, in fact, a problem, then you no longer need to spend resources on a solution. A team member being unhappy with the way things are done is not an objectively undesirable outcome. There is nothing inherently problematic with disagreements on a team.\nIf you’re able to determine that a problem is not a problem, then you can move on to other tasks.\n\nDoes the problem need to be solved?\n\nAfter you’ve determined that there is a problem, then next step is to determine if the problem needs to be solved. A problem doesn’t need to be solved if the undesirable outcome is tolerable and either constant or slow growing. For example, if a section of a web application is used by only admins (typically five or fewer people) and is slower to load than the rest of the application, you could determine that’s something you’re okay with. The problem is narrowly contained and affects a small number of people on the rare occasion that they use it. While it would be nice to solve the problem, it’s not required and the downside is small enough that not addressing it is unlikely to lead to bigger problems down the road.\nAnother way to ask this question is, “what happens if the problem is never solved?” If the answer is, “not much,” then it might be okay to not solve the problem.\n\nDoes the problem need to be solved now?\n\nIf you have a problem that needs to be solved, then the next question is to determine whether it needs to be solved now or if it can wait until later. Some problems are obviously urgent and need to be addressed immediately: the site is down, the application crashes whenever someone uses it, and so on. These problems need to be addressed because the undesirable outcome is immediate, ongoing, and likely to grow: the longer the site is down, the more money the company loses; the more times the application crashes, the more likely a customer will use a competitor.\n\nEqually important is to determine if solving the problem can be deferred. There are a surprising number of non-urgent problems that bubble up to leadership. These are problems that need to be solved eventually but not immediately. The most common problem in software that fits this description is technical debt. Technical debt is any part of your application (or related infrastructure) that is not performing as well as it should. It’s something that will not cause a significant problem today or tomorrow, but it will eventually. In my experience, tech debt is rarely addressed until it becomes an emergency (which is too late). However, tech debt isn’t something that everything else should be dropped to address. It falls into that middle area where it shouldn’t be done today but definitely needs to get done.\n\nIf a problem doesn’t have to be addressed now, it’s usually a good idea to defer it. By defer it, I mean plan to address it in the future, not avoid doing anything about it. If now is not the right time to solve the problem then decide when is: in a week, a month, six months? Put it on your calendar or task management system so you won’t lose track of it.\nAnother way to ask this question is, “is the problem urgent?”\n\nDoes the problem need to be solved by me?\n\nThis question is most applicable to anyone in a leadership position but could also apply to anyone who already has too many tasks to complete. Is this problem something that requires special skills only you possess, or is it possible someone else could complete the task?\n\nThis is a question I adapted from advice one mentor gave me. I was complaining about how I just seemed to be collecting tasks and couldn’t keep up. He said I should ask myself, “is this a Nicholas problem?” There were certain things only I knew how to do and those were the things I should be focusing. Anything else should be delegated to someone else. Another important tip he gave me: just because you can do something faster than someone else doesn’t mean you should do it yourself. For most non-urgent tasks, it doesn’t matter if it is completed in one day or two.\n\nSo if the problem can be solved by someone else, and you’re either a leader or already have too much work, then delegate.\n\nIs there an easier problem I can solve instead?\n\nThe final step in the process once you’ve determined that there’s an urgent problem that you need to solve personally is to determine if there’s an easier problem to solve. The key is that the easier problem must give you the same or a similar outcome to the original problem while saving time (or other resources).\n\nWhen I was working on the new My Yahoo! page, one of our product managers proclaimed that beta customers had requested we add resizable columns to the page. This was something that would be fairly complicated because it was 2006 and web browsers were not anywhere as capable as they are today. The task wasn’t impossible, but on a page that was already overflowing with JavaScript, adding more to manage complex mouse movements and needing to save that information back to the server was a lot of painstaking error-prone work.\n\nI asked for the raw data from the customer feedback sessions to see if I could figure out what the problem was that resizable columns would solve. In turned out no customers had asked for resizable columns (the product manager had inferred this request from the complaints). Instead, they were complaining that they couldn’t get the new My Yahoo! page to look like their old My Yahoo! page. We had created completely new layouts that didn’t match the old layouts, but it turned out people really liked the old layouts. This allowed us to focus on an easier problem: recreating the old layouts.\n\nSo, we spent a little time recreating the old layouts in the new page and re-ran the customer sessions. People were delighted that the new page now looked very similar to the old page. By solving the easier problem, we saved a lot of development time and the customers ended up just as happy.\n\nThere isn’t always an easier problem to solve, but it’s worth taking a moment to check whenever a problem seems particularly large or difficult.\n\nConclusion\n\nThese five questions have become the basis for my problem-solving approach not just in my work, but in my life in general. Going through these questions whenever presented with a problem has made me a more efficient problem solver and, in general, happier with the outcomes. Can’t calculate a 15% tip for my waiter? I calculate 20% instead (or 10% if I’m displeased with the service). My high school alumni office keeps sending me notices that I’m not a verified alumnus? That’s not a problem I need to solve. I need to get a new driver’s license if I want to travel within the United States? That’s a problem I need to address this year, but not right now.\n\nThere are many ways to approach problem solving, and I’m not sure my approach will work for everyone. What I do know is that having an approach to solving problems is better than not having any approach. Life is filled with problems, small and large, that you’ll face every day. Having a clearly defined, repeatable strategy is the easiest way to make problem solving more tolerable.\n",
            "content_html": "<p>Early on in my career as a software developer I thought my primary contribution was writing code. After all, software engineers are paid to ship software and writing code is a key component of that. It took several years for me to realize that there are numerous other contributions that go into shipping software (if not, why are there managers, designers, product managers, salespeople, etc.?). I slowly came to see myself less as a coder and more as a problem solver. Sometimes the problem could be solved by writing code while other times the solution didn’t involve code at all.</p>\n\n<p>Once I realized my value as a problem solver, I set out to determine the most efficient way to address problems as they occurred. Moving into a tech lead position immediately thrust me into the middle of numerous ongoing daily problems. I had to figure out some way to act decisively, prioritize effectively, and solve as many problems as possible.</p>\n\n<p>Eventually, I settled on a list of questions I would ask myself for each problem as it arose. I found that asking these questions, in order, helped me make the best decision possible:</p>\n\n<ol>\n  <li>Is this really a problem?</li>\n  <li>Does the problem need to be solved?</li>\n  <li>Does the problem need to be solved now?</li>\n  <li>Does the problem need to be solved by me?</li>\n  <li>Is there a simpler problem I can solve instead?</li>\n</ol>\n\n<p>Each question is designed to reveal something about the problem that allows you to go to the next step, or if you’re lucky, just avoid the problem altogether. There is some nuance to each question, so it’s helpful to describe each in more detail.</p>\n\n<h2 id=\"is-this-really-a-problem\">Is this really a problem?</h2>\n\n<p>The first step to addressing any problem is to determine if it actually is a problem, and that requires a definition. For the purposes of this article, I’ll define a problem as anything that leads to an objectively undesirable outcome if not addressed. That means leaving your window open over night when it’s raining is a problem because the inside will get wet and that could potentially ruin your floor, furniture, or other possessions. A solution to the problem prevents the undesirable outcome, so closing the window before you go to bed will prevent your belongings from being ruined.</p>\n\n<p>When in a leadership role, it’s common to receive complaints that sound like problems but are just opinions. For example, I’ve spoken with many software engineers who immediately upon starting a new job or joining a new team feel like the team is doing many things wrong: the framework they are using is wrong; the code style is wrong; the way files are organized is wrong. How will they ever get around to fixing all of these problems? It’s a monumental task.</p>\n\n<p>I ask these software engineers this question: is it a problem or is it just different?\nIn many cases “wrong” just means “not what I’m used to or prefer.” If you can identify that a reported problem is not, in fact, a problem, then you no longer need to spend resources on a solution. A team member being unhappy with the way things are done is not an objectively undesirable outcome. There is nothing inherently problematic with disagreements on a team.\nIf you’re able to determine that a problem is not a problem, then you can move on to other tasks.</p>\n\n<h2 id=\"does-the-problem-need-to-be-solved\">Does the problem need to be solved?</h2>\n\n<p>After you’ve determined that there is a problem, then next step is to determine if the problem needs to be solved. A problem doesn’t need to be solved if the undesirable outcome is tolerable and either constant or slow growing. For example, if a section of a web application is used by only admins (typically five or fewer people) and is slower to load than the rest of the application, you could determine that’s something you’re okay with. The problem is narrowly contained and affects a small number of people on the rare occasion that they use it. While it would be nice to solve the problem, it’s not required and the downside is small enough that not addressing it is unlikely to lead to bigger problems down the road.\nAnother way to ask this question is, “what happens if the problem is never solved?” If the answer is, “not much,” then it might be okay to not solve the problem.</p>\n\n<h2 id=\"does-the-problem-need-to-be-solved-now\">Does the problem need to be solved now?</h2>\n\n<p>If you have a problem that needs to be solved, then the next question is to determine whether it needs to be solved now or if it can wait until later. Some problems are obviously urgent and need to be addressed immediately: the site is down, the application crashes whenever someone uses it, and so on. These problems need to be addressed because the undesirable outcome is immediate, ongoing, and likely to grow: the longer the site is down, the more money the company loses; the more times the application crashes, the more likely a customer will use a competitor.</p>\n\n<p>Equally important is to determine if solving the problem can be deferred. There are a surprising number of non-urgent problems that bubble up to leadership. These are problems that need to be solved eventually but not immediately. The most common problem in software that fits this description is technical debt. Technical debt is any part of your application (or related infrastructure) that is not performing as well as it should. It’s something that will not cause a significant problem today or tomorrow, but it will eventually. In my experience, tech debt is rarely addressed until it becomes an emergency (which is too late). However, tech debt isn’t something that everything else should be dropped to address. It falls into that middle area where it shouldn’t be done today but definitely needs to get done.</p>\n\n<p>If a problem doesn’t have to be addressed now, it’s usually a good idea to defer it. By defer it, I mean plan to address it in the future, not avoid doing anything about it. If now is not the right time to solve the problem then decide when is: in a week, a month, six months? Put it on your calendar or task management system so you won’t lose track of it.\nAnother way to ask this question is, “is the problem urgent?”</p>\n\n<h2 id=\"does-the-problem-need-to-be-solved-by-me\">Does the problem need to be solved by me?</h2>\n\n<p>This question is most applicable to anyone in a leadership position but could also apply to anyone who already has too many tasks to complete. Is this problem something that requires special skills only you possess, or is it possible someone else could complete the task?</p>\n\n<p>This is a question I adapted from advice one mentor gave me. I was complaining about how I just seemed to be collecting tasks and couldn’t keep up. He said I should ask myself, “is this a Nicholas problem?” There were certain things only I knew how to do and those were the things I should be focusing. Anything else should be delegated to someone else. Another important tip he gave me: just because you can do something faster than someone else doesn’t mean you should do it yourself. For most non-urgent tasks, it doesn’t matter if it is completed in one day or two.</p>\n\n<p>So if the problem can be solved by someone else, and you’re either a leader or already have too much work, then delegate.</p>\n\n<h2 id=\"is-there-an-easier-problem-i-can-solve-instead\">Is there an easier problem I can solve instead?</h2>\n\n<p>The final step in the process once you’ve determined that there’s an urgent problem that you need to solve personally is to determine if there’s an easier problem to solve. The key is that the easier problem must give you the same or a similar outcome to the original problem while saving time (or other resources).</p>\n\n<p>When I was working on the new My Yahoo! page, one of our product managers proclaimed that beta customers had requested we add resizable columns to the page. This was something that would be fairly complicated because it was 2006 and web browsers were not anywhere as capable as they are today. The task wasn’t impossible, but on a page that was already overflowing with JavaScript, adding more to manage complex mouse movements and needing to save that information back to the server was a lot of painstaking error-prone work.</p>\n\n<p>I asked for the raw data from the customer feedback sessions to see if I could figure out what the problem was that resizable columns would solve. In turned out no customers had asked for resizable columns (the product manager had inferred this request from the complaints). Instead, they were complaining that they couldn’t get the new My Yahoo! page to look like their old My Yahoo! page. We had created completely new layouts that didn’t match the old layouts, but it turned out people really liked the old layouts. This allowed us to focus on an easier problem: recreating the old layouts.</p>\n\n<p>So, we spent a little time recreating the old layouts in the new page and re-ran the customer sessions. People were delighted that the new page now looked very similar to the old page. By solving the easier problem, we saved a lot of development time and the customers ended up just as happy.</p>\n\n<p>There isn’t always an easier problem to solve, but it’s worth taking a moment to check whenever a problem seems particularly large or difficult.</p>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<p>These five questions have become the basis for my problem-solving approach not just in my work, but in my life in general. Going through these questions whenever presented with a problem has made me a more efficient problem solver and, in general, happier with the outcomes. Can’t calculate a 15% tip for my waiter? I calculate 20% instead (or 10% if I’m displeased with the service). My high school alumni office keeps sending me notices that I’m not a verified alumnus? That’s not a problem I need to solve. I need to get a new driver’s license if I want to travel within the United States? That’s a problem I need to address this year, but not right now.</p>\n\n<p>There are many ways to approach problem solving, and I’m not sure my approach will work for everyone. What I do know is that having an approach to solving problems is better than not having any approach. Life is filled with problems, small and large, that you’ll face every day. Having a clearly defined, repeatable strategy is the easiest way to make problem solving more tolerable.</p>\n",
            "url": "https://humanwhocodes.com/blog/2020/02/how-i-think-about-solving-problems/",
            
            
            
            "tags": ["Problem Solving","Work","Skills"],
            
            "date_published": "2020-02-18T00:00:00+00:00",
            "date_modified": "2020-02-18T00:00:00+00:00",
            
                "author": 
                ""
                
            
        },
    
        {
            "id": "https://humanwhocodes.com/blog/2019/10/scheduling-jekyll-posts-netlify-github-actions/",
            "title": "Scheduling Jekyll posts with Netlify and GitHub Actions",
            "summary": "Last year, I wrote about how to schedule Jekyll posts using Netlify and AWS Lambda[^1]. I used that approach from the moment I wrote that blog post up until today. What changed? In the past year, GitHub has introduced GitHub Actions[^2], a way to run container jobs triggered by different GitHub events. One of those events is a schedule defined in start cron format. So now instead of using AWS to schedule a cron job to deploy my static site, I use a GitHub Action.",
            "content_text": "Last year, I wrote about how to schedule Jekyll posts using Netlify and AWS Lambda[^1]. I used that approach from the moment I wrote that blog post up until today. What changed? In the past year, GitHub has introduced GitHub Actions[^2], a way to run container jobs triggered by different GitHub events. One of those events is a schedule defined in start cron format. So now instead of using AWS to schedule a cron job to deploy my static site, I use a GitHub Action.\n\n\n  For the sake of completeness, I’m duplicating some of the relevant content from my original post.\n\n\nConfiguring Jekyll\n\nBy default, Jekyll generates all blog posts in the _posts directory regardless of the publish date associated with each. That obviously doesn’t work well when you want to schedule posts to be published in the future, so the first step is to configure Jekyll to ignore future posts. To do so, add this key to Jekyll’s _config.yml:\n\nfuture: false\n\n\nSetting future to false tells Jekyll to skip any posts with a publish date in the future. You can then set the date field in the front matter of a post to a future date and know that the post will not be generated until then, like this:\n\n---\nlayout: post\ntitle: \"My future post\"\ndate: 2075-01-01 00:00:00\n---\n\n\nThis post will be published on January 1, 2075, so it will not be built by Jekyll until that point in time. I find it easier to schedule all posts for midnight so that whenever the site gets published, so long as the date matches, the post will always be generated.\n\nGenerating a Netlify build hook\n\nOne of the things I like about Netlify is that you can trigger a new site build whenever you want, either manually or programmatically. Netlify has a useful feature called a build hook[^3], which is a URL that triggers a new build. To generate a new build hook, go to the Netlify dashboard for your domain and go Site Settings and then to the Build &amp; Deploy page. When you scroll down, you’ll see a section for Build Hooks. Click “Add build hook”, give your new hook a name (something like “Daily Cron Job” would be appropriate here), and choose the branch to build from.\n\n\n\nYou’ll be presented with a new URL that looks something like this:\n\nhttps://api.netlify.com/build_hooks/{some long unique identifier}\n\n\nWhenever you send a POST request to the build hook, Netlify will pull the latest files from the GitHub repository, build the site, and deploy it. This is quite useful because you don’t need to worry about authenticating against the Netlify API; you can use this URL without credentials. Just make sure to keep this URL a secret. You can see the URL in your list of build hooks on the same page.\n\n\n\n(Don’t worry, the build hook URL in the screenshot has already been deleted.)\n\nStoring the build hook as a GitHub secret\n\nAlong with GitHub Actions, GitHub introduced a new feature that allows you to store secrets[^4] for each repository. Each repository has its own secret store that allows anyone with write access to store key-value pairs of sensitive information. Each key is written once and is never shown in the UI again but you can read that information from within a GitHub workflow file.\n\nTo find the secret store for your repository, click on the Settings tab at the top of the repository page, then select Secrets from the left menu. Type a name for your secret (for the purposes of this post, I used netlify_build_url) and paste in the value. Click the Add Secret button to store the secret.\n\n\n\nWith the Netlify build hook stored safely in the secret store, it’s time to create the GitHub workflow file.\n\nSetting up the GitHub Workflow\n\nGitHub Actions are triggered by workflows[^5] defined within your GitHub repository. Workflow files are defined in YAML format and must be stored in the .github/workflows folder of your project for GitHub to automatically detect them. An action starts up a container or virtual machine and runs any number of commands on it. You can choose to use MacOS, Windows, or Ubuntu environments to run the commands. You only need a way to make HTTP requests in order to trigger the Netlify build hook, so the Ubuntu environment (with curl available) is an easy choice.\n\nEach workflow is triggered by one or more events specified by the on key. To create a cron job, define the schedule array and include at least one object containing a cron key. For example:\n\nname: Netlify Deploy\n\non:\n  schedule:\n  - cron: \"0 15 * * *\"\n\n\nThis workflow is triggered at 3pm UTC every day of the week. All of the POSIX cron syntax is supported in workflows, making it easy to translate existing cron jobs.\n\n\n  Keep in mind that the cron job schedule is always relative to UTC time. Make sure to take into account your time zone when determining your schedule.\n\n\nThe next step is to set up a job to be run on Ubuntu. To do that, create a jobs object. Here’s an example:\n\nname: Netlify Deploy\n\non:\n  schedule:\n  - cron: \"0 15 * * *\"\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n    - name: Trigger Netlify Hook\n      run: curl -X POST ${{ secrets.netlify_build_url }}\n\n\nEach property of the jobs object is a separate job to be run (in order). The name of the job doesn’t really matter as long as it’s unique (build is a common job name). The runs-on property specifies the environment to run the command and steps is an array of commands to execute in the environment. There’s only one step in this example, which is triggering the Netlify hook. The name property should be set to something meaningful because it is displayed in the GitHub interface. The run property is the actual command to run. In this case, the command is a curl POST request to a specified URL, which is represented by a secret value. When the job executes, the Netlify deploy is triggered.\n\nConclusion\n\nI switched this website over to use this GitHub Action approach as soon as I got access to the GitHub Actions beta. So far, I haven’t seen any difference in the end result (publishing my blog daily) and being able to modify the cron job within the website repository streamlines my work. I currently have this website being autogenerated every morning, and that includes pulling in new data via various APIs and publishing future-dated posts.\n\nWhile I enjoyed experimenting with AWS Cloudwatch and Lambdas for scheduling future posts, I now feel that GitHub Actions is a better solution.\n\nReferences\n\n\n  Scheduling Jekyll posts with Netlify and AWS\n  About GitHub Actions\n  Netlify Webhooks - Incoming Hooks\n  GitHub Actions - Creating and using secrets\n  GitHub Actions - Configuring a Workflow\n\n",
            "content_html": "<p>Last year, I wrote about how to schedule Jekyll posts using Netlify and AWS Lambda[^1]. I used that approach from the moment I wrote that blog post up until today. What changed? In the past year, GitHub has introduced GitHub Actions[^2], a way to run container jobs triggered by different GitHub events. One of those events is a schedule defined in start cron format. So now instead of using AWS to schedule a cron job to deploy my static site, I use a GitHub Action.</p>\n\n<aside>\n  <p>For the sake of completeness, I’m duplicating some of the relevant content from my original post.</p>\n</aside>\n\n<h2 id=\"configuring-jekyll\">Configuring Jekyll</h2>\n\n<p>By default, Jekyll generates all blog posts in the <code class=\"highlighter-rouge\">_posts</code> directory regardless of the publish date associated with each. That obviously doesn’t work well when you want to schedule posts to be published in the future, so the first step is to configure Jekyll to ignore future posts. To do so, add this key to Jekyll’s <code class=\"highlighter-rouge\">_config.yml</code>:</p>\n\n<div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>future: false\n</code></pre></div></div>\n\n<p>Setting <code class=\"highlighter-rouge\">future</code> to <code class=\"highlighter-rouge\">false</code> tells Jekyll to skip any posts with a publish date in the future. You can then set the <code class=\"highlighter-rouge\">date</code> field in the front matter of a post to a future date and know that the post will not be generated until then, like this:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"o\">---</span>\n<span class=\"nx\">layout</span><span class=\"p\">:</span> <span class=\"nx\">post</span>\n<span class=\"nx\">title</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">My future post</span><span class=\"dl\">\"</span>\n<span class=\"nx\">date</span><span class=\"p\">:</span> <span class=\"mi\">2075</span><span class=\"o\">-</span><span class=\"mi\">01</span><span class=\"o\">-</span><span class=\"mi\">01</span> <span class=\"mi\">00</span><span class=\"p\">:</span><span class=\"mi\">00</span><span class=\"p\">:</span><span class=\"mi\">00</span>\n<span class=\"o\">---</span>\n</code></pre></div></div>\n\n<p>This post will be published on January 1, 2075, so it will not be built by Jekyll until that point in time. I find it easier to schedule all posts for midnight so that whenever the site gets published, so long as the date matches, the post will always be generated.</p>\n\n<h2 id=\"generating-a-netlify-build-hook\">Generating a Netlify build hook</h2>\n\n<p>One of the things I like about Netlify is that you can trigger a new site build whenever you want, either manually or programmatically. Netlify has a useful feature called a build hook[^3], which is a URL that triggers a new build. To generate a new build hook, go to the Netlify dashboard for your domain and go Site Settings and then to the Build &amp; Deploy page. When you scroll down, you’ll see a section for Build Hooks. Click “Add build hook”, give your new hook a name (something like “Daily Cron Job” would be appropriate here), and choose the branch to build from.</p>\n\n<p><img src="https://humanwhocodes.com/feeds/\&quot;https://humanwhocodes.com/images/posts/netlify-build-hooks.png\&quot;" alt=\"Netlify create build hook dialog\" /></p>\n\n<p>You’ll be presented with a new URL that looks something like this:</p>\n\n<div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>https://api.netlify.com/build_hooks/{some long unique identifier}\n</code></pre></div></div>\n\n<p>Whenever you send a <code class=\"highlighter-rouge\">POST</code> request to the build hook, Netlify will pull the latest files from the GitHub repository, build the site, and deploy it. This is quite useful because you don’t need to worry about authenticating against the Netlify API; you can use this URL without credentials. Just make sure to keep this URL a secret. You can see the URL in your list of build hooks on the same page.</p>\n\n<p><img src="https://humanwhocodes.com/feeds/\&quot;https://humanwhocodes.com/images/posts/netlify-build-hooks-2.png\&quot;" alt=\"Netlify build hooks list\" /></p>\n\n<p>(Don’t worry, the build hook URL in the screenshot has already been deleted.)</p>\n\n<h2 id=\"storing-the-build-hook-as-a-github-secret\">Storing the build hook as a GitHub secret</h2>\n\n<p>Along with GitHub Actions, GitHub introduced a new feature that allows you to store secrets[^4] for each repository. Each repository has its own secret store that allows anyone with write access to store key-value pairs of sensitive information. Each key is written once and is never shown in the UI again but you can read that information from within a GitHub workflow file.</p>\n\n<p>To find the secret store for your repository, click on the Settings tab at the top of the repository page, then select Secrets from the left menu. Type a name for your secret (for the purposes of this post, I used <code class=\"highlighter-rouge\">netlify_build_url</code>) and paste in the value. Click the Add Secret button to store the secret.</p>\n\n<p><img src="https://humanwhocodes.com/feeds/\&quot;https://humanwhocodes.com/images/posts/2019/github-secret-add.png\&quot;" alt=\"Storing a secret in GitHub\" /></p>\n\n<p>With the Netlify build hook stored safely in the secret store, it’s time to create the GitHub workflow file.</p>\n\n<h2 id=\"setting-up-the-github-workflow\">Setting up the GitHub Workflow</h2>\n\n<p>GitHub Actions are triggered by workflows[^5] defined within your GitHub repository. Workflow files are defined in YAML format and must be stored in the <code class=\"highlighter-rouge\">.github/workflows</code> folder of your project for GitHub to automatically detect them. An action starts up a container or virtual machine and runs any number of commands on it. You can choose to use MacOS, Windows, or Ubuntu environments to run the commands. You only need a way to make HTTP requests in order to trigger the Netlify build hook, so the Ubuntu environment (with <code class=\"highlighter-rouge\">curl</code> available) is an easy choice.</p>\n\n<p>Each workflow is triggered by one or more events specified by the <code class=\"highlighter-rouge\">on</code> key. To create a cron job, define the <code class=\"highlighter-rouge\">schedule</code> array and include at least one object containing a <code class=\"highlighter-rouge\">cron</code> key. For example:</p>\n\n<div class=\"language-yaml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"na\">name</span><span class=\"pi\">:</span> <span class=\"s\">Netlify Deploy</span>\n\n<span class=\"na\">on</span><span class=\"pi\">:</span>\n  <span class=\"na\">schedule</span><span class=\"pi\">:</span>\n  <span class=\"pi\">-</span> <span class=\"na\">cron</span><span class=\"pi\">:</span> <span class=\"s2\">\"</span><span class=\"s\">0</span><span class=\"nv\"> </span><span class=\"s\">15</span><span class=\"nv\"> </span><span class=\"s\">*</span><span class=\"nv\"> </span><span class=\"s\">*</span><span class=\"nv\"> </span><span class=\"s\">*\"</span>\n</code></pre></div></div>\n\n<p>This workflow is triggered at 3pm UTC every day of the week. All of the POSIX cron syntax is supported in workflows, making it easy to translate existing cron jobs.</p>\n\n<aside>\n  <p>Keep in mind that the cron job schedule is always relative to UTC time. Make sure to take into account your time zone when determining your schedule.</p>\n</aside>\n\n<p>The next step is to set up a job to be run on Ubuntu. To do that, create a <code class=\"highlighter-rouge\">jobs</code> object. Here’s an example:</p>\n\n<div class=\"language-yaml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"na\">name</span><span class=\"pi\">:</span> <span class=\"s\">Netlify Deploy</span>\n\n<span class=\"na\">on</span><span class=\"pi\">:</span>\n  <span class=\"na\">schedule</span><span class=\"pi\">:</span>\n  <span class=\"pi\">-</span> <span class=\"na\">cron</span><span class=\"pi\">:</span> <span class=\"s2\">\"</span><span class=\"s\">0</span><span class=\"nv\"> </span><span class=\"s\">15</span><span class=\"nv\"> </span><span class=\"s\">*</span><span class=\"nv\"> </span><span class=\"s\">*</span><span class=\"nv\"> </span><span class=\"s\">*\"</span>\n\n<span class=\"na\">jobs</span><span class=\"pi\">:</span>\n  <span class=\"na\">build</span><span class=\"pi\">:</span>\n    <span class=\"na\">runs-on</span><span class=\"pi\">:</span> <span class=\"s\">ubuntu-latest</span>\n    <span class=\"na\">steps</span><span class=\"pi\">:</span>\n    <span class=\"pi\">-</span> <span class=\"na\">name</span><span class=\"pi\">:</span> <span class=\"s\">Trigger Netlify Hook</span>\n      <span class=\"na\">run</span><span class=\"pi\">:</span> <span class=\"s\">curl -X POST ${{ secrets.netlify_build_url }}</span>\n</code></pre></div></div>\n\n<p>Each property of the <code class=\"highlighter-rouge\">jobs</code> object is a separate job to be run (in order). The name of the job doesn’t really matter as long as it’s unique (<code class=\"highlighter-rouge\">build</code> is a common job name). The <code class=\"highlighter-rouge\">runs-on</code> property specifies the environment to run the command and <code class=\"highlighter-rouge\">steps</code> is an array of commands to execute in the environment. There’s only one step in this example, which is triggering the Netlify hook. The <code class=\"highlighter-rouge\">name</code> property should be set to something meaningful because it is displayed in the GitHub interface. The <code class=\"highlighter-rouge\">run</code> property is the actual command to run. In this case, the command is a <code class=\"highlighter-rouge\">curl</code> POST request to a specified URL, which is represented by a secret value. When the job executes, the Netlify deploy is triggered.</p>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<p>I switched this website over to use this GitHub Action approach as soon as I got access to the GitHub Actions beta. So far, I haven’t seen any difference in the end result (publishing my blog daily) and being able to modify the cron job within the website repository streamlines my work. I currently have this website being autogenerated every morning, and that includes pulling in new data via various APIs and publishing future-dated posts.</p>\n\n<p>While I enjoyed experimenting with AWS Cloudwatch and Lambdas for scheduling future posts, I now feel that GitHub Actions is a better solution.</p>\n\n<h2 id=\"references\">References</h2>\n\n<ol>\n  <li><a href="https://humanwhocodes.com/feeds/\&quot;https://humanwhocodes.com/blog/2018/03/scheduling-jekyll-posts-netlify/\&quot;">Scheduling Jekyll posts with Netlify and AWS</a></li>\n  <li><a href="https://humanwhocodes.com/feeds/\&quot;https://help.github.com/en/articles/about-github-actions\&quot;">About GitHub Actions</a></li>\n  <li><a href="https://humanwhocodes.com/feeds/\&quot;https://www.netlify.com/docs/webhooks/#incoming-webhooks\"">Netlify Webhooks - Incoming Hooks</a></li>\n  <li><a href="https://humanwhocodes.com/feeds/\&quot;https://help.github.com/en/articles/virtual-environments-for-github-actions#creating-and-using-secrets-encrypted-variables\"">GitHub Actions - Creating and using secrets</a></li>\n  <li><a href="https://humanwhocodes.com/feeds/\&quot;https://help.github.com/en/articles/configuring-a-workflow\&quot;">GitHub Actions - Configuring a Workflow</a></li>\n</ol>\n",
            "url": "https://humanwhocodes.com/blog/2019/10/scheduling-jekyll-posts-netlify-github-actions/",
            
            
            
            "tags": ["Netlify","Static Site","GitHub","GitHub Action","Jekyll"],
            
            "date_published": "2019-10-01T00:00:00+00:00",
            "date_modified": "2019-10-01T00:00:00+00:00",
            
                "author": 
                ""
                
            
        },
    
        {
            "id": "https://humanwhocodes.com/blog/2019/09/securing-persistent-environment-variables-zeit-now/",
            "title": "Securing persistent environment variables using Vercel (formerly Vercel)",
            "summary": "I’m a big fan of Vercel1 as an application hosting provider. The way the service abstracts all of the cloud computing details and allows teams to focus on building and deploying web applications is fantastic. That said, I had a lot of trouble setting up secure environment variables for my first application to use. I was used to other services like Netlify2 and AwS Lambda3 exposing environment variables in the web interface to allow secure transmission of important information. When Vercel didn’t provide the same option in its web interface, I had to spend some time researching how to securely set persistent environment variables on my application.            Vercel &#8617;              Netlify &#8617;              AWS Lambda &#8617;      ",
            "content_text": "I’m a big fan of Vercel1 as an application hosting provider. The way the service abstracts all of the cloud computing details and allows teams to focus on building and deploying web applications is fantastic. That said, I had a lot of trouble setting up secure environment variables for my first application to use. I was used to other services like Netlify2 and AwS Lambda3 exposing environment variables in the web interface to allow secure transmission of important information. When Vercel didn’t provide the same option in its web interface, I had to spend some time researching how to securely set persistent environment variables on my application.\n\nFor the purposes of this post, assume that you need to set two environment variables, CLIENT_ID and CLIENT_SECRET. These values won’t change between deployments (presumably because they are used to authenticate the application with OAuth). As such, you don’t want to manually set these environment variables during every deployment but would rather have them stored and used each time the application is deployed.\n\nSetting environment variables in Vercel\n\nAccording to the documentation4, there are two ways to set environment variables for your Vercel project. The first is to use the vercel command line tool with the -e option, such as:\n\nvercel -e CLIENT_ID=\"abcdefg\" -e CLIENT_SECRET=\"123456789abcdefg\"\n\n\nThis approach not only sets the environment variables but also triggers a new deploy. The environment variables set here are valid only for the triggered deploy and will not automatically be available for any future deploys. You need to include the environment variables any time you deploy, which isn’t ideal when the information doesn’t need to change between deploys.\n\nThe second way to set environment variables is to include them in the vercel.json file. There are actually two keys that can contain environment variables in vercel.json:\n\n\n  env is used for environment variables needed only during application runtime.\n  build.env is used for environment variables needed only during the build process.\n\n\nWhether you need the environment variables in one or both modes is up to how your application is built.\n\n\n  Be particularly careful if your build process uses the same JavaScript configuration file as your runtime, as you may find both the build and runtime will require the same environment variables even if it’s not immediately obvious (this happened to me). This is common with universal frameworks such as Next.js and Nuxt.js.\n\n\nBoth the env and build.env keys are objects where the property names are the environment variables to set and the property values are the environment variable values. For example, the following sets CLIENT_ID and CLIENT_SECRET in both the build and runtime environments:\n\n{\n    \"env\": {\n        \"CLIENT_ID\": \"abcdefg\",\n        \"CLIENT_SECRET\": \"123456789abcdefg\"\n    },\n    \"build\": {\n        \"env\": {\n          \"CLIENT_ID\": \"abcdefg\",\n          \"CLIENT_SECRET\": \"123456789abcdefg\"\n        }\n    }\n}\n\n\nThe environment variables in vercel.json are set for each deploy automatically, so this is the easiest way to persist important information for your application. Of course, if your environment variables contain sensitive information then you wouldn’t want to check vercel.json into your source code repository. That’s not a great solution because vercel.json contains more than just environment variables. The solution is to use vercel.json with project secrets.\n\nUsing Vercel secrets\n\nVercel has the ability to store secrets associated with each project. You can set a secret using the vercel CLI. You can name these secrets whatever you want, but the documentation4 suggests using lower dash case, Here’s an example:\n\nvercel secrets add client-id abcdefg\nvercel secrets add client-secret 123456890abcdefg\n\n\nThese commands create two secrets: client-id and client-secret. These are automatically synced to my Vercel project and only available within that one project.\n\n\n  By default, secrets will be added to your personal account. To assign to a team account, be sure to use --scope team-name as part of the command.\n\n\nThe next step is to reference these secrets inside of the vercel.json file. To specify that the value is a secret, prefix it with the @ symbol. For example, the following sets CLIENT_ID and CLIENT_SECRET in both the build and runtime environments:\n\n{\n    \"env\": {\n        \"CLIENT_ID\": \"@client-id\",\n        \"CLIENT_SECRET\": \"@client-secret\"\n    },\n    \"build\": {\n        \"env\": {\n            \"CLIENT_ID\": \"@client-id\",\n            \"CLIENT_SECRET\": \"@client-secret\"\n        }\n    }\n}\n\n\nThis vercel.json configuration specifies that the environment variables should be filled with secret values. Each time your application is deployed, Vercel will read the client-id and client-secret secrets and expose them as the environment variables CLIENT_ID and CLIENT_SECRET. It’s now safe to check vercel.json into your source code repository because it’s not exposing any secure information. You can just use the vercel command to deploy your application knowing that all of the important environment variables will be added automatically.\n\nSummary\n\nThe way Vercel handles environment variables takes a little getting used to. Whereas other services allow you to specify secret environment variables directly in their web interface, Vercel requires using the vercel command line tool to do so.\n\nThe easiest way to securely persist environment variables in your Vercel project is to store the information in secrets and then specify the environment variables in your vercel.json file. Doing so allows you to check vercel.json into your source code repository without exposing sensitive information. Given the many configuration options available in vercel.json, it’s helpful to have that file in source control so you can make changes when necessary.\n\nUpdates\n\n2020-August-04 - Updated to rename from ZEIT Now to Vercel.\n\nReferences\n\n\n  \n    \n      Vercel &#8617;\n    \n    \n      Netlify &#8617;\n    \n    \n      AWS Lambda &#8617;\n    \n    \n      Vercel - Build Step - Environment Variables &#8617; &#8617;2\n    \n  \n\n",
            "content_html": "<p>I’m a big fan of Vercel<sup id=\"fnref:1\"><a href="https://humanwhocodes.com/feeds/\&quot;#fn:1\"" class=\"footnote\">1</a></sup> as an application hosting provider. The way the service abstracts all of the cloud computing details and allows teams to focus on building and deploying web applications is fantastic. That said, I had a lot of trouble setting up secure environment variables for my first application to use. I was used to other services like Netlify<sup id=\"fnref:2\"><a href="https://humanwhocodes.com/feeds/\&quot;#fn:2\"" class=\"footnote\">2</a></sup> and AwS Lambda<sup id=\"fnref:3\"><a href="https://humanwhocodes.com/feeds/\&quot;#fn:3\"" class=\"footnote\">3</a></sup> exposing environment variables in the web interface to allow secure transmission of important information. When Vercel didn’t provide the same option in its web interface, I had to spend some time researching how to securely set persistent environment variables on my application.</p>\n\n<p>For the purposes of this post, assume that you need to set two environment variables, <code class=\"highlighter-rouge\">CLIENT_ID</code> and <code class=\"highlighter-rouge\">CLIENT_SECRET</code>. These values won’t change between deployments (presumably because they are used to authenticate the application with OAuth). As such, you don’t want to manually set these environment variables during every deployment but would rather have them stored and used each time the application is deployed.</p>\n\n<h2 id=\"setting-environment-variables-in-vercel\">Setting environment variables in Vercel</h2>\n\n<p>According to the documentation<sup id=\"fnref:4\"><a href="https://humanwhocodes.com/feeds/\&quot;#fn:4\"" class=\"footnote\">4</a></sup>, there are two ways to set environment variables for your Vercel project. The first is to use the <code class=\"highlighter-rouge\">vercel</code> command line tool with the <code class=\"highlighter-rouge\">-e</code> option, such as:</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>vercel <span class=\"nt\">-e</span> <span class=\"nv\">CLIENT_ID</span><span class=\"o\">=</span><span class=\"s2\">\"abcdefg\"</span> <span class=\"nt\">-e</span> <span class=\"nv\">CLIENT_SECRET</span><span class=\"o\">=</span><span class=\"s2\">\"123456789abcdefg\"</span>\n</code></pre></div></div>\n\n<p>This approach not only sets the environment variables but also triggers a new deploy. The environment variables set here are valid only for the triggered deploy and will not automatically be available for any future deploys. You need to include the environment variables any time you deploy, which isn’t ideal when the information doesn’t need to change between deploys.</p>\n\n<p>The second way to set environment variables is to include them in the <code class=\"highlighter-rouge\">vercel.json</code> file. There are actually two keys that can contain environment variables in <code class=\"highlighter-rouge\">vercel.json</code>:</p>\n\n<ol>\n  <li><code class=\"highlighter-rouge\">env</code> is used for environment variables needed only during application runtime.</li>\n  <li><code class=\"highlighter-rouge\">build.env</code> is used for environment variables needed only during the build process.</li>\n</ol>\n\n<p>Whether you need the environment variables in one or both modes is up to how your application is built.</p>\n\n<aside class=\"warn\">\n  <p>Be particularly careful if your build process uses the same JavaScript configuration file as your runtime, as you may find both the build and runtime will require the same environment variables even if it’s not immediately obvious (this happened to me). This is common with universal frameworks such as Next.js and Nuxt.js.</p>\n</aside>\n\n<p>Both the <code class=\"highlighter-rouge\">env</code> and <code class=\"highlighter-rouge\">build.env</code> keys are objects where the property names are the environment variables to set and the property values are the environment variable values. For example, the following sets <code class=\"highlighter-rouge\">CLIENT_ID</code> and <code class=\"highlighter-rouge\">CLIENT_SECRET</code> in both the build and runtime environments:</p>\n\n<div class=\"language-json highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"p\">{</span><span class=\"w\">\n    </span><span class=\"nl\">\"env\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n        </span><span class=\"nl\">\"CLIENT_ID\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"abcdefg\"</span><span class=\"p\">,</span><span class=\"w\">\n        </span><span class=\"nl\">\"CLIENT_SECRET\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"123456789abcdefg\"</span><span class=\"w\">\n    </span><span class=\"p\">},</span><span class=\"w\">\n    </span><span class=\"nl\">\"build\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n        </span><span class=\"nl\">\"env\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n          </span><span class=\"nl\">\"CLIENT_ID\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"abcdefg\"</span><span class=\"p\">,</span><span class=\"w\">\n          </span><span class=\"nl\">\"CLIENT_SECRET\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"123456789abcdefg\"</span><span class=\"w\">\n        </span><span class=\"p\">}</span><span class=\"w\">\n    </span><span class=\"p\">}</span><span class=\"w\">\n</span><span class=\"p\">}</span><span class=\"w\">\n</span></code></pre></div></div>\n\n<p>The environment variables in <code class=\"highlighter-rouge\">vercel.json</code> are set for each deploy automatically, so this is the easiest way to persist important information for your application. Of course, if your environment variables contain sensitive information then you wouldn’t want to check <code class=\"highlighter-rouge\">vercel.json</code> into your source code repository. That’s not a great solution because <code class=\"highlighter-rouge\">vercel.json</code> contains more than just environment variables. The solution is to use <code class=\"highlighter-rouge\">vercel.json</code> with project secrets.</p>\n\n<h2 id=\"using-vercel-secrets\">Using Vercel secrets</h2>\n\n<p>Vercel has the ability to store secrets associated with each project. You can set a secret using the <code class=\"highlighter-rouge\">vercel</code> CLI. You can name these secrets whatever you want, but the documentation<sup id=\"fnref:4:1\"><a href="https://humanwhocodes.com/feeds/\&quot;#fn:4\"" class=\"footnote\">4</a></sup> suggests using lower dash case, Here’s an example:</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>vercel secrets add client-id abcdefg\nvercel secrets add client-secret 123456890abcdefg\n</code></pre></div></div>\n\n<p>These commands create two secrets: <code class=\"highlighter-rouge\">client-id</code> and <code class=\"highlighter-rouge\">client-secret</code>. These are automatically synced to my Vercel project and only available within that one project.</p>\n\n<aside class=\"warn\">\n  <p>By default, secrets will be added to your personal account. To assign to a team account, be sure to use <code class=\"highlighter-rouge\">--scope team-name</code> as part of the command.</p>\n</aside>\n\n<p>The next step is to reference these secrets inside of the <code class=\"highlighter-rouge\">vercel.json</code> file. To specify that the value is a secret, prefix it with the <code class=\"highlighter-rouge\">@</code> symbol. For example, the following sets <code class=\"highlighter-rouge\">CLIENT_ID</code> and <code class=\"highlighter-rouge\">CLIENT_SECRET</code> in both the build and runtime environments:</p>\n\n<div class=\"language-json highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"p\">{</span><span class=\"w\">\n    </span><span class=\"nl\">\"env\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n        </span><span class=\"nl\">\"CLIENT_ID\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"@client-id\"</span><span class=\"p\">,</span><span class=\"w\">\n        </span><span class=\"nl\">\"CLIENT_SECRET\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"@client-secret\"</span><span class=\"w\">\n    </span><span class=\"p\">},</span><span class=\"w\">\n    </span><span class=\"nl\">\"build\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n        </span><span class=\"nl\">\"env\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n            </span><span class=\"nl\">\"CLIENT_ID\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"@client-id\"</span><span class=\"p\">,</span><span class=\"w\">\n            </span><span class=\"nl\">\"CLIENT_SECRET\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"@client-secret\"</span><span class=\"w\">\n        </span><span class=\"p\">}</span><span class=\"w\">\n    </span><span class=\"p\">}</span><span class=\"w\">\n</span><span class=\"p\">}</span><span class=\"w\">\n</span></code></pre></div></div>\n\n<p>This <code class=\"highlighter-rouge\">vercel.json</code> configuration specifies that the environment variables should be filled with secret values. Each time your application is deployed, Vercel will read the <code class=\"highlighter-rouge\">client-id</code> and <code class=\"highlighter-rouge\">client-secret</code> secrets and expose them as the environment variables <code class=\"highlighter-rouge\">CLIENT_ID</code> and <code class=\"highlighter-rouge\">CLIENT_SECRET</code>. It’s now safe to check <code class=\"highlighter-rouge\">vercel.json</code> into your source code repository because it’s not exposing any secure information. You can just use the <code class=\"highlighter-rouge\">vercel</code> command to deploy your application knowing that all of the important environment variables will be added automatically.</p>\n\n<h2 id=\"summary\">Summary</h2>\n\n<p>The way Vercel handles environment variables takes a little getting used to. Whereas other services allow you to specify secret environment variables directly in their web interface, Vercel requires using the <code class=\"highlighter-rouge\">vercel</code> command line tool to do so.</p>\n\n<p>The easiest way to securely persist environment variables in your Vercel project is to store the information in secrets and then specify the environment variables in your <code class=\"highlighter-rouge\">vercel.json</code> file. Doing so allows you to check <code class=\"highlighter-rouge\">vercel.json</code> into your source code repository without exposing sensitive information. Given the many configuration options available in <code class=\"highlighter-rouge\">vercel.json</code>, it’s helpful to have that file in source control so you can make changes when necessary.</p>\n\n<h2 id=\"updates\">Updates</h2>\n\n<p><strong>2020-August-04</strong> - Updated to rename from ZEIT Now to Vercel.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n  <ol>\n    <li id=\"fn:1\">\n      <p><a href="https://humanwhocodes.com/feeds/\&quot;https://vercel.com\&quot;">Vercel</a> <a href="https://humanwhocodes.com/feeds/\&quot;#fnref:1\"" class=\"reversefootnote\">&#8617;</a></p>\n    </li>\n    <li id=\"fn:2\">\n      <p><a href="https://humanwhocodes.com/feeds/\&quot;https://netlify.com\&quot;">Netlify</a> <a href="https://humanwhocodes.com/feeds/\&quot;#fnref:2\"" class=\"reversefootnote\">&#8617;</a></p>\n    </li>\n    <li id=\"fn:3\">\n      <p><a href="https://humanwhocodes.com/feeds/\&quot;https://aws.amazon.com/lambda\&quot;">AWS Lambda</a> <a href="https://humanwhocodes.com/feeds/\&quot;#fnref:3\"" class=\"reversefootnote\">&#8617;</a></p>\n    </li>\n    <li id=\"fn:4\">\n      <p><a href="https://humanwhocodes.com/feeds/\&quot;https://vercel.com/docs/v2/build-step#environment-variables\"">Vercel - Build Step - Environment Variables</a> <a href="https://humanwhocodes.com/feeds/\&quot;#fnref:4\"" class=\"reversefootnote\">&#8617;</a> <a href="https://humanwhocodes.com/feeds/\&quot;#fnref:4:1\"" class=\"reversefootnote\">&#8617;<sup>2</sup></a></p>\n    </li>\n  </ol>\n</div>\n",
            "url": "https://humanwhocodes.com/blog/2019/09/securing-persistent-environment-variables-zeit-now/",
            
            
            
            "tags": ["Vercel","Secrets","Environment Variables","Security"],
            
            "date_published": "2019-09-03T00:00:00+00:00",
            "date_modified": "2019-09-03T00:00:00+00:00",
            
                "author": "Nicholas C. Zakas"
            
        },
    
        {
            "id": "https://humanwhocodes.com/blog/2019/04/jekyll-hooks-output-markdown/",
            "title": "Outputting Markdown from Jekyll using hooks",
            "summary": "One of the things I most enjoy about Jekyll1 is writing my blog posts in Markdown. I love not worrying about HTML and just letting Jekyll generate it for me when a post is published. Using Liquid tags directly in Markdown is also helpful, as I can define sitewide or page-specific variables and then replace them during site generation. This is a really useful capability that I wanted to take advantage of to output Markdown for use in other sites. Places like Medium and dev.to allow you to post Markdown articles, so I thought repurposing the Markdown I used in Jekyll would make crossposting to those sites easier.            Jekyll &#8617;      ",
            "content_text": "One of the things I most enjoy about Jekyll1 is writing my blog posts in Markdown. I love not worrying about HTML and just letting Jekyll generate it for me when a post is published. Using Liquid tags directly in Markdown is also helpful, as I can define sitewide or page-specific variables and then replace them during site generation. This is a really useful capability that I wanted to take advantage of to output Markdown for use in other sites. Places like Medium and dev.to allow you to post Markdown articles, so I thought repurposing the Markdown I used in Jekyll would make crossposting to those sites easier.\n\nI assumed that there would be a property on the page variable that would give me access to the rendered Markdown, but I was wrong. This began a long journey through relatively undocumented corners of the Jekyll plugin ecosystem. I’m sharing that journey here in the hopes that others won’t have to go through the same frustrating experience.\n\nAn introduction to Jekyll plugins\n\nI was relatively unfamiliar with the Jekyll plugin system before trying to figure out how to get the rendered Markdown for a post. Jekyll supports a number of different plugin types2. These plugin types affect Jekyll directly:\n\n\n  Generators - plugins that create files. While it’s not required that generators create files, this is the most frequent use case. Plugins like jekyll-archives use generators to create files that wouldn’t otherwise exist.\n  Converters - plugins that convert between text formats. Jekyll’s default of converting Markdown files into HTML is implemented using a converter. You can add support for other formats to be converted into HTML (or any other format) by creating your own converter.\n  Hooks - plugins that listen for specific events in Jekyll and then perform some action in relation to the events.\n\n\nThere are also two plugin types that are used primarily with Liquid:\n\n\n  Tags - create a new tag in the format {% tagname %} for use in your templates.\n  Filters - create a new filter that you can use to transform input, such as {{ data | filter }}\n\n\nThere is also a command plugin type that allows you to create new commands to use with the jekyll command line tool. The jekyll build command is implemented using this plugin type.\n\nDesigning the solution\n\nMy goal was to get the Liquid-rendered Markdown content (so all data processing was complete) for each post into a page property so that I could output that content into a JSON file on my server. That JSON file would then be fetched by an AWS Lambda function that crossposted that content to other locations. I didn’t need to generate any extra files or convert from one format to another, so it seemed clear that using a hook would be the best approach.\n\nHooks are basically event handlers in which you specify a container and the event to listen to. Jekyll passes you the relevant information for that event and you can then perform any action you’d like. There are four containers you can use with hooks:\n\n\n  :site - the site object\n  :page - the page object for each non-collection page\n  :post - the post object for each blog post\n  :document - the document object for each document in each collection (including blog posts and custom collections)\n\n\nBecause I wanted this solution to work for all collections in my site, I chose to use :document as an easy way to make the same change for all collection types.\n\nThere were two events for :document that immediately seemed relevant to my goal:\n\n\n  :pre_render - fires before the document content is rendered\n  :post_render - fires after the document content is rendered but before the content is written to disk\n\n\nIt seemed clear that getting the Markdown content would require using the :pre_render event, so I started by using this setup:\n\nJekyll::Hooks.register :documents, :pre_render do |doc, payload|\n\n  # code goes here\n\nend\n\n\nEach hook is passed its target container object, in this case doc is a document, and a payload object containing all of the relevant variables for working with the document (these are the variables available inside of a template when the document is rendered).\n\nThe :document, :prerender hook is called just before each document is rendered, meaning you don’t need to worry about looping over collections manually.\n\nThe catch: Rendering doesn’t mean what you think it means\n\nI figured that the content property inside of a :document, :pre_render hook would contain the Liquid-rendered Markdown instead of the final HTML, but I was only half correct. The content property actually contains the unprocessed Markdown that still contains all of the Liquid variables. It turns out that “prerender” means something different than I thought.\n\nThe lifecycle of the content property for a given document in Jekyll looks like this3:\n\n\n  The content property contains the file content with the front matter removed (typically Markdown)\n  :pre_render hook fires\n  The content property is rewritten with Liquid tags rendered (this is what Jekyll internally refers to as rendering)\n  The content property is rewritten after being passed through a converter (this is what Jekyll internally refers to as converting)\n  The :post_render hook fires\n\n\nWhile Jekyll internally separates rendering (which is apply Liquid) and converting (the Markdown to HTML conversion, for example), the exposed hooks don’t make this distinction. That means if I want Markdown content with Liquid variables replaced then I’ll need to get the prerendered Markdown content and render it myself.\n\nThe solution\n\nAt this point, my plan was to create a pre_render hook that did the following:\n\n\n  Retrieved the raw content for each document (contained in doc.content)\n  Render that content using Liquid\n  Store the result in a new property called unconverted_content that would be accessible inside my templates\n\n\nI started out with this basic idea of how things should look:\n\nJekyll::Hooks.register :documents, :pre_render do |doc, payload|\n\n  # get the raw content\n  raw_content = doc.content\n\n  # do something to that raw content\n  rendered_content = doSomethingTo(raw_content)\n\n  # store it back on the document\n  doc.rendered_content = rendered_content\nend\n\n\nOf course, I’m not very familiar with Ruby, so it turned out this wouldn’t work quite the way I thought.\n\nFirst, doc is an instance of a class, and you cannot arbitrarily add new properties to objects in Ruby. Jekyll provides a data hash on the document object, however, that can be used to add new properties that are available in templates. So the last line needs to be rewritten:\n\nJekyll::Hooks.register :documents, :pre_render do |doc, payload|\n\n  # get the raw content\n  raw_content = doc.content\n\n  # do something to that raw content\n  rendered_content = doSomethingTo(raw_content)\n\n  # store it back on the document\n  doc.data['rendered_content'] = rendered_content\nend\n\n\nThe last line ensures that page.rendered_content will be available inside of templates later on (and remember, this is happening during pre_render, so the templates haven’t yet been used).\n\nThe next step was to use Liquid to render the raw content. To figure out how to do this, I had to dig around in the Jekyll source4 as there wasn’t any documentation. Rendering Liquid the exact same way that Jekyll does by default requires a bit of setup and pulling in pieces of data from a couple different places. Here is the final code:\n\nJekyll::Hooks.register :documents, :pre_render do |doc, payload|\n\n  # make some local variables for convenience\n  site = doc.site\n  liquid_options = site.config[\"liquid\"]\n\n  # create a template object\n  template = site.liquid_renderer.file(doc.path).parse(doc.content)\n\n  # the render method expects this information\n  info = {\n    :registers        =&gt; { :site =&gt; site, :page =&gt; payload['page'] },\n    :strict_filters   =&gt; liquid_options[\"strict_filters\"],\n    :strict_variables =&gt; liquid_options[\"strict_variables\"],\n  }\n\n  # render the content into a new property\n  doc.data['rendered_content'] = template.render!(payload, info)\nend\n\n\nThe first step in this hook is to create a Liquid template object. While you can do this directly using Liquid::Template, Jekyll caches Liquid templates internally when using site.liquid_renderer.file(doc.path), so it makes sense to use that keep the Jekyll build as fast as possible. The content is then parsed into a template object.\n\nThe template.render() method needs not only the payload object but also some additional information. The info hash passes in registers, which are local variables accessible inside of the template, and some options for how liquid should behave. With all of that data ready, the content is rendered into the new property.\n\nThis file then needs to be placed in the _plugins directory of a Jekyll site to run each time the site is built.\n\nAccessing rendered_content\n\nWith this plugin installed, the Markdown content is available through the rendered_content property, like this:\n\n{{ page.rendered_content }}\n\n\nThe only problem is that outputting page.rendered_content into a Markdown page will cause all of that Markdown to be converted into HTML. (Remember, Jekyll internally renders Liquid first and then the result is converted into HTML.) So in order to output the raw Markdown, you’ll need to either apply a filter that prevents the Markdown-to-HTML conversion from happening, or use a file type that doesn’t convert automatically.\n\nIn my case, I’m storing the Markdown content in a JSON structure, so I’m using the jsonify filter, like this:\n\n---\nlayout: null\n---\n{\n    {% assign post = site.posts.first %}\n    \"id\": \"{{ post.url | absolute_url | sha1 }}\",\n    \"title\": {{ post.title | jsonify }},\n    \"date_published\": \"{{ post.date | date_to_xmlschema }}\",\n    \"date_published_pretty\": \"{{ post.date | date: \"%B %-d, %Y\" }}\",\n    \"summary\": {{ post.excerpt | strip_html | strip_newlines | jsonify }},\n    \"content_markdown\": {{ post.rendered_content | jsonify }},\n    \"content_html\": {{ post.content | jsonify }},\n    \"tags\": {{ post.tags | jsonify }},\n    \"url\": \"{{ post.url | absolute_url }}\"\n}\n\n\nAnother option is to create a rendered_content.txt file in the _includes directory that just contains this:\n\n{{ page.rendered_content }}\n\n\nThen, you can include that file anywhere you want the unconverted Markdown content, like this:\n\n{% include \"rendered_content.txt\" %}\n\n\nConclusion\n\nJekyll hooks are a useful feature that let you interact with Jekyll while it is generating your site, allowing you to intercept, modify, and add data along the way. While there aren’t a lot of examples in the wild, the concept is straightforward enough that with a few pointers, any programmer should be able to get something working. The biggest stumbling point for me was the lack of documentation on how to use Jekyll hooks, so I’m hoping that this writeup will help others who are trying to accomplish similar tasks in their Jekyll sites.\n\nTo date, I’ve found Jekyll to be extremely versatile and customizable. Being able to get the Liquid-rendered Markdown (even though it took a bit of work) has made my publishing workflow much more flexible, as I’m now more easily able to crosspost my writing on various other sites.\n\nReferences\n\n\n  \n    \n      Jekyll &#8617;\n    \n    \n      Jekyll Plugins &#8617;\n    \n    \n      Jekyll Order of Interpretation &#8617;\n    \n    \n      Jekyll renderer.rb &#8617;\n    \n  \n\n",
            "content_html": "<p>One of the things I most enjoy about Jekyll<sup id=\"fnref:1\"><a href="https://humanwhocodes.com/feeds/\&quot;#fn:1\"" class=\"footnote\">1</a></sup> is writing my blog posts in Markdown. I love not worrying about HTML and just letting Jekyll generate it for me when a post is published. Using Liquid tags directly in Markdown is also helpful, as I can define sitewide or page-specific variables and then replace them during site generation. This is a really useful capability that I wanted to take advantage of to output Markdown for use in other sites. Places like Medium and dev.to allow you to post Markdown articles, so I thought repurposing the Markdown I used in Jekyll would make crossposting to those sites easier.</p>\n\n<p>I assumed that there would be a property on the <code class=\"highlighter-rouge\">page</code> variable that would give me access to the rendered Markdown, but I was wrong. This began a long journey through relatively undocumented corners of the Jekyll plugin ecosystem. I’m sharing that journey here in the hopes that others won’t have to go through the same frustrating experience.</p>\n\n<h2 id=\"an-introduction-to-jekyll-plugins\">An introduction to Jekyll plugins</h2>\n\n<p>I was relatively unfamiliar with the Jekyll plugin system before trying to figure out how to get the rendered Markdown for a post. Jekyll supports a number of different plugin types<sup id=\"fnref:2\"><a href="https://humanwhocodes.com/feeds/\&quot;#fn:2\"" class=\"footnote\">2</a></sup>. These plugin types affect Jekyll directly:</p>\n\n<ul>\n  <li><strong>Generators</strong> - plugins that create files. While it’s not required that generators create files, this is the most frequent use case. Plugins like <code class=\"highlighter-rouge\">jekyll-archives</code> use generators to create files that wouldn’t otherwise exist.</li>\n  <li><strong>Converters</strong> - plugins that convert between text formats. Jekyll’s default of converting Markdown files into HTML is implemented using a converter. You can add support for other formats to be converted into HTML (or any other format) by creating your own converter.</li>\n  <li><strong>Hooks</strong> - plugins that listen for specific events in Jekyll and then perform some action in relation to the events.</li>\n</ul>\n\n<p>There are also two plugin types that are used primarily with Liquid:</p>\n\n<ul>\n  <li><strong>Tags</strong> - create a new tag in the format <code class=\"highlighter-rouge\">{% tagname %}</code> for use in your templates.</li>\n  <li><strong>Filters</strong> - create a new filter that you can use to transform input, such as <code class=\"highlighter-rouge\">{{ data | filter }}</code></li>\n</ul>\n\n<p>There is also a <em>command</em> plugin type that allows you to create new commands to use with the <code class=\"highlighter-rouge\">jekyll</code> command line tool. The <code class=\"highlighter-rouge\">jekyll build</code> command is implemented using this plugin type.</p>\n\n<h2 id=\"designing-the-solution\">Designing the solution</h2>\n\n<p>My goal was to get the Liquid-rendered Markdown content (so all data processing was complete) for each post into a <code class=\"highlighter-rouge\">page</code> property so that I could output that content into a JSON file on my server. That JSON file would then be fetched by an AWS Lambda function that crossposted that content to other locations. I didn’t need to generate any extra files or convert from one format to another, so it seemed clear that using a hook would be the best approach.</p>\n\n<p>Hooks are basically event handlers in which you specify a container and the event to listen to. Jekyll passes you the relevant information for that event and you can then perform any action you’d like. There are four containers you can use with hooks:</p>\n\n<ul>\n  <li><code class=\"highlighter-rouge\">:site</code> - the <code class=\"highlighter-rouge\">site</code> object</li>\n  <li><code class=\"highlighter-rouge\">:page</code> - the <code class=\"highlighter-rouge\">page</code> object for each non-collection page</li>\n  <li><code class=\"highlighter-rouge\">:post</code> - the <code class=\"highlighter-rouge\">post</code> object for each blog post</li>\n  <li><code class=\"highlighter-rouge\">:document</code> - the <code class=\"highlighter-rouge\">document</code> object for each document in each collection (including blog posts and custom collections)</li>\n</ul>\n\n<p>Because I wanted this solution to work for all collections in my site, I chose to use <code class=\"highlighter-rouge\">:document</code> as an easy way to make the same change for all collection types.</p>\n\n<p>There were two events for <code class=\"highlighter-rouge\">:document</code> that immediately seemed relevant to my goal:</p>\n\n<ul>\n  <li><code class=\"highlighter-rouge\">:pre_render</code> - fires before the document content is rendered</li>\n  <li><code class=\"highlighter-rouge\">:post_render</code> - fires after the document content is rendered but before the content is written to disk</li>\n</ul>\n\n<p>It seemed clear that getting the Markdown content would require using the <code class=\"highlighter-rouge\">:pre_render</code> event, so I started by using this setup:</p>\n\n<div class=\"language-ruby highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"no\">Jekyll</span><span class=\"o\">::</span><span class=\"no\">Hooks</span><span class=\"p\">.</span><span class=\"nf\">register</span> <span class=\"ss\">:documents</span><span class=\"p\">,</span> <span class=\"ss\">:pre_render</span> <span class=\"k\">do</span> <span class=\"o\">|</span><span class=\"n\">doc</span><span class=\"p\">,</span> <span class=\"n\">payload</span><span class=\"o\">|</span>\n\n  <span class=\"c1\"># code goes here</span>\n\n<span class=\"k\">end</span>\n</code></pre></div></div>\n\n<p>Each hook is passed its target container object, in this case <code class=\"highlighter-rouge\">doc</code> is a document, and a <code class=\"highlighter-rouge\">payload</code> object containing all of the relevant variables for working with the document (these are the variables available inside of a template when the document is rendered).</p>\n\n<p>The <code class=\"highlighter-rouge\">:document, :prerender</code> hook is called just before each document is rendered, meaning you don’t need to worry about looping over collections manually.</p>\n\n<h2 id=\"the-catch-rendering-doesnt-mean-what-you-think-it-means\">The catch: Rendering doesn’t mean what you think it means</h2>\n\n<p>I figured that the <code class=\"highlighter-rouge\">content</code> property inside of a <code class=\"highlighter-rouge\">:document, :pre_render</code> hook would contain the Liquid-rendered Markdown instead of the final HTML, but I was only half correct. The <code class=\"highlighter-rouge\">content</code> property actually contains the unprocessed Markdown that still contains all of the Liquid variables. It turns out that “prerender” means something different than I thought.</p>\n\n<p>The lifecycle of the <code class=\"highlighter-rouge\">content</code> property for a given document in Jekyll looks like this<sup id=\"fnref:4\"><a href="https://humanwhocodes.com/feeds/\&quot;#fn:4\"" class=\"footnote\">3</a></sup>:</p>\n\n<ol>\n  <li>The <code class=\"highlighter-rouge\">content</code> property contains the file content with the front matter removed (typically Markdown)</li>\n  <li><code class=\"highlighter-rouge\">:pre_render</code> hook fires</li>\n  <li>The <code class=\"highlighter-rouge\">content</code> property is rewritten with Liquid tags rendered (this is what Jekyll internally refers to as <em>rendering</em>)</li>\n  <li>The <code class=\"highlighter-rouge\">content</code> property is rewritten after being passed through a converter (this is what Jekyll internally refers to as <em>converting</em>)</li>\n  <li>The <code class=\"highlighter-rouge\">:post_render</code> hook fires</li>\n</ol>\n\n<p>While Jekyll internally separates rendering (which is apply Liquid) and converting (the Markdown to HTML conversion, for example), the exposed hooks don’t make this distinction. That means if I want Markdown content with Liquid variables replaced then I’ll need to get the prerendered Markdown content and render it myself.</p>\n\n<h2 id=\"the-solution\">The solution</h2>\n\n<p>At this point, my plan was to create a <code class=\"highlighter-rouge\">pre_render</code> hook that did the following:</p>\n\n<ol>\n  <li>Retrieved the raw content for each document (contained in <code class=\"highlighter-rouge\">doc.content</code>)</li>\n  <li>Render that content using Liquid</li>\n  <li>Store the result in a new property called <code class=\"highlighter-rouge\">unconverted_content</code> that would be accessible inside my templates</li>\n</ol>\n\n<p>I started out with this basic idea of how things should look:</p>\n\n<div class=\"language-ruby highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"no\">Jekyll</span><span class=\"o\">::</span><span class=\"no\">Hooks</span><span class=\"p\">.</span><span class=\"nf\">register</span> <span class=\"ss\">:documents</span><span class=\"p\">,</span> <span class=\"ss\">:pre_render</span> <span class=\"k\">do</span> <span class=\"o\">|</span><span class=\"n\">doc</span><span class=\"p\">,</span> <span class=\"n\">payload</span><span class=\"o\">|</span>\n\n  <span class=\"c1\"># get the raw content</span>\n  <span class=\"n\">raw_content</span> <span class=\"o\">=</span> <span class=\"n\">doc</span><span class=\"p\">.</span><span class=\"nf\">content</span>\n\n  <span class=\"c1\"># do something to that raw content</span>\n  <span class=\"n\">rendered_content</span> <span class=\"o\">=</span> <span class=\"n\">doSomethingTo</span><span class=\"p\">(</span><span class=\"n\">raw_content</span><span class=\"p\">)</span>\n\n  <span class=\"c1\"># store it back on the document</span>\n  <span class=\"n\">doc</span><span class=\"p\">.</span><span class=\"nf\">rendered_content</span> <span class=\"o\">=</span> <span class=\"n\">rendered_content</span>\n<span class=\"k\">end</span>\n</code></pre></div></div>\n\n<p>Of course, I’m not very familiar with Ruby, so it turned out this wouldn’t work quite the way I thought.</p>\n\n<p>First, <code class=\"highlighter-rouge\">doc</code> is an instance of a class, and you cannot arbitrarily add new properties to objects in Ruby. Jekyll provides a <code class=\"highlighter-rouge\">data</code> hash on the document object, however, that can be used to add new properties that are available in templates. So the last line needs to be rewritten:</p>\n\n<div class=\"language-ruby highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"no\">Jekyll</span><span class=\"o\">::</span><span class=\"no\">Hooks</span><span class=\"p\">.</span><span class=\"nf\">register</span> <span class=\"ss\">:documents</span><span class=\"p\">,</span> <span class=\"ss\">:pre_render</span> <span class=\"k\">do</span> <span class=\"o\">|</span><span class=\"n\">doc</span><span class=\"p\">,</span> <span class=\"n\">payload</span><span class=\"o\">|</span>\n\n  <span class=\"c1\"># get the raw content</span>\n  <span class=\"n\">raw_content</span> <span class=\"o\">=</span> <span class=\"n\">doc</span><span class=\"p\">.</span><span class=\"nf\">content</span>\n\n  <span class=\"c1\"># do something to that raw content</span>\n  <span class=\"n\">rendered_content</span> <span class=\"o\">=</span> <span class=\"n\">doSomethingTo</span><span class=\"p\">(</span><span class=\"n\">raw_content</span><span class=\"p\">)</span>\n\n  <span class=\"c1\"># store it back on the document</span>\n  <span class=\"n\">doc</span><span class=\"p\">.</span><span class=\"nf\">data</span><span class=\"p\">[</span><span class=\"s1\">'rendered_content'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">rendered_content</span>\n<span class=\"k\">end</span>\n</code></pre></div></div>\n\n<p>The last line ensures that <code class=\"highlighter-rouge\">page.rendered_content</code> will be available inside of templates later on (and remember, this is happening during <code class=\"highlighter-rouge\">pre_render</code>, so the templates haven’t yet been used).</p>\n\n<p>The next step was to use Liquid to render the raw content. To figure out how to do this, I had to dig around in the Jekyll source<sup id=\"fnref:5\"><a href="https://humanwhocodes.com/feeds/\&quot;#fn:5\"" class=\"footnote\">4</a></sup> as there wasn’t any documentation. Rendering Liquid the exact same way that Jekyll does by default requires a bit of setup and pulling in pieces of data from a couple different places. Here is the final code:</p>\n\n<div class=\"language-ruby highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"no\">Jekyll</span><span class=\"o\">::</span><span class=\"no\">Hooks</span><span class=\"p\">.</span><span class=\"nf\">register</span> <span class=\"ss\">:documents</span><span class=\"p\">,</span> <span class=\"ss\">:pre_render</span> <span class=\"k\">do</span> <span class=\"o\">|</span><span class=\"n\">doc</span><span class=\"p\">,</span> <span class=\"n\">payload</span><span class=\"o\">|</span>\n\n  <span class=\"c1\"># make some local variables for convenience</span>\n  <span class=\"n\">site</span> <span class=\"o\">=</span> <span class=\"n\">doc</span><span class=\"p\">.</span><span class=\"nf\">site</span>\n  <span class=\"n\">liquid_options</span> <span class=\"o\">=</span> <span class=\"n\">site</span><span class=\"p\">.</span><span class=\"nf\">config</span><span class=\"p\">[</span><span class=\"s2\">\"liquid\"</span><span class=\"p\">]</span>\n\n  <span class=\"c1\"># create a template object</span>\n  <span class=\"n\">template</span> <span class=\"o\">=</span> <span class=\"n\">site</span><span class=\"p\">.</span><span class=\"nf\">liquid_renderer</span><span class=\"p\">.</span><span class=\"nf\">file</span><span class=\"p\">(</span><span class=\"n\">doc</span><span class=\"p\">.</span><span class=\"nf\">path</span><span class=\"p\">).</span><span class=\"nf\">parse</span><span class=\"p\">(</span><span class=\"n\">doc</span><span class=\"p\">.</span><span class=\"nf\">content</span><span class=\"p\">)</span>\n\n  <span class=\"c1\"># the render method expects this information</span>\n  <span class=\"n\">info</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"ss\">:registers</span>        <span class=\"o\">=&gt;</span> <span class=\"p\">{</span> <span class=\"ss\">:site</span> <span class=\"o\">=&gt;</span> <span class=\"n\">site</span><span class=\"p\">,</span> <span class=\"ss\">:page</span> <span class=\"o\">=&gt;</span> <span class=\"n\">payload</span><span class=\"p\">[</span><span class=\"s1\">'page'</span><span class=\"p\">]</span> <span class=\"p\">},</span>\n    <span class=\"ss\">:strict_filters</span>   <span class=\"o\">=&gt;</span> <span class=\"n\">liquid_options</span><span class=\"p\">[</span><span class=\"s2\">\"strict_filters\"</span><span class=\"p\">],</span>\n    <span class=\"ss\">:strict_variables</span> <span class=\"o\">=&gt;</span> <span class=\"n\">liquid_options</span><span class=\"p\">[</span><span class=\"s2\">\"strict_variables\"</span><span class=\"p\">],</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"c1\"># render the content into a new property</span>\n  <span class=\"n\">doc</span><span class=\"p\">.</span><span class=\"nf\">data</span><span class=\"p\">[</span><span class=\"s1\">'rendered_content'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">template</span><span class=\"p\">.</span><span class=\"nf\">render!</span><span class=\"p\">(</span><span class=\"n\">payload</span><span class=\"p\">,</span> <span class=\"n\">info</span><span class=\"p\">)</span>\n<span class=\"k\">end</span>\n</code></pre></div></div>\n\n<p>The first step in this hook is to create a Liquid template object. While you can do this directly using <code class=\"highlighter-rouge\">Liquid::Template</code>, Jekyll caches Liquid templates internally when using <code class=\"highlighter-rouge\">site.liquid_renderer.file(doc.path)</code>, so it makes sense to use that keep the Jekyll build as fast as possible. The content is then parsed into a template object.</p>\n\n<p>The <code class=\"highlighter-rouge\">template.render()</code> method needs not only the <code class=\"highlighter-rouge\">payload</code> object but also some additional information. The <code class=\"highlighter-rouge\">info</code> hash passes in <code class=\"highlighter-rouge\">registers</code>, which are local variables accessible inside of the template, and some options for how liquid should behave. With all of that data ready, the content is rendered into the new property.</p>\n\n<p>This file then needs to be placed in the <code class=\"highlighter-rouge\">_plugins</code> directory of a Jekyll site to run each time the site is built.</p>\n\n<h2 id=\"accessing-rendered_content\">Accessing <code class=\"highlighter-rouge\">rendered_content</code></h2>\n\n<p>With this plugin installed, the Markdown content is available through the <code class=\"highlighter-rouge\">rendered_content</code> property, like this:</p>\n\n<div class=\"language-liquid highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"p\">{{</span><span class=\"w\"> </span><span class=\"nv\">page</span><span class=\"p\">.</span><span class=\"nv\">rendered_content</span><span class=\"w\"> </span><span class=\"p\">}}</span>\n</code></pre></div></div>\n\n<p>The only problem is that outputting <code class=\"highlighter-rouge\">page.rendered_content</code> into a Markdown page will cause all of that Markdown to be converted into HTML. (Remember, Jekyll internally renders Liquid first and then the result is converted into HTML.) So in order to output the raw Markdown, you’ll need to either apply a filter that prevents the Markdown-to-HTML conversion from happening, or use a file type that doesn’t convert automatically.</p>\n\n<p>In my case, I’m storing the Markdown content in a JSON structure, so I’m using the <code class=\"highlighter-rouge\">jsonify</code> filter, like this:</p>\n\n<div class=\"language-liquid highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>---\nlayout: null\n---\n{\n    <span class=\"p\">{%</span><span class=\"w\"> </span><span class=\"nt\">assign</span><span class=\"w\"> </span><span class=\"nv\">post</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nv\">site</span><span class=\"p\">.</span><span class=\"nv\">posts</span><span class=\"p\">.</span><span class=\"nf\">first</span><span class=\"w\"> </span><span class=\"p\">%}</span>\n    \"id\": \"<span class=\"p\">{{</span><span class=\"w\"> </span><span class=\"nv\">post</span><span class=\"p\">.</span><span class=\"nv\">url</span><span class=\"w\"> </span><span class=\"p\">|</span><span class=\"w\"> </span><span class=\"nf\">absolute_url</span><span class=\"w\"> </span><span class=\"p\">|</span><span class=\"w\"> </span><span class=\"nf\">sha1</span><span class=\"w\"> </span><span class=\"p\">}}</span>\",\n    \"title\": <span class=\"p\">{{</span><span class=\"w\"> </span><span class=\"nv\">post</span><span class=\"p\">.</span><span class=\"nv\">title</span><span class=\"w\"> </span><span class=\"p\">|</span><span class=\"w\"> </span><span class=\"nf\">jsonify</span><span class=\"w\"> </span><span class=\"p\">}}</span>,\n    \"date_published\": \"<span class=\"p\">{{</span><span class=\"w\"> </span><span class=\"nv\">post</span><span class=\"p\">.</span><span class=\"nv\">date</span><span class=\"w\"> </span><span class=\"p\">|</span><span class=\"w\"> </span><span class=\"nf\">date_to_xmlschema</span><span class=\"w\"> </span><span class=\"p\">}}</span>\",\n    \"date_published_pretty\": \"<span class=\"p\">{{</span><span class=\"w\"> </span><span class=\"nv\">post</span><span class=\"p\">.</span><span class=\"nv\">date</span><span class=\"w\"> </span><span class=\"p\">|</span><span class=\"w\"> </span><span class=\"nf\">date</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"%B %-d, %Y\"</span><span class=\"w\"> </span><span class=\"p\">}}</span>\",\n    \"summary\": <span class=\"p\">{{</span><span class=\"w\"> </span><span class=\"nv\">post</span><span class=\"p\">.</span><span class=\"nv\">excerpt</span><span class=\"w\"> </span><span class=\"p\">|</span><span class=\"w\"> </span><span class=\"nf\">strip_html</span><span class=\"w\"> </span><span class=\"p\">|</span><span class=\"w\"> </span><span class=\"nf\">strip_newlines</span><span class=\"w\"> </span><span class=\"p\">|</span><span class=\"w\"> </span><span class=\"nf\">jsonify</span><span class=\"w\"> </span><span class=\"p\">}}</span>,\n    \"content_markdown\": <span class=\"p\">{{</span><span class=\"w\"> </span><span class=\"nv\">post</span><span class=\"p\">.</span><span class=\"nv\">rendered_content</span><span class=\"w\"> </span><span class=\"p\">|</span><span class=\"w\"> </span><span class=\"nf\">jsonify</span><span class=\"w\"> </span><span class=\"p\">}}</span>,\n    \"content_html\": <span class=\"p\">{{</span><span class=\"w\"> </span><span class=\"nv\">post</span><span class=\"p\">.</span><span class=\"nv\">content</span><span class=\"w\"> </span><span class=\"p\">|</span><span class=\"w\"> </span><span class=\"nf\">jsonify</span><span class=\"w\"> </span><span class=\"p\">}}</span>,\n    \"tags\": <span class=\"p\">{{</span><span class=\"w\"> </span><span class=\"nv\">post</span><span class=\"p\">.</span><span class=\"nv\">tags</span><span class=\"w\"> </span><span class=\"p\">|</span><span class=\"w\"> </span><span class=\"nf\">jsonify</span><span class=\"w\"> </span><span class=\"p\">}}</span>,\n    \"url\": \"<span class=\"p\">{{</span><span class=\"w\"> </span><span class=\"nv\">post</span><span class=\"p\">.</span><span class=\"nv\">url</span><span class=\"w\"> </span><span class=\"p\">|</span><span class=\"w\"> </span><span class=\"nf\">absolute_url</span><span class=\"w\"> </span><span class=\"p\">}}</span>\"\n}\n</code></pre></div></div>\n\n<p>Another option is to create a <code class=\"highlighter-rouge\">rendered_content.txt</code> file in the <code class=\"highlighter-rouge\">_includes</code> directory that just contains this:</p>\n\n<div class=\"language-liquid highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"p\">{{</span><span class=\"w\"> </span><span class=\"nv\">page</span><span class=\"p\">.</span><span class=\"nv\">rendered_content</span><span class=\"w\"> </span><span class=\"p\">}}</span>\n</code></pre></div></div>\n\n<p>Then, you can include that file anywhere you want the unconverted Markdown content, like this:</p>\n\n<div class=\"language-liquid highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"p\">{%</span><span class=\"w\"> </span><span class=\"nt\">include</span><span class=\"w\"> </span><span class=\"s2\">\"rendered_content.txt\"</span><span class=\"w\"> </span><span class=\"p\">%}</span>\n</code></pre></div></div>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<p>Jekyll hooks are a useful feature that let you interact with Jekyll while it is generating your site, allowing you to intercept, modify, and add data along the way. While there aren’t a lot of examples in the wild, the concept is straightforward enough that with a few pointers, any programmer should be able to get something working. The biggest stumbling point for me was the lack of documentation on how to use Jekyll hooks, so I’m hoping that this writeup will help others who are trying to accomplish similar tasks in their Jekyll sites.</p>\n\n<p>To date, I’ve found Jekyll to be extremely versatile and customizable. Being able to get the Liquid-rendered Markdown (even though it took a bit of work) has made my publishing workflow much more flexible, as I’m now more easily able to crosspost my writing on various other sites.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n  <ol>\n    <li id=\"fn:1\">\n      <p><a href="https://humanwhocodes.com/feeds/\&quot;https://jekyllrb.com/\&quot;">Jekyll</a> <a href="https://humanwhocodes.com/feeds/\&quot;#fnref:1\"" class=\"reversefootnote\">&#8617;</a></p>\n    </li>\n    <li id=\"fn:2\">\n      <p><a href="https://humanwhocodes.com/feeds/\&quot;https://jekyllrb.com/docs/plugins/\&quot;">Jekyll Plugins</a> <a href="https://humanwhocodes.com/feeds/\&quot;#fnref:2\"" class=\"reversefootnote\">&#8617;</a></p>\n    </li>\n    <li id=\"fn:4\">\n      <p><a href="https://humanwhocodes.com/feeds/\&quot;https://jekyllrb.com/tutorials/orderofinterpretation/\&quot;">Jekyll Order of Interpretation</a> <a href="https://humanwhocodes.com/feeds/\&quot;#fnref:4\"" class=\"reversefootnote\">&#8617;</a></p>\n    </li>\n    <li id=\"fn:5\">\n      <p><a href="https://humanwhocodes.com/feeds/\&quot;https://github.com/jekyll/jekyll/blob/be78b4246c4513738eb4c18b76569182dd4f8578/lib/jekyll/renderer.rb#L70-L93\"">Jekyll renderer.rb</a> <a href="https://humanwhocodes.com/feeds/\&quot;#fnref:5\"" class=\"reversefootnote\">&#8617;</a></p>\n    </li>\n  </ol>\n</div>\n",
            "url": "https://humanwhocodes.com/blog/2019/04/jekyll-hooks-output-markdown/",
            
            
            
            "tags": ["Jekyll","Liquid","Ruby","Markdown"],
            
            "date_published": "2019-04-16T00:00:00+00:00",
            "date_modified": "2019-04-16T00:00:00+00:00",
            
                "author": "Nicholas C. Zakas"
            
        },
    
        {
            "id": "https://humanwhocodes.com/blog/2019/03/computer-science-in-javascript-circular-doubly-linked-lists/",
            "title": "Computer science in JavaScript: Circular Doubly-linked lists",
            "summary": "In my previous post, I discussed what changes are necessary to turn a singly linked list into a doubly linked list. I recommend reading that post before this one (if you haven’t already). This post is about modifying a doubly linked list (also called a linear doubly linked list) in such a way that the last node in the list points to the first node in the list, effectively making the list circular. Circular doubly linked lists are interesting because they allow you to continuously move through list items without needing to check for the end of the list. You may encounter this when creating playlists or round-robin distribution of traffic to servers.",
            "content_text": "In my previous post, I discussed what changes are necessary to turn a singly linked list into a doubly linked list. I recommend reading that post before this one (if you haven’t already). This post is about modifying a doubly linked list (also called a linear doubly linked list) in such a way that the last node in the list points to the first node in the list, effectively making the list circular. Circular doubly linked lists are interesting because they allow you to continuously move through list items without needing to check for the end of the list. You may encounter this when creating playlists or round-robin distribution of traffic to servers.\n\n\n  It is possible to create a circular singly linked list, as well. I won’t be covering circular singly linked lists in this blog post series, however, you can find source code for a circular singly linked list in my GitHub repo, Computer Science in JavaScript.\n\n\nThe design of a circular doubly linked list\n\nThe nodes in a circular doubly linked list are no different than the nodes for a linear doubly linked list. Each node contains data and pointers to the next and previous items in the list. Here is what that looks like in JavaScript:\n\nclass CircularDoublyLinkedListNode {\n    constructor(data) {\n        this.data = data;\n        this.next = null;\n        this.previous = null;\n    }\n}\n\n\nYou can then create a circular doubly linked list using the CircularDoublyLinkedListNode class like this:\n\n// create the first node\nconst head = new CircularDoublyLinkedListNode(12);\n\n// add a second node\nconst secondNode = new CircularDoublyLinkedListNode(99);\nhead.next = secondNode;\nsecondNode.previous = head;\n\n// add a third node\nconst thirdNode = new CircularDoublyLinkedListNode(37);\nsecondNode.next = thirdNode;\nthirdNode.previous = secondNode;\n\n// point the last node to the first\nthirdNode.next = head;\nhead.previous = thirdNode;\n\n\nThe head of the list and subsequent nodes in the list are created the same way as in a linear doubly linked list. The only difference is the last step where the last node’s next pointer is set to head and the head node’s previous pointer is set to the last node. The following image shows the resulting data structure.\n\n\n\nTraversing a circular doubly linked list is a bit different than a linear doubly linked list because following next pointers alone will result in an infinite loop. For example, this is an infinite loop:\n\nlet current = head;\n\n// infinite loop: `current` is never `null`\nwhile (current !== null) {\n    console.log(current.data);\n    current = current.next;\n}\n\n\nIn some cases you will want to continue iterating over the loop forever, but that typically does not happen in the context of a loop as in this code. In other cases, you’ll want to iterate over each node in the loop until the last node is found. To do that, you’ll need to check to see when current is head, which means you’re back at the beginning of the loop. However, simply swapping null for head in the previous example results in the loop not executing at all:\n\nlet current = head;\n\n// loop is skipped: `current` is already `head`\nwhile (current !== head) {\n    console.log(current.data);\n    current = current.next;\n}\n\n\nThe problem here is that current started out equal to head and the loop only proceeds when current is not equal to head. The solution is to use a post-test loop instead of a pre-test loop, and in JavaScript, that means using a do-while loop:\n\nlet current = head;\n\nif (current !== null) {\n\n    do {\n        console.log(current.data);\n        current = current.next;\n    } while (current !== head);\n\n}\n\n\nIn this code, the check to see if current is equal to head appears at the end of the loop rather than at the start. To ensure that the loop won’t start unless current isn’t null, an if statement typically must preceed the do-while loop (you no longer have the pre-test of a while loop to cover that case for you). The loop will proceed until current is once again head, meaning that the entire list has been traversed.\n\nAlso similar to linear doubly linked lists, you can traverse the nodes in reverse order by starting from the last node. Circular doubly linked lists don’t separately track the list tail because you can always access the tail through head.previous, for example:\n\nlet current = head.previous;\n\nif (current !== null) {\n\n    do {\n        console.log(current.data);\n        current = current.previous;\n    } while (current !== head.previous);\n\n}\n\n\nThe CircularDoublyLinkedList class\n\nThe CircularDoublyLinkedList class starts out looking a lot like the DoublyLinkedList class from the previous article with the exception that there is no tail property to track the last node in the list:\n\nconst head = Symbol(\"head\");\n\nclass CircularDoublyLinkedList {\n    constructor() {\n        this[head] = null;\n    }\n}\n\n\nThe primary differences between a linear and circular doubly linked list have to do with the methods for adding, removing, and traversing the nodes.\n\nAdding new data to the list\n\nThe same basic algorithm for adding data is used for both linear and circular doubly linked lists, with the difference being the pointers that must be updated to complete the process. Here is the add() method for the CircularDoublyLinkedList class:\n\nclass CircularDoublyLinkedList {\n\n    constructor() {\n        this[head] = null;\n    }\n    \n    add(data) {\n    \n        const newNode = new CircularDoublyLinkedListNode(data);\n                \n        // special case: no items in the list yet\n        if (this[head] === null) {\n            this[head] = newNode;\n            newNode.next = newNode;\n            newNode.previous = newNode;\n        } else {\n\n            const tail = this[head].previous;\n\n            tail.next = newNode;\n            newNode.previous = tail;\n            newNode.next = this[head];\n            this[head].previous = newNode;\n        }\n    }\n\n}\n\n\nThe add() method for the circular doubly linked list accepts one argument, the data to insert into the list. If the list is empty (this[head] is null) then the new node is assigned to this[head]. The extra step to make the list circular is to ensure that both newNode.next and newNode.previous point to newNode.\n\nIf the list is not empty, then a new node is added after the current tail, which is retrieved using this[head].previous. The new node can then be added to tail.next. Remember, you are actually inserting a new node between the tail and the head of the list, so this operation looks a lot more like an insert than an append. Once complete, newNode is the list tail and therefore newNode.next must point to this[head] and this[head].previous must point to newNode.\n\nAs with a linear doubly linked list, the complexity of this add() method is O(1) because no traversal is necessary.\n\nRetrieving data from the list\n\nThe get() method for a circular doubly linked list follows the basic algorithm from the start of this post. You must traverse the list while keeping track of how deep into the list you have gone and ensuring you don’t loop back around to the front of the list. Here is how the get() method is implemented.\n\nclass CircularDoublyLinkedList {\n\n    // other methods hidden for clarity\n\n    get(index) {\n\n        // ensure `index` is a positive value and the list isn't empty\n        if ((index &gt; -1) &amp;&amp; (this[head] !== null)) {\n\n            let current = this[head];\n            let i = 0;\n\n            do {\n\n                if (i === index) {\n                    return current.data;\n                }\n\n                current = current.next;\n                i++;\n\n            } while ((current !== this[head]) &amp;&amp; (i &lt;= index));\n\n        }\n\n        return undefined;\n    }\n\n}\n\n\nThe get() method first checks to make sure that index is a positive value and that the list isn’t empty. If either case is true, then the method returns undefined. Remember, you must always use an if statement to check if a circular doubly linked list is empty before starting a traversal due to the use of a post-test instead of a pre-test loop.\n\nUsing the same traversal algorithm as discussed earlier, the get() method uses the i variable to track how deep into the list it has traversed. When i is equal to index, the data in that node is returned (existing the loop early). If the loop exits, either because it has reached the head of the list again or index is not found in the list, then undefined is returned.\n\nAs with a linear doubly linked list, the get() method’s complexity ranges from O(1) to O(n);\n\nRemoving data from the list\n\nRemoving data from a circular doubly linked list is basically the same as with a linear doubly linked list. The differences are:\n\n\n  Using a post-test loop instead of a pre-test loop for the traversal (same as get())\n  Ensuring that the circular links remain on the head and tail nodes when either is removed\n\n\nHere is what the implementation of a remove() method looks like:\n\nclass CircularDoublyLinkedList {\n    \n    // other methods hidden for clarity\n\n    remove(index) {\n\n        // special cases: no nodes in the list or `index` is an invalid value\n        if ((this[head] === null) || (index &lt; 0)) {\n            throw new RangeError(`Index ${index} does not exist in the list.`);\n        }\n\n        // save the current head for easier access\n        let current = this[head];\n\n        // special case: removing the first node\n        if (index === 0) {\n\n            // if there's only one node, null out `this[head]`\n            if (current.next === this[head]) {\n                this[head] = null;\n            } else {\n\n                // get the last item in the list\n                const tail = this[head].previous;\n\n                /*\n                 * Set the tail to point to the second item in the list.\n                 * Then make sure that item also points back to the tail.\n                 */\n                tail.next = current.next;\n                current.next.previous = tail;\n                \n                // now it's safe to update the head\n                this[head] = tail.next;\n            }\n\n            // return the data at the previous head of the list\n            return current.data;\n        }\n\n        let i = 0;\n\n        do {\n\n            // traverse to the next node\n            current = current.next;\n\n            // increment the count\n            i++;\n\n        } while ((current !== this[head]) &amp;&amp; (i &lt; index));\n\n        // the node to remove has been found\n        if (current !== this[head]) {\n\n            // skip over the node to remove\n            current.previous.next = current.next;\n            current.next.previous = current.previous;\n\n            // return the value that was just removed from the list\n            return current.data;\n        }\n\n        // `index` doesn't exist in the list so throw an error\n        throw new RangeError(`Index ${index} does not exist in the list.`);\n\n    }\n        \n}\n\n\nWhile there are special cases in this remove() method, almost every case requires adjusting pointers on two nodes due to the circular nature of the list. The only case where this isn’t necessary is when you are removing the only node in the list.\n\nRemoving the first node in the list (index is 0) is treated as a special case because there is no need for traversal and this[head] must be assigned a new value. The second node in the list becomes the head and it previous pointer must be adjusted accordingly.\n\nThe rest of the method follows the same algorithm as for a linear doubly linked list. As we don’t need to worry about the special this[head] pointer, the search for and removal of the node at index can proceed as if the list was linear.\n\n\n  You can further simply removal of nodes if you don’t mind losing track of the original head of the list. The implementation of CircularDoublyLinkedList in this post assumes you want the original head of the list to remain as such unless it is removed. However, because the list is circular, it really doesn’t matter what nodes is considered the head because you can always get to every other node as long as you reference to one node. You can arbitrarily reset this[head] to any node you want an all of the functionality will continue to work.\n\n\nCreating iterators\n\nThere are two distinct use cases for iterators in a circular linked list:\n\n\n  For use with JavaScript’s builtin iteration functionality (like for-of loops)\n  For moving through the values of the list in a circular fashion for specific applications (like a playlist)\n\n\nTo address the first case, it makes sense to create a values() generator method and a Symbol.iterator method on the class as these are expected on JavaScript collections. These methods are similar to those in a doubly linked list with the usual exceptions that the loop must be flipped and the you need to check to see if you’ve reached the list head to exit the loop. Those two methods look like this:\n\nclass CircularLinkedList {\n\n    // other methods hidden for clarity\n\n    values() {\n\n        // special case: list is empty\n        if (this[head] !== null) {\n\n            // special case: only one node\n            if (this[head].next === this[head]) {\n                yield this[head].data;\n            } else {\n\n                let current = this[head];\n\n                do {\n                    yield current.data;\n                    current = current.next;\n                } while (current !== this[head]);\n            }\n\n        }\n    }\n\n    [Symbol.iterator]() {\n        return this.values();\n    }\n}\n\n\nThe values() generator method has two special cases: when the list is empty, in which case it doesn’t yield anything, and when there is only one node, in which case traversal isn’t necessary and the data stored in the head is yielded. Otherwise, the do-while loop is the same as the one you’ve seen through this post.\n\nCreating an iterator that loops around is then just a matter of modifying this algorithm so the loop never exits. Here is what that looks like:\n\nclass CircularDoublyLinkedList {\n\n    // other methods hidden for clarity\n\n    *circularValues() {\n\n        // special case: list is empty\n        if (this[head] !== null) {\n\n            let current = this[head];\n\n            // infinite loop\n            do {\n                yield current.data;\n                current = current.next;\n            } while (true);\n        }\n\n    }\n\n}\n\n\nYou wouldn’t want to use the circularValues() generator method in any situation where JavaScript will drain an iterator (as in the for-of loop) because this will cause an infinite loop and crash. Instead, manually call the next() method of the iterator whenever you need another value.\n\n\n  For this method, it really doesn’t matter if you use a do-while loop or a while loop. I used do-while to keep it consistent with the rest of this post, but you can use any flavor of infinite loop that you want.\n\n\nUsing the class\n\nOnce complete, you can use the circular doubly linked list implementation like this:\n\nconst list = new CircularDoublyLinkedList();\nlist.add(\"red\");\nlist.add(\"orange\");\nlist.add(\"yellow\");\n    \n// get the second item in the list\nconsole.log(list.get(1));       // \"orange\"\n\n// print out all items\nfor (const color of list.values()) {\n    console.log(color);\n}\n\n// remove the second item in the list    \nconsole.log(list.remove(1));    // \"orange\"\n    \n// get the new first item in the list\nconsole.log(list.get(1));       // \"yellow\"\n\n// convert to an array\nconst array1 = [...list.values()];\nconst array2 = [...list];\n\n// manually cycle through each item in a circular manner\nconst iterator = list.circularValues();\n\nlet { value } = iterator.next();\ndoSomething(value);    \n\n({ value } = iterator.next());\ndoSomething(value);    \n\n\nThe full source code is available on GitHub at my Computer Science in JavaScript project.\n\nConclusion\n\nCircular doubly linked lists are setup in a similar manner as linear doubly linked lists in that each ndoe has a pointer to both the next and previous nodes in the list. The difference is that the list tail always points to the list head so you can follow next pointers and never receive null. This functionality can be used for applications such as playlists or round-robin distribution of data processing.\n\nThe implementation of doubly linked list operations differs from linear doubly linked lists in that you must use a post-test loop (do-while) to check if you’re back at the beginning of the list. For most operations, it’s important to stop when the list head has been reached again. The only exception is in creating an iterator to be called manually and which you’d prefer never ran out of items to return.\n\nThe complexity of circular doubly linked list operations is the same as with linear doubly linked list operations. Unlike the other data structures discussed in this blog post series, circular doubly linked lists can be helpful in JavaScript applications that require repeating cycling through the same data. That is one use case that isn’t covered well by JavaScript’s builtin collection types.\n",
            "content_html": "<p>In my <a href="https://humanwhocodes.com/feeds/\&quot;https://humanwhocodes.com/blog/2019/02/computer-science-in-javascript-doubly-linked-lists/\&quot;">previous post</a>, I discussed what changes are necessary to turn a singly linked list into a doubly linked list. I recommend reading that post before this one (if you haven’t already). This post is about modifying a doubly linked list (also called a <em>linear doubly linked list</em>) in such a way that the last node in the list points to the first node in the list, effectively making the list circular. <em>Circular doubly linked lists</em> are interesting because they allow you to continuously move through list items without needing to check for the end of the list. You may encounter this when creating playlists or round-robin distribution of traffic to servers.</p>\n\n<aside class=\"note\">\n  <p>It is possible to create a circular singly linked list, as well. I won’t be covering circular singly linked lists in this blog post series, however, you can find source code for a circular singly linked list in my GitHub repo, <a href="https://humanwhocodes.com/feeds/\&quot;https://github.com/humanwhocodes/computer-science-in-javascript\&quot;">Computer Science in JavaScript</a>.</p>\n</aside>\n\n<h2 id=\"the-design-of-a-circular-doubly-linked-list\">The design of a circular doubly linked list</h2>\n\n<p>The nodes in a circular doubly linked list are no different than the nodes for a linear doubly linked list. Each node contains data and pointers to the next and previous items in the list. Here is what that looks like in JavaScript:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">class</span> <span class=\"nx\">CircularDoublyLinkedListNode</span> <span class=\"p\">{</span>\n    <span class=\"kd\">constructor</span><span class=\"p\">(</span><span class=\"nx\">data</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">data</span> <span class=\"o\">=</span> <span class=\"nx\">data</span><span class=\"p\">;</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">next</span> <span class=\"o\">=</span> <span class=\"kc\">null</span><span class=\"p\">;</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">previous</span> <span class=\"o\">=</span> <span class=\"kc\">null</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>You can then create a circular doubly linked list using the <code class=\"highlighter-rouge\">CircularDoublyLinkedListNode</code> class like this:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// create the first node</span>\n<span class=\"kd\">const</span> <span class=\"nx\">head</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">CircularDoublyLinkedListNode</span><span class=\"p\">(</span><span class=\"mi\">12</span><span class=\"p\">);</span>\n\n<span class=\"c1\">// add a second node</span>\n<span class=\"kd\">const</span> <span class=\"nx\">secondNode</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">CircularDoublyLinkedListNode</span><span class=\"p\">(</span><span class=\"mi\">99</span><span class=\"p\">);</span>\n<span class=\"nx\">head</span><span class=\"p\">.</span><span class=\"nx\">next</span> <span class=\"o\">=</span> <span class=\"nx\">secondNode</span><span class=\"p\">;</span>\n<span class=\"nx\">secondNode</span><span class=\"p\">.</span><span class=\"nx\">previous</span> <span class=\"o\">=</span> <span class=\"nx\">head</span><span class=\"p\">;</span>\n\n<span class=\"c1\">// add a third node</span>\n<span class=\"kd\">const</span> <span class=\"nx\">thirdNode</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">CircularDoublyLinkedListNode</span><span class=\"p\">(</span><span class=\"mi\">37</span><span class=\"p\">);</span>\n<span class=\"nx\">secondNode</span><span class=\"p\">.</span><span class=\"nx\">next</span> <span class=\"o\">=</span> <span class=\"nx\">thirdNode</span><span class=\"p\">;</span>\n<span class=\"nx\">thirdNode</span><span class=\"p\">.</span><span class=\"nx\">previous</span> <span class=\"o\">=</span> <span class=\"nx\">secondNode</span><span class=\"p\">;</span>\n\n<span class=\"c1\">// point the last node to the first</span>\n<span class=\"nx\">thirdNode</span><span class=\"p\">.</span><span class=\"nx\">next</span> <span class=\"o\">=</span> <span class=\"nx\">head</span><span class=\"p\">;</span>\n<span class=\"nx\">head</span><span class=\"p\">.</span><span class=\"nx\">previous</span> <span class=\"o\">=</span> <span class=\"nx\">thirdNode</span><span class=\"p\">;</span>\n</code></pre></div></div>\n\n<p>The head of the list and subsequent nodes in the list are created the same way as in a linear doubly linked list. The only difference is the last step where the last node’s <code class=\"highlighter-rouge\">next</code> pointer is set to <code class=\"highlighter-rouge\">head</code> and the <code class=\"highlighter-rouge\">head</code> node’s <code class=\"highlighter-rouge\">previous</code> pointer is set to the last node. The following image shows the resulting data structure.</p>\n\n<p><img src="https://humanwhocodes.com/feeds/\&quot;https://humanwhocodes.com/images/posts/2019/circular-doubly-linked-list.png\&quot;" alt=\"Circular doubly linked list diagram\" /></p>\n\n<p>Traversing a circular doubly linked list is a bit different than a linear doubly linked list because following <code class=\"highlighter-rouge\">next</code> pointers alone will result in an infinite loop. For example, this is an infinite loop:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">let</span> <span class=\"nx\">current</span> <span class=\"o\">=</span> <span class=\"nx\">head</span><span class=\"p\">;</span>\n\n<span class=\"c1\">// infinite loop: `current` is never `null`</span>\n<span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"nx\">current</span> <span class=\"o\">!==</span> <span class=\"kc\">null</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">current</span><span class=\"p\">.</span><span class=\"nx\">data</span><span class=\"p\">);</span>\n    <span class=\"nx\">current</span> <span class=\"o\">=</span> <span class=\"nx\">current</span><span class=\"p\">.</span><span class=\"nx\">next</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>In some cases you will want to continue iterating over the loop forever, but that typically does not happen in the context of a loop as in this code. In other cases, you’ll want to iterate over each node in the loop until the last node is found. To do that, you’ll need to check to see when <code class=\"highlighter-rouge\">current</code> is <code class=\"highlighter-rouge\">head</code>, which means you’re back at the beginning of the loop. However, simply swapping <code class=\"highlighter-rouge\">null</code> for <code class=\"highlighter-rouge\">head</code> in the previous example results in the loop not executing at all:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">let</span> <span class=\"nx\">current</span> <span class=\"o\">=</span> <span class=\"nx\">head</span><span class=\"p\">;</span>\n\n<span class=\"c1\">// loop is skipped: `current` is already `head`</span>\n<span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"nx\">current</span> <span class=\"o\">!==</span> <span class=\"nx\">head</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">current</span><span class=\"p\">.</span><span class=\"nx\">data</span><span class=\"p\">);</span>\n    <span class=\"nx\">current</span> <span class=\"o\">=</span> <span class=\"nx\">current</span><span class=\"p\">.</span><span class=\"nx\">next</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>The problem here is that <code class=\"highlighter-rouge\">current</code> started out equal to <code class=\"highlighter-rouge\">head</code> and the loop only proceeds when <code class=\"highlighter-rouge\">current</code> is not equal to <code class=\"highlighter-rouge\">head</code>. The solution is to use a post-test loop instead of a pre-test loop, and in JavaScript, that means using a <code class=\"highlighter-rouge\">do-while</code> loop:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">let</span> <span class=\"nx\">current</span> <span class=\"o\">=</span> <span class=\"nx\">head</span><span class=\"p\">;</span>\n\n<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">current</span> <span class=\"o\">!==</span> <span class=\"kc\">null</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\n    <span class=\"k\">do</span> <span class=\"p\">{</span>\n        <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">current</span><span class=\"p\">.</span><span class=\"nx\">data</span><span class=\"p\">);</span>\n        <span class=\"nx\">current</span> <span class=\"o\">=</span> <span class=\"nx\">current</span><span class=\"p\">.</span><span class=\"nx\">next</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span> <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"nx\">current</span> <span class=\"o\">!==</span> <span class=\"nx\">head</span><span class=\"p\">);</span>\n\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>In this code, the check to see if <code class=\"highlighter-rouge\">current</code> is equal to <code class=\"highlighter-rouge\">head</code> appears at the end of the loop rather than at the start. To ensure that the loop won’t start unless <code class=\"highlighter-rouge\">current</code> isn’t <code class=\"highlighter-rouge\">null</code>, an <code class=\"highlighter-rouge\">if</code> statement typically must preceed the <code class=\"highlighter-rouge\">do-while</code> loop (you no longer have the pre-test of a <code class=\"highlighter-rouge\">while</code> loop to cover that case for you). The loop will proceed until <code class=\"highlighter-rouge\">current</code> is once again <code class=\"highlighter-rouge\">head</code>, meaning that the entire list has been traversed.</p>\n\n<p>Also similar to linear doubly linked lists, you can traverse the nodes in reverse order by starting from the last node. Circular doubly linked lists don’t separately track the list tail because you can always access the tail through <code class=\"highlighter-rouge\">head.previous</code>, for example:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">let</span> <span class=\"nx\">current</span> <span class=\"o\">=</span> <span class=\"nx\">head</span><span class=\"p\">.</span><span class=\"nx\">previous</span><span class=\"p\">;</span>\n\n<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">current</span> <span class=\"o\">!==</span> <span class=\"kc\">null</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\n    <span class=\"k\">do</span> <span class=\"p\">{</span>\n        <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">current</span><span class=\"p\">.</span><span class=\"nx\">data</span><span class=\"p\">);</span>\n        <span class=\"nx\">current</span> <span class=\"o\">=</span> <span class=\"nx\">current</span><span class=\"p\">.</span><span class=\"nx\">previous</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span> <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"nx\">current</span> <span class=\"o\">!==</span> <span class=\"nx\">head</span><span class=\"p\">.</span><span class=\"nx\">previous</span><span class=\"p\">);</span>\n\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<h2 id=\"the-circulardoublylinkedlist-class\">The <code class=\"highlighter-rouge\">CircularDoublyLinkedList</code> class</h2>\n\n<p>The <code class=\"highlighter-rouge\">CircularDoublyLinkedList</code> class starts out looking a lot like the <code class=\"highlighter-rouge\">DoublyLinkedList</code> class from the previous article with the exception that there is no <code class=\"highlighter-rouge\">tail</code> property to track the last node in the list:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">const</span> <span class=\"nx\">head</span> <span class=\"o\">=</span> <span class=\"nb\">Symbol</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">head</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n\n<span class=\"kd\">class</span> <span class=\"nx\">CircularDoublyLinkedList</span> <span class=\"p\">{</span>\n    <span class=\"kd\">constructor</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"k\">this</span><span class=\"p\">[</span><span class=\"nx\">head</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">null</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>The primary differences between a linear and circular doubly linked list have to do with the methods for adding, removing, and traversing the nodes.</p>\n\n<h3 id=\"adding-new-data-to-the-list\">Adding new data to the list</h3>\n\n<p>The same basic algorithm for adding data is used for both linear and circular doubly linked lists, with the difference being the pointers that must be updated to complete the process. Here is the <code class=\"highlighter-rouge\">add()</code> method for the <code class=\"highlighter-rouge\">CircularDoublyLinkedList</code> class:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">class</span> <span class=\"nx\">CircularDoublyLinkedList</span> <span class=\"p\">{</span>\n\n    <span class=\"kd\">constructor</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"k\">this</span><span class=\"p\">[</span><span class=\"nx\">head</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">null</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    \n    <span class=\"nx\">add</span><span class=\"p\">(</span><span class=\"nx\">data</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    \n        <span class=\"kd\">const</span> <span class=\"nx\">newNode</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">CircularDoublyLinkedListNode</span><span class=\"p\">(</span><span class=\"nx\">data</span><span class=\"p\">);</span>\n                \n        <span class=\"c1\">// special case: no items in the list yet</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">[</span><span class=\"nx\">head</span><span class=\"p\">]</span> <span class=\"o\">===</span> <span class=\"kc\">null</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"k\">this</span><span class=\"p\">[</span><span class=\"nx\">head</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nx\">newNode</span><span class=\"p\">;</span>\n            <span class=\"nx\">newNode</span><span class=\"p\">.</span><span class=\"nx\">next</span> <span class=\"o\">=</span> <span class=\"nx\">newNode</span><span class=\"p\">;</span>\n            <span class=\"nx\">newNode</span><span class=\"p\">.</span><span class=\"nx\">previous</span> <span class=\"o\">=</span> <span class=\"nx\">newNode</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n\n            <span class=\"kd\">const</span> <span class=\"nx\">tail</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">[</span><span class=\"nx\">head</span><span class=\"p\">].</span><span class=\"nx\">previous</span><span class=\"p\">;</span>\n\n            <span class=\"nx\">tail</span><span class=\"p\">.</span><span class=\"nx\">next</span> <span class=\"o\">=</span> <span class=\"nx\">newNode</span><span class=\"p\">;</span>\n            <span class=\"nx\">newNode</span><span class=\"p\">.</span><span class=\"nx\">previous</span> <span class=\"o\">=</span> <span class=\"nx\">tail</span><span class=\"p\">;</span>\n            <span class=\"nx\">newNode</span><span class=\"p\">.</span><span class=\"nx\">next</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">[</span><span class=\"nx\">head</span><span class=\"p\">];</span>\n            <span class=\"k\">this</span><span class=\"p\">[</span><span class=\"nx\">head</span><span class=\"p\">].</span><span class=\"nx\">previous</span> <span class=\"o\">=</span> <span class=\"nx\">newNode</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>The <code class=\"highlighter-rouge\">add()</code> method for the circular doubly linked list accepts one argument, the data to insert into the list. If the list is empty (<code class=\"highlighter-rouge\">this[head]</code> is <code class=\"highlighter-rouge\">null</code>) then the new node is assigned to <code class=\"highlighter-rouge\">this[head]</code>. The extra step to make the list circular is to ensure that both <code class=\"highlighter-rouge\">newNode.next</code> and <code class=\"highlighter-rouge\">newNode.previous</code> point to <code class=\"highlighter-rouge\">newNode</code>.</p>\n\n<p>If the list is not empty, then a new node is added after the current tail, which is retrieved using <code class=\"highlighter-rouge\">this[head].previous</code>. The new node can then be added to <code class=\"highlighter-rouge\">tail.next</code>. Remember, you are actually inserting a new node between the tail and the head of the list, so this operation looks a lot more like an insert than an append. Once complete, <code class=\"highlighter-rouge\">newNode</code> is the list tail and therefore <code class=\"highlighter-rouge\">newNode.next</code> must point to <code class=\"highlighter-rouge\">this[head]</code> and <code class=\"highlighter-rouge\">this[head].previous</code> must point to <code class=\"highlighter-rouge\">newNode</code>.</p>\n\n<p>As with a linear doubly linked list, the complexity of this <code class=\"highlighter-rouge\">add()</code> method is O(1) because no traversal is necessary.</p>\n\n<h3 id=\"retrieving-data-from-the-list\">Retrieving data from the list</h3>\n\n<p>The <code class=\"highlighter-rouge\">get()</code> method for a circular doubly linked list follows the basic algorithm from the start of this post. You must traverse the list while keeping track of how deep into the list you have gone and ensuring you don’t loop back around to the front of the list. Here is how the <code class=\"highlighter-rouge\">get()</code> method is implemented.</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">class</span> <span class=\"nx\">CircularDoublyLinkedList</span> <span class=\"p\">{</span>\n\n    <span class=\"c1\">// other methods hidden for clarity</span>\n\n    <span class=\"kd\">get</span><span class=\"p\">(</span><span class=\"nx\">index</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\n        <span class=\"c1\">// ensure `index` is a positive value and the list isn't empty</span>\n        <span class=\"k\">if</span> <span class=\"p\">((</span><span class=\"nx\">index</span> <span class=\"o\">&gt;</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">&amp;&amp;</span> <span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">[</span><span class=\"nx\">head</span><span class=\"p\">]</span> <span class=\"o\">!==</span> <span class=\"kc\">null</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n\n            <span class=\"kd\">let</span> <span class=\"nx\">current</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">[</span><span class=\"nx\">head</span><span class=\"p\">];</span>\n            <span class=\"kd\">let</span> <span class=\"nx\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n\n            <span class=\"k\">do</span> <span class=\"p\">{</span>\n\n                <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">i</span> <span class=\"o\">===</span> <span class=\"nx\">index</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                    <span class=\"k\">return</span> <span class=\"nx\">current</span><span class=\"p\">.</span><span class=\"nx\">data</span><span class=\"p\">;</span>\n                <span class=\"p\">}</span>\n\n                <span class=\"nx\">current</span> <span class=\"o\">=</span> <span class=\"nx\">current</span><span class=\"p\">.</span><span class=\"nx\">next</span><span class=\"p\">;</span>\n                <span class=\"nx\">i</span><span class=\"o\">++</span><span class=\"p\">;</span>\n\n            <span class=\"p\">}</span> <span class=\"k\">while</span> <span class=\"p\">((</span><span class=\"nx\">current</span> <span class=\"o\">!==</span> <span class=\"k\">this</span><span class=\"p\">[</span><span class=\"nx\">head</span><span class=\"p\">])</span> <span class=\"o\">&amp;&amp;</span> <span class=\"p\">(</span><span class=\"nx\">i</span> <span class=\"o\">&lt;=</span> <span class=\"nx\">index</span><span class=\"p\">));</span>\n\n        <span class=\"p\">}</span>\n\n        <span class=\"k\">return</span> <span class=\"kc\">undefined</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>The <code class=\"highlighter-rouge\">get()</code> method first checks to make sure that <code class=\"highlighter-rouge\">index</code> is a positive value and that the list isn’t empty. If either case is true, then the method returns <code class=\"highlighter-rouge\">undefined</code>. Remember, you must always use an <code class=\"highlighter-rouge\">if</code> statement to check if a circular doubly linked list is empty before starting a traversal due to the use of a post-test instead of a pre-test loop.</p>\n\n<p>Using the same traversal algorithm as discussed earlier, the <code class=\"highlighter-rouge\">get()</code> method uses the <code class=\"highlighter-rouge\">i</code> variable to track how deep into the list it has traversed. When <code class=\"highlighter-rouge\">i</code> is equal to <code class=\"highlighter-rouge\">index</code>, the data in that node is returned (existing the loop early). If the loop exits, either because it has reached the head of the list again or <code class=\"highlighter-rouge\">index</code> is not found in the list, then <code class=\"highlighter-rouge\">undefined</code> is returned.</p>\n\n<p>As with a linear doubly linked list, the <code class=\"highlighter-rouge\">get()</code> method’s complexity ranges from O(1) to O(n);</p>\n\n<h3 id=\"removing-data-from-the-list\">Removing data from the list</h3>\n\n<p>Removing data from a circular doubly linked list is basically the same as with a linear doubly linked list. The differences are:</p>\n\n<ol>\n  <li>Using a post-test loop instead of a pre-test loop for the traversal (same as <code class=\"highlighter-rouge\">get()</code>)</li>\n  <li>Ensuring that the circular links remain on the head and tail nodes when either is removed</li>\n</ol>\n\n<p>Here is what the implementation of a <code class=\"highlighter-rouge\">remove()</code> method looks like:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">class</span> <span class=\"nx\">CircularDoublyLinkedList</span> <span class=\"p\">{</span>\n    \n    <span class=\"c1\">// other methods hidden for clarity</span>\n\n    <span class=\"nx\">remove</span><span class=\"p\">(</span><span class=\"nx\">index</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\n        <span class=\"c1\">// special cases: no nodes in the list or `index` is an invalid value</span>\n        <span class=\"k\">if</span> <span class=\"p\">((</span><span class=\"k\">this</span><span class=\"p\">[</span><span class=\"nx\">head</span><span class=\"p\">]</span> <span class=\"o\">===</span> <span class=\"kc\">null</span><span class=\"p\">)</span> <span class=\"o\">||</span> <span class=\"p\">(</span><span class=\"nx\">index</span> <span class=\"o\">&lt;</span> <span class=\"mi\">0</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n            <span class=\"k\">throw</span> <span class=\"k\">new</span> <span class=\"nx\">RangeError</span><span class=\"p\">(</span><span class=\"s2\">`Index </span><span class=\"p\">${</span><span class=\"nx\">index</span><span class=\"p\">}</span><span class=\"s2\"> does not exist in the list.`</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"c1\">// save the current head for easier access</span>\n        <span class=\"kd\">let</span> <span class=\"nx\">current</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">[</span><span class=\"nx\">head</span><span class=\"p\">];</span>\n\n        <span class=\"c1\">// special case: removing the first node</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">index</span> <span class=\"o\">===</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\n            <span class=\"c1\">// if there's only one node, null out `this[head]`</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">current</span><span class=\"p\">.</span><span class=\"nx\">next</span> <span class=\"o\">===</span> <span class=\"k\">this</span><span class=\"p\">[</span><span class=\"nx\">head</span><span class=\"p\">])</span> <span class=\"p\">{</span>\n                <span class=\"k\">this</span><span class=\"p\">[</span><span class=\"nx\">head</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">null</span><span class=\"p\">;</span>\n            <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n\n                <span class=\"c1\">// get the last item in the list</span>\n                <span class=\"kd\">const</span> <span class=\"nx\">tail</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">[</span><span class=\"nx\">head</span><span class=\"p\">].</span><span class=\"nx\">previous</span><span class=\"p\">;</span>\n\n                <span class=\"cm\">/*\n                 * Set the tail to point to the second item in the list.\n                 * Then make sure that item also points back to the tail.\n                 */</span>\n                <span class=\"nx\">tail</span><span class=\"p\">.</span><span class=\"nx\">next</span> <span class=\"o\">=</span> <span class=\"nx\">current</span><span class=\"p\">.</span><span class=\"nx\">next</span><span class=\"p\">;</span>\n                <span class=\"nx\">current</span><span class=\"p\">.</span><span class=\"nx\">next</span><span class=\"p\">.</span><span class=\"nx\">previous</span> <span class=\"o\">=</span> <span class=\"nx\">tail</span><span class=\"p\">;</span>\n                \n                <span class=\"c1\">// now it's safe to update the head</span>\n                <span class=\"k\">this</span><span class=\"p\">[</span><span class=\"nx\">head</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nx\">tail</span><span class=\"p\">.</span><span class=\"nx\">next</span><span class=\"p\">;</span>\n            <span class=\"p\">}</span>\n\n            <span class=\"c1\">// return the data at the previous head of the list</span>\n            <span class=\"k\">return</span> <span class=\"nx\">current</span><span class=\"p\">.</span><span class=\"nx\">data</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"kd\">let</span> <span class=\"nx\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n\n        <span class=\"k\">do</span> <span class=\"p\">{</span>\n\n            <span class=\"c1\">// traverse to the next node</span>\n            <span class=\"nx\">current</span> <span class=\"o\">=</span> <span class=\"nx\">current</span><span class=\"p\">.</span><span class=\"nx\">next</span><span class=\"p\">;</span>\n\n            <span class=\"c1\">// increment the count</span>\n            <span class=\"nx\">i</span><span class=\"o\">++</span><span class=\"p\">;</span>\n\n        <span class=\"p\">}</span> <span class=\"k\">while</span> <span class=\"p\">((</span><span class=\"nx\">current</span> <span class=\"o\">!==</span> <span class=\"k\">this</span><span class=\"p\">[</span><span class=\"nx\">head</span><span class=\"p\">])</span> <span class=\"o\">&amp;&amp;</span> <span class=\"p\">(</span><span class=\"nx\">i</span> <span class=\"o\">&lt;</span> <span class=\"nx\">index</span><span class=\"p\">));</span>\n\n        <span class=\"c1\">// the node to remove has been found</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">current</span> <span class=\"o\">!==</span> <span class=\"k\">this</span><span class=\"p\">[</span><span class=\"nx\">head</span><span class=\"p\">])</span> <span class=\"p\">{</span>\n\n            <span class=\"c1\">// skip over the node to remove</span>\n            <span class=\"nx\">current</span><span class=\"p\">.</span><span class=\"nx\">previous</span><span class=\"p\">.</span><span class=\"nx\">next</span> <span class=\"o\">=</span> <span class=\"nx\">current</span><span class=\"p\">.</span><span class=\"nx\">next</span><span class=\"p\">;</span>\n            <span class=\"nx\">current</span><span class=\"p\">.</span><span class=\"nx\">next</span><span class=\"p\">.</span><span class=\"nx\">previous</span> <span class=\"o\">=</span> <span class=\"nx\">current</span><span class=\"p\">.</span><span class=\"nx\">previous</span><span class=\"p\">;</span>\n\n            <span class=\"c1\">// return the value that was just removed from the list</span>\n            <span class=\"k\">return</span> <span class=\"nx\">current</span><span class=\"p\">.</span><span class=\"nx\">data</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"c1\">// `index` doesn't exist in the list so throw an error</span>\n        <span class=\"k\">throw</span> <span class=\"k\">new</span> <span class=\"nx\">RangeError</span><span class=\"p\">(</span><span class=\"s2\">`Index </span><span class=\"p\">${</span><span class=\"nx\">index</span><span class=\"p\">}</span><span class=\"s2\"> does not exist in the list.`</span><span class=\"p\">);</span>\n\n    <span class=\"p\">}</span>\n        \n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>While there are special cases in this <code class=\"highlighter-rouge\">remove()</code> method, almost every case requires adjusting pointers on two nodes due to the circular nature of the list. The only case where this isn’t necessary is when you are removing the only node in the list.</p>\n\n<p>Removing the first node in the list (<code class=\"highlighter-rouge\">index</code> is <code class=\"highlighter-rouge\">0</code>) is treated as a special case because there is no need for traversal and <code class=\"highlighter-rouge\">this[head]</code> must be assigned a new value. The second node in the list becomes the head and it <code class=\"highlighter-rouge\">previous</code> pointer must be adjusted accordingly.</p>\n\n<p>The rest of the method follows the same algorithm as for a linear doubly linked list. As we don’t need to worry about the special <code class=\"highlighter-rouge\">this[head]</code> pointer, the search for and removal of the node at <code class=\"highlighter-rouge\">index</code> can proceed as if the list was linear.</p>\n\n<aside class=\"tip\">\n  <p>You can further simply removal of nodes if you don’t mind losing track of the original head of the list. The implementation of <code class=\"highlighter-rouge\">CircularDoublyLinkedList</code> in this post assumes you want the original head of the list to remain as such unless it is removed. However, because the list is circular, it really doesn’t matter what nodes is considered the head because you can always get to every other node as long as you reference to one node. You can arbitrarily reset <code class=\"highlighter-rouge\">this[head]</code> to any node you want an all of the functionality will continue to work.</p>\n</aside>\n\n<h3 id=\"creating-iterators\">Creating iterators</h3>\n\n<p>There are two distinct use cases for iterators in a circular linked list:</p>\n\n<ol>\n  <li>For use with JavaScript’s builtin iteration functionality (like <code class=\"highlighter-rouge\">for-of</code> loops)</li>\n  <li>For moving through the values of the list in a circular fashion for specific applications (like a playlist)</li>\n</ol>\n\n<p>To address the first case, it makes sense to create a <code class=\"highlighter-rouge\">values()</code> generator method and a <code class=\"highlighter-rouge\">Symbol.iterator</code> method on the class as these are expected on JavaScript collections. These methods are similar to those in a doubly linked list with the usual exceptions that the loop must be flipped and the you need to check to see if you’ve reached the list head to exit the loop. Those two methods look like this:</p>\n\n<div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>class CircularLinkedList {\n\n    // other methods hidden for clarity\n\n    values() {\n\n        // special case: list is empty\n        if (this[head] !== null) {\n\n            // special case: only one node\n            if (this[head].next === this[head]) {\n                yield this[head].data;\n            } else {\n\n                let current = this[head];\n\n                do {\n                    yield current.data;\n                    current = current.next;\n                } while (current !== this[head]);\n            }\n\n        }\n    }\n\n    [Symbol.iterator]() {\n        return this.values();\n    }\n}\n</code></pre></div></div>\n\n<p>The <code class=\"highlighter-rouge\">values()</code> generator method has two special cases: when the list is empty, in which case it doesn’t yield anything, and when there is only one node, in which case traversal isn’t necessary and the data stored in the head is yielded. Otherwise, the <code class=\"highlighter-rouge\">do-while</code> loop is the same as the one you’ve seen through this post.</p>\n\n<p>Creating an iterator that loops around is then just a matter of modifying this algorithm so the loop never exits. Here is what that looks like:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">class</span> <span class=\"nx\">CircularDoublyLinkedList</span> <span class=\"p\">{</span>\n\n    <span class=\"c1\">// other methods hidden for clarity</span>\n\n    <span class=\"o\">*</span><span class=\"nx\">circularValues</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n\n        <span class=\"c1\">// special case: list is empty</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">[</span><span class=\"nx\">head</span><span class=\"p\">]</span> <span class=\"o\">!==</span> <span class=\"kc\">null</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\n            <span class=\"kd\">let</span> <span class=\"nx\">current</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">[</span><span class=\"nx\">head</span><span class=\"p\">];</span>\n\n            <span class=\"c1\">// infinite loop</span>\n            <span class=\"k\">do</span> <span class=\"p\">{</span>\n                <span class=\"k\">yield</span> <span class=\"nx\">current</span><span class=\"p\">.</span><span class=\"nx\">data</span><span class=\"p\">;</span>\n                <span class=\"nx\">current</span> <span class=\"o\">=</span> <span class=\"nx\">current</span><span class=\"p\">.</span><span class=\"nx\">next</span><span class=\"p\">;</span>\n            <span class=\"p\">}</span> <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span>\n\n    <span class=\"p\">}</span>\n\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>You wouldn’t want to use the <code class=\"highlighter-rouge\">circularValues()</code> generator method in any situation where JavaScript will drain an iterator (as in the <code class=\"highlighter-rouge\">for-of</code> loop) because this will cause an infinite loop and crash. Instead, manually call the <code class=\"highlighter-rouge\">next()</code> method of the iterator whenever you need another value.</p>\n\n<aside class=\"tip\">\n  <p>For this method, it really doesn’t matter if you use a <code class=\"highlighter-rouge\">do-while</code> loop or a <code class=\"highlighter-rouge\">while</code> loop. I used <code class=\"highlighter-rouge\">do-while</code> to keep it consistent with the rest of this post, but you can use any flavor of infinite loop that you want.</p>\n</aside>\n\n<h3 id=\"using-the-class\">Using the class</h3>\n\n<p>Once complete, you can use the circular doubly linked list implementation like this:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">const</span> <span class=\"nx\">list</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">CircularDoublyLinkedList</span><span class=\"p\">();</span>\n<span class=\"nx\">list</span><span class=\"p\">.</span><span class=\"nx\">add</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">red</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n<span class=\"nx\">list</span><span class=\"p\">.</span><span class=\"nx\">add</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">orange</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n<span class=\"nx\">list</span><span class=\"p\">.</span><span class=\"nx\">add</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">yellow</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n    \n<span class=\"c1\">// get the second item in the list</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">list</span><span class=\"p\">.</span><span class=\"kd\">get</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">));</span>       <span class=\"c1\">// \"orange\"</span>\n\n<span class=\"c1\">// print out all items</span>\n<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kd\">const</span> <span class=\"nx\">color</span> <span class=\"k\">of</span> <span class=\"nx\">list</span><span class=\"p\">.</span><span class=\"nx\">values</span><span class=\"p\">())</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">color</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// remove the second item in the list    </span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">list</span><span class=\"p\">.</span><span class=\"nx\">remove</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">));</span>    <span class=\"c1\">// \"orange\"</span>\n    \n<span class=\"c1\">// get the new first item in the list</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">list</span><span class=\"p\">.</span><span class=\"kd\">get</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">));</span>       <span class=\"c1\">// \"yellow\"</span>\n\n<span class=\"c1\">// convert to an array</span>\n<span class=\"kd\">const</span> <span class=\"nx\">array1</span> <span class=\"o\">=</span> <span class=\"p\">[...</span><span class=\"nx\">list</span><span class=\"p\">.</span><span class=\"nx\">values</span><span class=\"p\">()];</span>\n<span class=\"kd\">const</span> <span class=\"nx\">array2</span> <span class=\"o\">=</span> <span class=\"p\">[...</span><span class=\"nx\">list</span><span class=\"p\">];</span>\n\n<span class=\"c1\">// manually cycle through each item in a circular manner</span>\n<span class=\"kd\">const</span> <span class=\"nx\">iterator</span> <span class=\"o\">=</span> <span class=\"nx\">list</span><span class=\"p\">.</span><span class=\"nx\">circularValues</span><span class=\"p\">();</span>\n\n<span class=\"kd\">let</span> <span class=\"p\">{</span> <span class=\"nx\">value</span> <span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"nx\">iterator</span><span class=\"p\">.</span><span class=\"nx\">next</span><span class=\"p\">();</span>\n<span class=\"nx\">doSomething</span><span class=\"p\">(</span><span class=\"nx\">value</span><span class=\"p\">);</span>    \n\n<span class=\"p\">({</span> <span class=\"nx\">value</span> <span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"nx\">iterator</span><span class=\"p\">.</span><span class=\"nx\">next</span><span class=\"p\">());</span>\n<span class=\"nx\">doSomething</span><span class=\"p\">(</span><span class=\"nx\">value</span><span class=\"p\">);</span>    \n</code></pre></div></div>\n\n<p>The full source code is available on GitHub at my <a href="https://humanwhocodes.com/feeds/\&quot;https://github.com/humanwhocodes/computer-science-in-javascript\&quot;">Computer Science in JavaScript</a> project.</p>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<p>Circular doubly linked lists are setup in a similar manner as linear doubly linked lists in that each ndoe has a pointer to both the next and previous nodes in the list. The difference is that the list tail always points to the list head so you can follow <code class=\"highlighter-rouge\">next</code> pointers and never receive <code class=\"highlighter-rouge\">null</code>. This functionality can be used for applications such as playlists or round-robin distribution of data processing.</p>\n\n<p>The implementation of doubly linked list operations differs from linear doubly linked lists in that you must use a post-test loop (<code class=\"highlighter-rouge\">do-while</code>) to check if you’re back at the beginning of the list. For most operations, it’s important to stop when the list head has been reached again. The only exception is in creating an iterator to be called manually and which you’d prefer never ran out of items to return.</p>\n\n<p>The complexity of circular doubly linked list operations is the same as with linear doubly linked list operations. Unlike the other data structures discussed in this blog post series, circular doubly linked lists can be helpful in JavaScript applications that require repeating cycling through the same data. That is one use case that isn’t covered well by JavaScript’s builtin collection types.</p>\n",
            "url": "https://humanwhocodes.com/blog/2019/03/computer-science-in-javascript-circular-doubly-linked-lists/",
            
            
            
            "tags": ["Computer Science","Data Structures","JavaScript","Linked List","Programming"],
            
            "date_published": "2019-03-05T00:00:00+00:00",
            "date_modified": "2019-03-05T00:00:00+00:00",
            
                "author": "Nicholas C. Zakas"
            
        },
    
        {
            "id": "https://humanwhocodes.com/blog/2019/02/computer-science-in-javascript-doubly-linked-lists/",
            "title": "Computer science in JavaScript: Doubly linked lists",
            "summary": "In my previous post, I discussed creating a singly linked list in JavaScript (if you haven’t yet read that post, I suggest doing so now). A single linked list consists of nodes that each have a single pointer to the next node in the list. Singly linked lists often require traversal of the entire list for operations, and as such, have generally poor performance. One way to improve the performance of linked lists is to add a second pointer on each node that points to the previous node in the list. A linked list whose nodes point to both the previous and next nodes is called a doubly linked list.",
            "content_text": "In my previous post, I discussed creating a singly linked list in JavaScript (if you haven’t yet read that post, I suggest doing so now). A single linked list consists of nodes that each have a single pointer to the next node in the list. Singly linked lists often require traversal of the entire list for operations, and as such, have generally poor performance. One way to improve the performance of linked lists is to add a second pointer on each node that points to the previous node in the list. A linked list whose nodes point to both the previous and next nodes is called a doubly linked list.\n\nThe design of a doubly linked list\n\nSimilar to a singly linked list, a doubly linked list is made up of a series of nodes. Each node contains some data as well as a pointer to the next node in the list and a pointer to the previous node. Here is a simple representation in JavaScript:\n\nclass DoublyLinkedListNode {\n    constructor(data) {\n        this.data = data;\n        this.next = null;\n        this.previous = null;\n    }\n}\n\n\nIn the DoublyLinkedListNode class, the data property contains the value the linked list item should store, the next property is a pointer to the next item in the list, and the previous property is a pointer to the previous item in the list. Both the next and previous pointers start out as null because the next and previous nodes aren’t known at the time the class is instantiated. You can then create a doubly linked list using the DoublyLinkedListNode class like this:\n\n// create the first node\nconst head = new DoublyLinkedListNode(12);\n\n// add a second node\nconst secondNode = new DoublyLinkedListNode(99);\nhead.next = secondNode;\nsecondNode.previous = head;\n\n// add a third node\nconst thirdNode = new DoublyLinkedListNode(37);\nsecondNode.next = thirdNode;\nthirdNode.previous = secondNode;\n\nconst tail = thirdNode;\n\n\nAs with a singly linked list, the first node in a doubly linked list is called the head. The second and third nodes are assigned by using both the next and previous pointers on each node. The following image shows the resulting data structure.\n\n\n\nYou can traverse a doubly linked list in the same way as a singly linked list by following the next pointer on each node, such as:\n\nlet current = head;\n\nwhile (current !== null) {\n    console.log(current.data);\n    current = current.next;\n}\n\n\nDoubly linked list also typically track the last node in the list, called the tail. The tail of the list is useful to track both for easier insertion of new nodes and to search from the back of the list to the front. To do so, you start at the tail and follow the previous links until there are no more nodes. The following code prints out each value in the doubly linked in reverse:\n\nlet current = tail;\n\nwhile (current !== null) {\n    console.log(current.data);\n    current = current.previous;\n}\n\n\nThis ability to go backwards and forwards through a doubly linked list provides an advantage over a singly linked list by allowing searches in both directions.\n\nThe DoublyLinkedList class\n\nAs with a singly linked list, the operations for manipulating nodes in a doubly linked list are best encapsulated in a class. Here is a simple example:\n\nconst head = Symbol(\"head\");\nconst tail = Symbol(\"tail\");\n\nclass DoublyLinkedList {\n    constructor() {\n        this[head] = null;\n        this[tail] = null;\n    }\n}\n\n\nThe DoublyLinkedList class represents a doubly linked list and will contain methods for interacting with the data it contains. There are two symbol properties, head and tail, to track the first and last nodes in the list, respectively. As with the singly linked list, the head and tail are not intended to be accessed from outside the class.\n\nAdding new data to the list\n\nAdding an item to a doubly linked list is very similar to adding to a singly linked list. In both data structures, you must first find the last node in the list and then add a new node after it. In a singly linked list you had to traverse the entire list to find the last node whereas in a doubly linked list the last node is tracked using the this[tail] property. Here is the add() method for the DoublyLinkedList class:\n\nclass DoublyLinkedList {\n\n    constructor() {\n        this[head] = null;\n        this[tail] = null;\n    }\n    \n    add(data) {\n\n        // create the new node and place the data in it\n        const newNode = new DoublyLinkedListNode(data);\n                \n        // special case: no nodes in the list yet\n        if (this[head] === null) {\n            this[head] = newNode;\n        } else {\n\n            // link the current tail and new tail\n            this[tail].next = newNode;\n            newNode.previous = this[tail];\n        }\n\n        // reassign the tail to be the new node\n        this[tail] = newNode;\n    }\n\n}\n\n\nThe add() method for the doubly linked list accepts one argument, the data to insert into the list. If the list is empty (both this[head] and this[tail] are null) then the new node is assigned to this[head]. If the list is not empty, then a new node is added after the current this[tail] node. The last step is to set this[tail] to be newNode because in both an empty and non-empty list the new node will always be the last node.\n\nNotice that in the case of an empty list, this[head] and this[tail] are set to the same node. That’s because the single node in a one-node list is both the first and the last node in that list. Keeping proper track of the list tail is important so the list can be traversed in reverse if necessary.\n\nThe complexity of this add() method is O(1). For both an empty and a non-empty list, the operation doesn’t require any traversal and so is much less complex than add() for the singly linked list where only the list head was tracked.\n\nRetrieving data from the list\n\nThe get() method for a doubly linked list is exactly the same as the get() method for a singly linked list. In both cases, you must traverse the list starting from this[head] and track how many nodes have been seen to determine when the correct node is reached:\n\nclass DoublyLinkedList {\n\n    // other methods hidden for clarity\n\n    get(index) {\n    \n        // ensure `index` is a positive value\n        if (index &gt; -1) {\n\n            // the pointer to use for traversal\n            let current = this[head];\n\n            // used to keep track of where in the list you are\n            let i = 0;\n\n            // traverse the list until you reach either the end or the index\n            while ((current !== null) &amp;&amp; (i &lt; index)) {\n                current = current.next;\n                i++;          \n            }\n        \n            // return the data if `current` isn't null\n            return current !== null ? current.data : undefined;\n        } else {\n            return undefined;\n        }\n    }\n\n}\n\n\nTo reiterate from the singly linked list post, the complexity of the get() method ranges from O(1) when removing the first node (no traversal is needed) to O(n) when removing the last node (traversing the entire list is required).\n\nRemoving data from a doubly linked list\n\nThe algorithm for removing data from a doubly linked list is essentially the same as with a singly linked list: first traverse the data structure to find the node in the given position (same algorithm as get()) and then remove it from the list. The only significant differences from the algorithm used in a singly linked list are:\n\n\n  There is no need for a previous variable to track one node back in the loop because the previous node is always available through current.previous.\n  You need to watch for changes to the last node in the list to ensure that this[tail] remains correct.\n\n\nOtherwise, the remove() method looks very similar to that of the singly linked list:\n\nclass DoublyLinkedList {\n    \n    // other methods hidden for clarity\n\n    remove(index) {\n    \n        // special cases: no nodes in the list or `index` is negative\n        if ((this[head] === null) || (index &lt; 0)) {\n            throw new RangeError(`Index ${index} does not exist in the list.`);\n        }\n\n        // special case: removing the first node\n        if (index === 0) {\n\n            // store the data from the current head\n            const data = this[head].data;\n\n            // just replace the head with the next node in the list\n            this[head] = this[head].next;\n\n            // special case: there was only one node, so also reset `this[tail]`\n            if (this[head] === null) {\n                this[tail] = null;\n            } else {\n                this[head].previous = null;\n            }\n\n            // return the data at the previous head of the list\n            return data;\n        }\n\n        // pointer use to traverse the list\n        let current = this[head];\n\n        // used to track how deep into the list you are\n        let i = 0;\n\n        // same loop as in `get()`\n        while ((current !== null) &amp;&amp; (i &lt; index)) {\n\n            // traverse to the next node\n            current = current.next;\n\n            // increment the count\n            i++;\n        }\n\n        // if node was found, remove it\n        if (current !== null) {\n\n            // skip over the node to remove\n            current.previous.next = current.next;\n\n            // special case: this is the last node so reset `this[tail]`.\n            if (this[tail] === current) {\n                this[tail] = current.previous;\n            } else {\n                current.next.previous = current.previous;\n            }\n\n            // return the value that was just removed from the list\n            return current.data;\n        }\n\n        // if node wasn't found, throw an error\n        throw new RangeError(`Index ${index} does not exist in the list.`);\n    }\n    \n}\n\n\nWhen index is 0, meaning the first node is being removed, this[head] is set to this[head].next, the same as with a singly linked list. The difference comes after that point when you need to update other pointers. If there was only one node in the list, then you need to set this[tail] to null to effectively remove that one node; if there was more than one node, you need to set this[head].previous to null. Remember that the new head was previously the second node in the list and so its previous link was pointing to the node that was just removed.\n\nAfter the loop, you need to ensure that both the next pointer of the node before the removed node and the previous pointer of the node after the removed node. Of course, if the node to remove is the last node then you need to update the this[tail] pointer.\n\nCreating a reverse iterator\n\nYou can make a doubly linked list iterable in JavaScript using the same values() and Symbol.iterator methods from the singly linked list. In a doubly linked list, however, you have the opportunity to create a reverse iterator that produces the data starting from the tail and working its way towards the head. Here is what a reverse() generator method looks like:\n\nclass DoublyLinkedList {\n\n    // other methods hidden for clarity\n\n    *reverse(){\n\n        // start by looking at the tail\n        let current = this[tail];\n\n        // follow the previous links to the head\n        while (current !== null) {\n            yield current.data;\n            current = current.previous;\n        }\n    }\n}\n\n\nThe reverse() generator method follows the same algorithm as the values() generator method in the singly linked list with the exception that current starts equal to this[tail] and the current.previous is followed until the there are no more nodes. Creating a reverse iterator is helpful for discovering bugs in the implementation as well as avoiding rearranging nodes just to access the data in a different order.\n\nOther methods\n\nMost other methods that don’t involve addition or removal of nodes follow the same algorithms as those in a singly linked list.\n\nUsing the class\n\nOnce complete, you can use the linked list implementation like this:\n\nconst list = new DoublyLinkedList();\nlist.add(\"red\");\nlist.add(\"orange\");\nlist.add(\"yellow\");\n    \n// get the second item in the list\nconsole.log(list.get(1));       // \"orange\"\n\n// print out all items in reverse\nfor (const color of list.reverse()) {\n    console.log(color);\n}\n\n// remove the second item in the list    \nconsole.log(list.remove(1));    // \"orange\"\n    \n// get the new first item in the list\nconsole.log(list.get(1));       // \"yellow\"\n\n// convert to an array\nconst array1 = [...list.values()];\nconst array2 = [...list];\nconst array3 = [...list.reverse()];\n\n\nThe full source code is available on GitHub at my Computer Science in JavaScript project.\n\nConclusion\n\nDoubly linked lists are similar to singly linked lists in that each node has a next pointer to the next node in the list. Each node also has a previous pointer to the previous node in the list, allowing you to move both backwards and forwards in the list easily. Doubly linked lists typically track both the first and last node in the list, and that makes adding a node into the list a O(1) operation instead of O(n) in a singly linked list.\n\nHowever, the complexity of other doubly linked list operations is the same as with a singly linked list because you always end up traversing most of the list. As such, doubly linked lists don’t offer any real advantage over the built-in JavaScript Array class for storing a collection of unrelated data (though related data, such as sibling DOM nodes in the browser) might be useful to represent in some kind of linked list.\n",
            "content_html": "<p>In my <a href="https://humanwhocodes.com/feeds/\&quot;https://humanwhocodes.com/blog/2019/01/computer-science-in-javascript-linked-list/\&quot;">previous post</a>, I discussed creating a singly linked list in JavaScript (if you haven’t yet read that post, I suggest doing so now). A single linked list consists of nodes that each have a single pointer to the next node in the list. Singly linked lists often require traversal of the entire list for operations, and as such, have generally poor performance. One way to improve the performance of linked lists is to add a second pointer on each node that points to the previous node in the list. A linked list whose nodes point to both the previous and next nodes is called a <em>doubly linked list</em>.</p>\n\n<h2 id=\"the-design-of-a-doubly-linked-list\">The design of a doubly linked list</h2>\n\n<p>Similar to a singly linked list, a doubly linked list is made up of a series of nodes. Each node contains some data as well as a pointer to the next node in the list and a pointer to the previous node. Here is a simple representation in JavaScript:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">class</span> <span class=\"nx\">DoublyLinkedListNode</span> <span class=\"p\">{</span>\n    <span class=\"kd\">constructor</span><span class=\"p\">(</span><span class=\"nx\">data</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">data</span> <span class=\"o\">=</span> <span class=\"nx\">data</span><span class=\"p\">;</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">next</span> <span class=\"o\">=</span> <span class=\"kc\">null</span><span class=\"p\">;</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">previous</span> <span class=\"o\">=</span> <span class=\"kc\">null</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>In the <code class=\"highlighter-rouge\">DoublyLinkedListNode</code> class, the <code class=\"highlighter-rouge\">data</code> property contains the value the linked list item should store, the <code class=\"highlighter-rouge\">next</code> property is a pointer to the next item in the list, and the <code class=\"highlighter-rouge\">previous</code> property is a pointer to the previous item in the list. Both the <code class=\"highlighter-rouge\">next</code> and <code class=\"highlighter-rouge\">previous</code> pointers start out as <code class=\"highlighter-rouge\">null</code> because the next and previous nodes aren’t known at the time the class is instantiated. You can then create a doubly linked list using the <code class=\"highlighter-rouge\">DoublyLinkedListNode</code> class like this:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// create the first node</span>\n<span class=\"kd\">const</span> <span class=\"nx\">head</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">DoublyLinkedListNode</span><span class=\"p\">(</span><span class=\"mi\">12</span><span class=\"p\">);</span>\n\n<span class=\"c1\">// add a second node</span>\n<span class=\"kd\">const</span> <span class=\"nx\">secondNode</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">DoublyLinkedListNode</span><span class=\"p\">(</span><span class=\"mi\">99</span><span class=\"p\">);</span>\n<span class=\"nx\">head</span><span class=\"p\">.</span><span class=\"nx\">next</span> <span class=\"o\">=</span> <span class=\"nx\">secondNode</span><span class=\"p\">;</span>\n<span class=\"nx\">secondNode</span><span class=\"p\">.</span><span class=\"nx\">previous</span> <span class=\"o\">=</span> <span class=\"nx\">head</span><span class=\"p\">;</span>\n\n<span class=\"c1\">// add a third node</span>\n<span class=\"kd\">const</span> <span class=\"nx\">thirdNode</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">DoublyLinkedListNode</span><span class=\"p\">(</span><span class=\"mi\">37</span><span class=\"p\">);</span>\n<span class=\"nx\">secondNode</span><span class=\"p\">.</span><span class=\"nx\">next</span> <span class=\"o\">=</span> <span class=\"nx\">thirdNode</span><span class=\"p\">;</span>\n<span class=\"nx\">thirdNode</span><span class=\"p\">.</span><span class=\"nx\">previous</span> <span class=\"o\">=</span> <span class=\"nx\">secondNode</span><span class=\"p\">;</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">tail</span> <span class=\"o\">=</span> <span class=\"nx\">thirdNode</span><span class=\"p\">;</span>\n</code></pre></div></div>\n\n<p>As with a singly linked list, the first node in a doubly linked list is called the head. The second and third nodes are assigned by using both the <code class=\"highlighter-rouge\">next</code> and <code class=\"highlighter-rouge\">previous</code> pointers on each node. The following image shows the resulting data structure.</p>\n\n<p><a href="https://humanwhocodes.com/feeds/\&quot;https://commons.wikimedia.org/w/index.php?curid=2245165\&quot;"><img src="https://humanwhocodes.com/feeds/\&quot;https://humanwhocodes.com/images/posts/2019/doubly-linked-list.svg\&quot;" alt=\"Doubly linked list diagram by Lasindi - Own work, Public Domain\" /></a></p>\n\n<p>You can traverse a doubly linked list in the same way as a singly linked list by following the <code class=\"highlighter-rouge\">next</code> pointer on each node, such as:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">let</span> <span class=\"nx\">current</span> <span class=\"o\">=</span> <span class=\"nx\">head</span><span class=\"p\">;</span>\n\n<span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"nx\">current</span> <span class=\"o\">!==</span> <span class=\"kc\">null</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">current</span><span class=\"p\">.</span><span class=\"nx\">data</span><span class=\"p\">);</span>\n    <span class=\"nx\">current</span> <span class=\"o\">=</span> <span class=\"nx\">current</span><span class=\"p\">.</span><span class=\"nx\">next</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>Doubly linked list also typically track the last node in the list, called the <em>tail</em>. The tail of the list is useful to track both for easier insertion of new nodes and to search from the back of the list to the front. To do so, you start at the tail and follow the <code class=\"highlighter-rouge\">previous</code> links until there are no more nodes. The following code prints out each value in the doubly linked in reverse:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">let</span> <span class=\"nx\">current</span> <span class=\"o\">=</span> <span class=\"nx\">tail</span><span class=\"p\">;</span>\n\n<span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"nx\">current</span> <span class=\"o\">!==</span> <span class=\"kc\">null</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">current</span><span class=\"p\">.</span><span class=\"nx\">data</span><span class=\"p\">);</span>\n    <span class=\"nx\">current</span> <span class=\"o\">=</span> <span class=\"nx\">current</span><span class=\"p\">.</span><span class=\"nx\">previous</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>This ability to go backwards and forwards through a doubly linked list provides an advantage over a singly linked list by allowing searches in both directions.</p>\n\n<h2 id=\"the-doublylinkedlist-class\">The <code class=\"highlighter-rouge\">DoublyLinkedList</code> class</h2>\n\n<p>As with a singly linked list, the operations for manipulating nodes in a doubly linked list are best encapsulated in a class. Here is a simple example:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">const</span> <span class=\"nx\">head</span> <span class=\"o\">=</span> <span class=\"nb\">Symbol</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">head</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n<span class=\"kd\">const</span> <span class=\"nx\">tail</span> <span class=\"o\">=</span> <span class=\"nb\">Symbol</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">tail</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n\n<span class=\"kd\">class</span> <span class=\"nx\">DoublyLinkedList</span> <span class=\"p\">{</span>\n    <span class=\"kd\">constructor</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"k\">this</span><span class=\"p\">[</span><span class=\"nx\">head</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">null</span><span class=\"p\">;</span>\n        <span class=\"k\">this</span><span class=\"p\">[</span><span class=\"nx\">tail</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">null</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>The <code class=\"highlighter-rouge\">DoublyLinkedList</code> class represents a doubly linked list and will contain methods for interacting with the data it contains. There are two symbol properties, <code class=\"highlighter-rouge\">head</code> and <code class=\"highlighter-rouge\">tail</code>, to track the first and last nodes in the list, respectively. As with the singly linked list, the <code class=\"highlighter-rouge\">head</code> and <code class=\"highlighter-rouge\">tail</code> are not intended to be accessed from outside the class.</p>\n\n<h3 id=\"adding-new-data-to-the-list\">Adding new data to the list</h3>\n\n<p>Adding an item to a doubly linked list is very similar to adding to a singly linked list. In both data structures, you must first find the last node in the list and then add a new node after it. In a singly linked list you had to traverse the entire list to find the last node whereas in a doubly linked list the last node is tracked using the <code class=\"highlighter-rouge\">this[tail]</code> property. Here is the <code class=\"highlighter-rouge\">add()</code> method for the <code class=\"highlighter-rouge\">DoublyLinkedList</code> class:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">class</span> <span class=\"nx\">DoublyLinkedList</span> <span class=\"p\">{</span>\n\n    <span class=\"kd\">constructor</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"k\">this</span><span class=\"p\">[</span><span class=\"nx\">head</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">null</span><span class=\"p\">;</span>\n        <span class=\"k\">this</span><span class=\"p\">[</span><span class=\"nx\">tail</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">null</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    \n    <span class=\"nx\">add</span><span class=\"p\">(</span><span class=\"nx\">data</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\n        <span class=\"c1\">// create the new node and place the data in it</span>\n        <span class=\"kd\">const</span> <span class=\"nx\">newNode</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">DoublyLinkedListNode</span><span class=\"p\">(</span><span class=\"nx\">data</span><span class=\"p\">);</span>\n                \n        <span class=\"c1\">// special case: no nodes in the list yet</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">[</span><span class=\"nx\">head</span><span class=\"p\">]</span> <span class=\"o\">===</span> <span class=\"kc\">null</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"k\">this</span><span class=\"p\">[</span><span class=\"nx\">head</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nx\">newNode</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n\n            <span class=\"c1\">// link the current tail and new tail</span>\n            <span class=\"k\">this</span><span class=\"p\">[</span><span class=\"nx\">tail</span><span class=\"p\">].</span><span class=\"nx\">next</span> <span class=\"o\">=</span> <span class=\"nx\">newNode</span><span class=\"p\">;</span>\n            <span class=\"nx\">newNode</span><span class=\"p\">.</span><span class=\"nx\">previous</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">[</span><span class=\"nx\">tail</span><span class=\"p\">];</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"c1\">// reassign the tail to be the new node</span>\n        <span class=\"k\">this</span><span class=\"p\">[</span><span class=\"nx\">tail</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nx\">newNode</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>The <code class=\"highlighter-rouge\">add()</code> method for the doubly linked list accepts one argument, the data to insert into the list. If the list is empty (both <code class=\"highlighter-rouge\">this[head]</code> and <code class=\"highlighter-rouge\">this[tail]</code> are <code class=\"highlighter-rouge\">null</code>) then the new node is assigned to <code class=\"highlighter-rouge\">this[head]</code>. If the list is not empty, then a new node is added after the current <code class=\"highlighter-rouge\">this[tail]</code> node. The last step is to set <code class=\"highlighter-rouge\">this[tail]</code> to be <code class=\"highlighter-rouge\">newNode</code> because in both an empty and non-empty list the new node will always be the last node.</p>\n\n<p>Notice that in the case of an empty list, <code class=\"highlighter-rouge\">this[head]</code> and <code class=\"highlighter-rouge\">this[tail]</code> are set to the same node. That’s because the single node in a one-node list is both the first and the last node in that list. Keeping proper track of the list tail is important so the list can be traversed in reverse if necessary.</p>\n\n<p>The complexity of this <code class=\"highlighter-rouge\">add()</code> method is O(1). For both an empty and a non-empty list, the operation doesn’t require any traversal and so is much less complex than <code class=\"highlighter-rouge\">add()</code> for the singly linked list where only the list head was tracked.</p>\n\n<h3 id=\"retrieving-data-from-the-list\">Retrieving data from the list</h3>\n\n<p>The <code class=\"highlighter-rouge\">get()</code> method for a doubly linked list is exactly the same as the <code class=\"highlighter-rouge\">get()</code> method for a singly linked list. In both cases, you must traverse the list starting from <code class=\"highlighter-rouge\">this[head]</code> and track how many nodes have been seen to determine when the correct node is reached:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">class</span> <span class=\"nx\">DoublyLinkedList</span> <span class=\"p\">{</span>\n\n    <span class=\"c1\">// other methods hidden for clarity</span>\n\n    <span class=\"kd\">get</span><span class=\"p\">(</span><span class=\"nx\">index</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    \n        <span class=\"c1\">// ensure `index` is a positive value</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">index</span> <span class=\"o\">&gt;</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\n            <span class=\"c1\">// the pointer to use for traversal</span>\n            <span class=\"kd\">let</span> <span class=\"nx\">current</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">[</span><span class=\"nx\">head</span><span class=\"p\">];</span>\n\n            <span class=\"c1\">// used to keep track of where in the list you are</span>\n            <span class=\"kd\">let</span> <span class=\"nx\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n\n            <span class=\"c1\">// traverse the list until you reach either the end or the index</span>\n            <span class=\"k\">while</span> <span class=\"p\">((</span><span class=\"nx\">current</span> <span class=\"o\">!==</span> <span class=\"kc\">null</span><span class=\"p\">)</span> <span class=\"o\">&amp;&amp;</span> <span class=\"p\">(</span><span class=\"nx\">i</span> <span class=\"o\">&lt;</span> <span class=\"nx\">index</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n                <span class=\"nx\">current</span> <span class=\"o\">=</span> <span class=\"nx\">current</span><span class=\"p\">.</span><span class=\"nx\">next</span><span class=\"p\">;</span>\n                <span class=\"nx\">i</span><span class=\"o\">++</span><span class=\"p\">;</span>          \n            <span class=\"p\">}</span>\n        \n            <span class=\"c1\">// return the data if `current` isn't null</span>\n            <span class=\"k\">return</span> <span class=\"nx\">current</span> <span class=\"o\">!==</span> <span class=\"kc\">null</span> <span class=\"p\">?</span> <span class=\"nx\">current</span><span class=\"p\">.</span><span class=\"nx\">data</span> <span class=\"p\">:</span> <span class=\"kc\">undefined</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n            <span class=\"k\">return</span> <span class=\"kc\">undefined</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>To reiterate from the singly linked list post, the complexity of the <code class=\"highlighter-rouge\">get()</code> method ranges from O(1) when removing the first node (no traversal is needed) to O(n) when removing the last node (traversing the entire list is required).</p>\n\n<h3 id=\"removing-data-from-a-doubly-linked-list\">Removing data from a doubly linked list</h3>\n\n<p>The algorithm for removing data from a doubly linked list is essentially the same as with a singly linked list: first traverse the data structure to find the node in the given position (same algorithm as <code class=\"highlighter-rouge\">get()</code>) and then remove it from the list. The only significant differences from the algorithm used in a singly linked list are:</p>\n\n<ol>\n  <li>There is no need for a <code class=\"highlighter-rouge\">previous</code> variable to track one node back in the loop because the previous node is always available through <code class=\"highlighter-rouge\">current.previous</code>.</li>\n  <li>You need to watch for changes to the last node in the list to ensure that <code class=\"highlighter-rouge\">this[tail]</code> remains correct.</li>\n</ol>\n\n<p>Otherwise, the <code class=\"highlighter-rouge\">remove()</code> method looks very similar to that of the singly linked list:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">class</span> <span class=\"nx\">DoublyLinkedList</span> <span class=\"p\">{</span>\n    \n    <span class=\"c1\">// other methods hidden for clarity</span>\n\n    <span class=\"nx\">remove</span><span class=\"p\">(</span><span class=\"nx\">index</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    \n        <span class=\"c1\">// special cases: no nodes in the list or `index` is negative</span>\n        <span class=\"k\">if</span> <span class=\"p\">((</span><span class=\"k\">this</span><span class=\"p\">[</span><span class=\"nx\">head</span><span class=\"p\">]</span> <span class=\"o\">===</span> <span class=\"kc\">null</span><span class=\"p\">)</span> <span class=\"o\">||</span> <span class=\"p\">(</span><span class=\"nx\">index</span> <span class=\"o\">&lt;</span> <span class=\"mi\">0</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n            <span class=\"k\">throw</span> <span class=\"k\">new</span> <span class=\"nx\">RangeError</span><span class=\"p\">(</span><span class=\"s2\">`Index </span><span class=\"p\">${</span><span class=\"nx\">index</span><span class=\"p\">}</span><span class=\"s2\"> does not exist in the list.`</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"c1\">// special case: removing the first node</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">index</span> <span class=\"o\">===</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\n            <span class=\"c1\">// store the data from the current head</span>\n            <span class=\"kd\">const</span> <span class=\"nx\">data</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">[</span><span class=\"nx\">head</span><span class=\"p\">].</span><span class=\"nx\">data</span><span class=\"p\">;</span>\n\n            <span class=\"c1\">// just replace the head with the next node in the list</span>\n            <span class=\"k\">this</span><span class=\"p\">[</span><span class=\"nx\">head</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">[</span><span class=\"nx\">head</span><span class=\"p\">].</span><span class=\"nx\">next</span><span class=\"p\">;</span>\n\n            <span class=\"c1\">// special case: there was only one node, so also reset `this[tail]`</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">[</span><span class=\"nx\">head</span><span class=\"p\">]</span> <span class=\"o\">===</span> <span class=\"kc\">null</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                <span class=\"k\">this</span><span class=\"p\">[</span><span class=\"nx\">tail</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">null</span><span class=\"p\">;</span>\n            <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n                <span class=\"k\">this</span><span class=\"p\">[</span><span class=\"nx\">head</span><span class=\"p\">].</span><span class=\"nx\">previous</span> <span class=\"o\">=</span> <span class=\"kc\">null</span><span class=\"p\">;</span>\n            <span class=\"p\">}</span>\n\n            <span class=\"c1\">// return the data at the previous head of the list</span>\n            <span class=\"k\">return</span> <span class=\"nx\">data</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"c1\">// pointer use to traverse the list</span>\n        <span class=\"kd\">let</span> <span class=\"nx\">current</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">[</span><span class=\"nx\">head</span><span class=\"p\">];</span>\n\n        <span class=\"c1\">// used to track how deep into the list you are</span>\n        <span class=\"kd\">let</span> <span class=\"nx\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n\n        <span class=\"c1\">// same loop as in `get()`</span>\n        <span class=\"k\">while</span> <span class=\"p\">((</span><span class=\"nx\">current</span> <span class=\"o\">!==</span> <span class=\"kc\">null</span><span class=\"p\">)</span> <span class=\"o\">&amp;&amp;</span> <span class=\"p\">(</span><span class=\"nx\">i</span> <span class=\"o\">&lt;</span> <span class=\"nx\">index</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n\n            <span class=\"c1\">// traverse to the next node</span>\n            <span class=\"nx\">current</span> <span class=\"o\">=</span> <span class=\"nx\">current</span><span class=\"p\">.</span><span class=\"nx\">next</span><span class=\"p\">;</span>\n\n            <span class=\"c1\">// increment the count</span>\n            <span class=\"nx\">i</span><span class=\"o\">++</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"c1\">// if node was found, remove it</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">current</span> <span class=\"o\">!==</span> <span class=\"kc\">null</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\n            <span class=\"c1\">// skip over the node to remove</span>\n            <span class=\"nx\">current</span><span class=\"p\">.</span><span class=\"nx\">previous</span><span class=\"p\">.</span><span class=\"nx\">next</span> <span class=\"o\">=</span> <span class=\"nx\">current</span><span class=\"p\">.</span><span class=\"nx\">next</span><span class=\"p\">;</span>\n\n            <span class=\"c1\">// special case: this is the last node so reset `this[tail]`.</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">[</span><span class=\"nx\">tail</span><span class=\"p\">]</span> <span class=\"o\">===</span> <span class=\"nx\">current</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                <span class=\"k\">this</span><span class=\"p\">[</span><span class=\"nx\">tail</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nx\">current</span><span class=\"p\">.</span><span class=\"nx\">previous</span><span class=\"p\">;</span>\n            <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n                <span class=\"nx\">current</span><span class=\"p\">.</span><span class=\"nx\">next</span><span class=\"p\">.</span><span class=\"nx\">previous</span> <span class=\"o\">=</span> <span class=\"nx\">current</span><span class=\"p\">.</span><span class=\"nx\">previous</span><span class=\"p\">;</span>\n            <span class=\"p\">}</span>\n\n            <span class=\"c1\">// return the value that was just removed from the list</span>\n            <span class=\"k\">return</span> <span class=\"nx\">current</span><span class=\"p\">.</span><span class=\"nx\">data</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"c1\">// if node wasn't found, throw an error</span>\n        <span class=\"k\">throw</span> <span class=\"k\">new</span> <span class=\"nx\">RangeError</span><span class=\"p\">(</span><span class=\"s2\">`Index </span><span class=\"p\">${</span><span class=\"nx\">index</span><span class=\"p\">}</span><span class=\"s2\"> does not exist in the list.`</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n    \n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>When <code class=\"highlighter-rouge\">index</code> is <code class=\"highlighter-rouge\">0</code>, meaning the first node is being removed, <code class=\"highlighter-rouge\">this[head]</code> is set to <code class=\"highlighter-rouge\">this[head].next</code>, the same as with a singly linked list. The difference comes after that point when you need to update other pointers. If there was only one node in the list, then you need to set <code class=\"highlighter-rouge\">this[tail]</code> to <code class=\"highlighter-rouge\">null</code> to effectively remove that one node; if there was more than one node, you need to set <code class=\"highlighter-rouge\">this[head].previous</code> to <code class=\"highlighter-rouge\">null</code>. Remember that the new head was previously the second node in the list and so its <code class=\"highlighter-rouge\">previous</code> link was pointing to the node that was just removed.</p>\n\n<p>After the loop, you need to ensure that both the <code class=\"highlighter-rouge\">next</code> pointer of the node before the removed node and the <code class=\"highlighter-rouge\">previous</code> pointer of the node after the removed node. Of course, if the node to remove is the last node then you need to update the <code class=\"highlighter-rouge\">this[tail]</code> pointer.</p>\n\n<h3 id=\"creating-a-reverse-iterator\">Creating a reverse iterator</h3>\n\n<p>You can make a doubly linked list iterable in JavaScript using the same <code class=\"highlighter-rouge\">values()</code> and <code class=\"highlighter-rouge\">Symbol.iterator</code> methods from the singly linked list. In a doubly linked list, however, you have the opportunity to create a reverse iterator that produces the data starting from the tail and working its way towards the head. Here is what a <code class=\"highlighter-rouge\">reverse()</code> generator method looks like:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">class</span> <span class=\"nx\">DoublyLinkedList</span> <span class=\"p\">{</span>\n\n    <span class=\"c1\">// other methods hidden for clarity</span>\n\n    <span class=\"o\">*</span><span class=\"nx\">reverse</span><span class=\"p\">(){</span>\n\n        <span class=\"c1\">// start by looking at the tail</span>\n        <span class=\"kd\">let</span> <span class=\"nx\">current</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">[</span><span class=\"nx\">tail</span><span class=\"p\">];</span>\n\n        <span class=\"c1\">// follow the previous links to the head</span>\n        <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"nx\">current</span> <span class=\"o\">!==</span> <span class=\"kc\">null</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"k\">yield</span> <span class=\"nx\">current</span><span class=\"p\">.</span><span class=\"nx\">data</span><span class=\"p\">;</span>\n            <span class=\"nx\">current</span> <span class=\"o\">=</span> <span class=\"nx\">current</span><span class=\"p\">.</span><span class=\"nx\">previous</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>The <code class=\"highlighter-rouge\">reverse()</code> generator method follows the same algorithm as the <code class=\"highlighter-rouge\">values()</code> generator method in the singly linked list with the exception that <code class=\"highlighter-rouge\">current</code> starts equal to <code class=\"highlighter-rouge\">this[tail]</code> and the <code class=\"highlighter-rouge\">current.previous</code> is followed until the there are no more nodes. Creating a reverse iterator is helpful for discovering bugs in the implementation as well as avoiding rearranging nodes just to access the data in a different order.</p>\n\n<h3 id=\"other-methods\">Other methods</h3>\n\n<p>Most other methods that don’t involve addition or removal of nodes follow the same algorithms as those in a singly linked list.</p>\n\n<h3 id=\"using-the-class\">Using the class</h3>\n\n<p>Once complete, you can use the linked list implementation like this:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">const</span> <span class=\"nx\">list</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">DoublyLinkedList</span><span class=\"p\">();</span>\n<span class=\"nx\">list</span><span class=\"p\">.</span><span class=\"nx\">add</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">red</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n<span class=\"nx\">list</span><span class=\"p\">.</span><span class=\"nx\">add</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">orange</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n<span class=\"nx\">list</span><span class=\"p\">.</span><span class=\"nx\">add</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">yellow</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n    \n<span class=\"c1\">// get the second item in the list</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">list</span><span class=\"p\">.</span><span class=\"kd\">get</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">));</span>       <span class=\"c1\">// \"orange\"</span>\n\n<span class=\"c1\">// print out all items in reverse</span>\n<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kd\">const</span> <span class=\"nx\">color</span> <span class=\"k\">of</span> <span class=\"nx\">list</span><span class=\"p\">.</span><span class=\"nx\">reverse</span><span class=\"p\">())</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">color</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// remove the second item in the list    </span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">list</span><span class=\"p\">.</span><span class=\"nx\">remove</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">));</span>    <span class=\"c1\">// \"orange\"</span>\n    \n<span class=\"c1\">// get the new first item in the list</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">list</span><span class=\"p\">.</span><span class=\"kd\">get</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">));</span>       <span class=\"c1\">// \"yellow\"</span>\n\n<span class=\"c1\">// convert to an array</span>\n<span class=\"kd\">const</span> <span class=\"nx\">array1</span> <span class=\"o\">=</span> <span class=\"p\">[...</span><span class=\"nx\">list</span><span class=\"p\">.</span><span class=\"nx\">values</span><span class=\"p\">()];</span>\n<span class=\"kd\">const</span> <span class=\"nx\">array2</span> <span class=\"o\">=</span> <span class=\"p\">[...</span><span class=\"nx\">list</span><span class=\"p\">];</span>\n<span class=\"kd\">const</span> <span class=\"nx\">array3</span> <span class=\"o\">=</span> <span class=\"p\">[...</span><span class=\"nx\">list</span><span class=\"p\">.</span><span class=\"nx\">reverse</span><span class=\"p\">()];</span>\n</code></pre></div></div>\n\n<p>The full source code is available on GitHub at my <a href="https://humanwhocodes.com/feeds/\&quot;https://github.com/humanwhocodes/computer-science-in-javascript\&quot;">Computer Science in JavaScript</a> project.</p>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<p>Doubly linked lists are similar to singly linked lists in that each node has a <code class=\"highlighter-rouge\">next</code> pointer to the next node in the list. Each node also has a <code class=\"highlighter-rouge\">previous</code> pointer to the previous node in the list, allowing you to move both backwards and forwards in the list easily. Doubly linked lists typically track both the first and last node in the list, and that makes adding a node into the list a O(1) operation instead of O(n) in a singly linked list.</p>\n\n<p>However, the complexity of other doubly linked list operations is the same as with a singly linked list because you always end up traversing most of the list. As such, doubly linked lists don’t offer any real advantage over the built-in JavaScript <code class=\"highlighter-rouge\">Array</code> class for storing a collection of unrelated data (though related data, such as sibling DOM nodes in the browser) might be useful to represent in some kind of linked list.</p>\n",
            "url": "https://humanwhocodes.com/blog/2019/02/computer-science-in-javascript-doubly-linked-lists/",
            
            
            
            "tags": ["Computer Science","Data Structures","JavaScript","Linked List","Programming"],
            
            "date_published": "2019-02-05T00:00:00+00:00",
            "date_modified": "2019-02-05T00:00:00+00:00",
            
                "author": "Nicholas C. Zakas"
            
        },
    
        {
            "id": "https://humanwhocodes.com/blog/2019/01/stop-using-default-exports-javascript-module/",
            "title": "Why I've stopped exporting defaults from my JavaScript modules",
            "summary": "Last week, I tweeted something that got quite a few surprising responses:",
            "content_text": "Last week, I tweeted something that got quite a few surprising responses:\n\n\n  In 2019, one of the things I’m going to do is stop exporting things as default from my CommonJS/ES6 modules.\n\n  Importing a default export has grown to feel like a guessing game where I have a 50/50 chance of being wrong each time. Is it a class? Is it a function?\n\n  — Nicholas C. Zakas (@slicknet) January 12, 2019\n\n\nI tweeted this after realizing that a lot of problems I had with JavaScript modules could be traced back to fights with default exports. It didn’t matter if I was using JavaScript modules (or ECMAScript modules, as many prefer to call them) or CommonJS, I was still stumbling over importing from modules with default exports. I got a variety of responses to the tweet, many of which questioned how I could come to this decision. This post is my attempt to clarify my thinking.\n\nA few clarifications\n\nAs is the case with all tweets, my tweet was meant as a snapshot into an opinion I had rather than a normative reference for my entire opinion. To clarify a few points people seem confused by on Twitter:\n\n\n  The use case of knowing whether an export is a function or a class was an example of the type of problems I’ve encountered. It is not the only problem I’ve found named exports solve for me.\n  The problems I’ve encountered don’t just happen with files in my own projects, they also happen with importing library and utility modules that I don’t own. That means naming conventions for filenames don’t solve all of the problems.\n  I’m not saying that everyone should abandon default exports. I’m saying that in modules I’m writing, I will choose not to use default exports. You may feel differently, and that’s fine.\n\n\nHopefully those clarifications setup enough context to avoid confusion throughout the rest of this post.\n\nDefault exports: A primer\n\nTo the best of my knowledge, default exports from modules were first popularized in CommonJS, where a module can export a default value like this:\n\nclass LinkedList {}\nmodule.exports = LinkedList;\n\n\nThis code exports the LinkedList class but does not specify the name to be used by consumers of the module. Assuming the filename is linked-list.js, you can import that default in another CommonJS module like this:\n\nconst LinkedList = require(\"./linked-list\");\n\n\nThe require() function is returning a value that I just happened to name LinkedList to match what is in linked-list.js, but I also could have chosen to name it foo or Mountain or any random identifier.\n\nThe popularity of default module exports in CommonJS meant that JavaScript modules were designed to support this pattern:\n\n\n  ES6 favors the single/default export style, and gives the sweetest syntax to importing the default.\n\n  — David Herman June 19, 2014\n\n\nSo in JavaScript modules, you can export a default like this:\n\nexport default class LinkedList {}\n\n\nAnd then you can import like this:\n\nimport LinkedList from \"./linked-list.js\";\n\n\nOnce again, LinkedList is this context is an arbitrary (if not well-reasoned) choice and could just as well be Dog or symphony.\n\nThe alternative: named exports\n\nBoth CommonJS and JavaScript modules support named exports in addition to default exports. Named exports allow for the name of a function, class, or variable to be transferred into the consuming file.\n\nIn CommonJS, you create a named export by attaching a name to the exports object, such as:\n\nexports.LinkedList = class LinkedList {};\n\n\nYou can then import in another file like this:\n\nconst LinkedList = require(\"./linked-list\").LinkedList;\n\n\nOnce again, the name I’ve used with const can be anything I want, but I’ve chosen to match it to the exported name LinkedList.\n\nIn JavaScript modules, a named export looks like this:\n\nexport class LinkedList {}\n\n\nAnd you can import like this:\n\nimport { LinkedList } from \"./linked-list.js\";\n\n\nIn this code, LinkedList cannot be a randomly assigned identifier and must match an named export called LinkedList. That’s the only significant difference from CommonJS for the goals of this post.\n\nSo the capabilities of both module types support both default and named exports.\n\nPersonal preferences\n\nBefore going further, it’s helpful for you to know some of my own personal preferences when it comes to writing code. These are general principles I apply to all code that I write, regardless of the programming language I use:\n\n\n  Explicit over implicit. I don’t like having code with secrets. What something does, what something should be called, etc., should always be made explicit whenever possible.\n  Names should be consistent throughout all files. If something is an Apple in one file, I shouldn’t call it Orange in another file. An Apple should always be an Apple.\n  Throw errors early and often. If it’s possible for something to be missing then it’s best to check as early as possible and, in the best case, throw an error that alerts me to the problem. I don’t want to wait until the code has finished executing to discover that it didn’t work correctly and then hunt for the problem.\n  Fewer decisions mean faster development. A lot of the preferences I have are for eliminating decisions during coding. Every decision you make slows you down, which is why things like coding conventions lead to faster development. I want to decide things up front and then just go.\n  Side trips slow down development. Whenever you have to stop and look something up in the middle of coding, I call that a side trip. Side trips are sometimes necessary but there are a lot of unnecessary side trips that can slow things down. I try to write code that eliminates the need for side trips.\n  Cognitive overhead slows down development. Put simply: the more detail you need to remember to be productive when writing code, the slower your development will be.\n\n\n\n  The focus on speed of development is a practical one for me. As I’ve struggled with my health for years, the amount of energy I’ve had to code continued to decrease. Anything I could do to reduce the amount of time spent coding while still accomplishing my task was key.\n\n\nThe problems I’ve run into\n\nWith all of this in mind, here are the top problems I’ve run into using default exports and why I believe that named exports are a better choice in most situations.\n\nWhat is that thing?\n\nAs I mentioned in my original tweet, I find it difficult to figure out what I’m importing when a module only has a default import. If you’re using a module or file you’re unfamiliar with, it can be difficult to figure out what is returned, for example:\n\nconst list = require(\"./list\");\n\n\nIn this context, what would you expect list to be? It’s unlikely to be a primitive value, but it could logically be a function, class, or other type of object. How will I know for sure? I need a side trip. In this case, a side trip might be any of:\n\n\n  If I own list.js, then I may open the file and look for the export.\n  If I don’t own list.js, then I may open up some documentation.\n\n\nIn either case, this now becomes an extra bit of information you need in your brain to avoid a second side trip penalty when you need to import from list.js again. If you are importing a lot of defaults from modules then either your cognitive overhead is increasing or the number of side trips is increasing. Both are suboptimal and can be frustrating.\n\nSome will say that IDEs are the answer to this problem, that the IDEs should be smart enough to figure out what is being imported and tell you. While I’m all for smarter IDEs to help developers, I believe requiring IDEs to effectively use a language feature is problematic.\n\nName matching problems\n\nNamed exports require consuming modules to at least specify the name of the thing they are importing from a module. The benefit is that I can easily search for everywhere that LinkedList is used in a code base and know that it all refers to the same LinkedList. As default exports are not prescriptive of the names used to import them, that means naming imports becomes more cognitive overhead for each developer. You need to determine the correct naming convention, and as extra overhead, you need to make sure every developer working in the application will use the same name for the same thing. (You can, of course, allow each developer to use different names for the same thing, but that introduces more cognitive overhead for the team.)\n\nImporting a named export means at least referencing the canonical name of a thing everywhere that it’s used. Even if you choose to rename an import, the decision is made explicit, and cannot be done without first referencing the canonical name in some way. In CommonJS:\n\nconst MyList = require(\"./list\").LinkedList;\n\n\nIn JavaScript modules:\n\nimport { LinkedList as MyList } from \"./list.js\";\n\n\nIn both module formats, you’ve made an explicit statement that LinkedList is now going to be referred to as MyList.\n\nWhen naming is consistent across a codebase, you’re able to easily do things like:\n\n\n  Search the codebase to find usage information.\n  Refactor the name of something across the entire codebase.\n\n\nIs it possible to do this when using default exports and ad-hoc naming of things? My guess is yes, but I’d also guess that it would be a lot more complicated and error-prone.\n\nImporting the wrong thing\n\nNamed exports in JavaScript modules have a particular advantage over default exports in that an error is thrown when attempting to import something that doesn’t exist in the module. Consider this code:\n\nimport { LinkedList } from \"./list.js\";\n\n\nIf LinkedList doesn’t exist in list.js, then an error is thrown. Further, tools such as IDEs and ESLint1 are easily able to detect a missing reference before the code is executed.\n\nWorse tooling support\n\nSpeaking of IDEs, WebStorm is able to help write import statements for you.2 When you have finished typing an identifier that isn’t defined in the file, WebStorm will search the modules in your project to determine if the identifier is a named export in another file. At that point, it can do any of the following:\n\n\n  Underline the identifier that is missing its definition and show you the import statement that would fix it.\n  Automatically add the correct import statement (if you have enable auto import)\ncan now automatically add an import statement based on an identifier that you type. In fact, WebStorm is able to help you a great deal when using named imports:\n\n\nThere is a plugin for Visual Studio Code3 that provides similar functionality. This type of functionality isn’t possible when using default exports because there is no canonical name for things you want to import.\n\nConclusion\n\nI’ve had several productivity problems importing default exports in my projects. While none of the problems are necessarily impossible to overcome, using named imports and exports seems to better fit my preferences when coding. Making things explicit and leaning heavily on tooling makes me a productive coder, and insofar as named exports help me do that, I will likely favor them for the foreseeable future. Of course, I have no control over how third-party modules I use export their functionality, but I definitely have a choice over how my own modules export things and will choose named exports.\n\nAs earlier, I remind you that this is my opinion and you may not find my reasoning to be persuasive. This post was not meant to persuade anyone to stop using default exports, but rather, to better explain to those that inquired why I, personally, will stop exporting defaults from the modules I write.\n\nReferences\n\n\n  \n    \n      esling-plugin-import import/named rule &#8617;\n    \n    \n      WebStorm: Auto Import in JavaScript &#8617;\n    \n    \n      Visual Studio Extension: Auto Import &#8617;\n    \n  \n\n",
            "content_html": "<p>Last week, I tweeted something that got quite a few surprising responses:</p>\n\n<blockquote class=\"twitter-tweet tw-align-center\">\n  <p>In 2019, one of the things I’m going to do is stop exporting things as default from my CommonJS/ES6 modules.</p>\n\n  <p>Importing a default export has grown to feel like a guessing game where I have a 50/50 chance of being wrong each time. Is it a class? Is it a function?</p>\n\n  <p>— Nicholas C. Zakas (@slicknet) <a href="https://humanwhocodes.com/feeds/\&quot;https://twitter.com/slicknet/status/1084101377297506304?ref_src=twsrc%5Etfw\&quot;">January 12, 2019</a></p>\n</blockquote>\n\n<p>I tweeted this after realizing that a lot of problems I had with JavaScript modules could be traced back to fights with default exports. It didn’t matter if I was using JavaScript modules (or ECMAScript modules, as many prefer to call them) or CommonJS, I was still stumbling over importing from modules with default exports. I got a variety of responses to the tweet, many of which questioned how I could come to this decision. This post is my attempt to clarify my thinking.</p>\n\n<h2 id=\"a-few-clarifications\">A few clarifications</h2>\n\n<p>As is the case with all tweets, my tweet was meant as a snapshot into an opinion I had rather than a normative reference for my entire opinion. To clarify a few points people seem confused by on Twitter:</p>\n\n<ul>\n  <li>The use case of knowing whether an export is a function or a class was an example of the type of problems I’ve encountered. It is not the <em>only</em> problem I’ve found named exports solve for me.</li>\n  <li>The problems I’ve encountered don’t just happen with files in my own projects, they also happen with importing library and utility modules that I don’t own. That means naming conventions for filenames don’t solve all of the problems.</li>\n  <li>I’m not saying that everyone should abandon default exports. I’m saying that in modules I’m writing, I will choose not to use default exports. You may feel differently, and that’s fine.</li>\n</ul>\n\n<p>Hopefully those clarifications setup enough context to avoid confusion throughout the rest of this post.</p>\n\n<h2 id=\"default-exports-a-primer\">Default exports: A primer</h2>\n\n<p>To the best of my knowledge, default exports from modules were first popularized in CommonJS, where a module can export a default value like this:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">class</span> <span class=\"nx\">LinkedList</span> <span class=\"p\">{}</span>\n<span class=\"nx\">module</span><span class=\"p\">.</span><span class=\"nx\">exports</span> <span class=\"o\">=</span> <span class=\"nx\">LinkedList</span><span class=\"p\">;</span>\n</code></pre></div></div>\n\n<p>This code exports the <code class=\"highlighter-rouge\">LinkedList</code> class but does not specify the name to be used by consumers of the module. Assuming the filename is <code class=\"highlighter-rouge\">linked-list.js</code>, you can import that default in another CommonJS module like this:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">const</span> <span class=\"nx\">LinkedList</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">./linked-list</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n</code></pre></div></div>\n\n<p>The <code class=\"highlighter-rouge\">require()</code> function is returning a value that I just happened to name <code class=\"highlighter-rouge\">LinkedList</code> to match what is in <code class=\"highlighter-rouge\">linked-list.js</code>, but I also could have chosen to name it <code class=\"highlighter-rouge\">foo</code> or <code class=\"highlighter-rouge\">Mountain</code> or any random identifier.</p>\n\n<p>The popularity of default module exports in CommonJS meant that JavaScript modules were designed to support this pattern:</p>\n\n<blockquote>\n  <p>ES6 favors the single/default export style, and gives the sweetest syntax to importing the default.</p>\n\n  <p>— David Herman <a href="https://humanwhocodes.com/feeds/\&quot;https://mail.mozilla.org/pipermail/es-discuss/2014-June/037905.html\&quot;">June 19, 2014</a></p>\n</blockquote>\n\n<p>So in JavaScript modules, you can export a default like this:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">export</span> <span class=\"k\">default</span> <span class=\"kd\">class</span> <span class=\"nx\">LinkedList</span> <span class=\"p\">{}</span>\n</code></pre></div></div>\n\n<p>And then you can import like this:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">import</span> <span class=\"nx\">LinkedList</span> <span class=\"k\">from</span> <span class=\"dl\">\"</span><span class=\"s2\">./linked-list.js</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n</code></pre></div></div>\n\n<p>Once again, <code class=\"highlighter-rouge\">LinkedList</code> is this context is an arbitrary (if not well-reasoned) choice and could just as well be <code class=\"highlighter-rouge\">Dog</code> or <code class=\"highlighter-rouge\">symphony</code>.</p>\n\n<h2 id=\"the-alternative-named-exports\">The alternative: named exports</h2>\n\n<p>Both CommonJS and JavaScript modules support named exports in addition to default exports. Named exports allow for the name of a function, class, or variable to be transferred into the consuming file.</p>\n\n<p>In CommonJS, you create a named export by attaching a name to the <code class=\"highlighter-rouge\">exports</code> object, such as:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nx\">exports</span><span class=\"p\">.</span><span class=\"nx\">LinkedList</span> <span class=\"o\">=</span> <span class=\"kd\">class</span> <span class=\"nx\">LinkedList</span> <span class=\"p\">{};</span>\n</code></pre></div></div>\n\n<p>You can then import in another file like this:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">const</span> <span class=\"nx\">LinkedList</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">./linked-list</span><span class=\"dl\">\"</span><span class=\"p\">).</span><span class=\"nx\">LinkedList</span><span class=\"p\">;</span>\n</code></pre></div></div>\n\n<p>Once again, the name I’ve used with <code class=\"highlighter-rouge\">const</code> can be anything I want, but I’ve chosen to match it to the exported name <code class=\"highlighter-rouge\">LinkedList</code>.</p>\n\n<p>In JavaScript modules, a named export looks like this:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">export</span> <span class=\"kd\">class</span> <span class=\"nx\">LinkedList</span> <span class=\"p\">{}</span>\n</code></pre></div></div>\n\n<p>And you can import like this:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">LinkedList</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">\"</span><span class=\"s2\">./linked-list.js</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n</code></pre></div></div>\n\n<p>In this code, <code class=\"highlighter-rouge\">LinkedList</code> cannot be a randomly assigned identifier and must match an named export called <code class=\"highlighter-rouge\">LinkedList</code>. That’s the only significant difference from CommonJS for the goals of this post.</p>\n\n<p>So the capabilities of both module types support both default and named exports.</p>\n\n<h2 id=\"personal-preferences\">Personal preferences</h2>\n\n<p>Before going further, it’s helpful for you to know some of my own personal preferences when it comes to writing code. These are general principles I apply to all code that I write, regardless of the programming language I use:</p>\n\n<ol>\n  <li><strong>Explicit over implicit.</strong> I don’t like having code with secrets. What something does, what something should be called, etc., should always be made explicit whenever possible.</li>\n  <li><strong>Names should be consistent throughout all files.</strong> If something is an <code class=\"highlighter-rouge\">Apple</code> in one file, I shouldn’t call it <code class=\"highlighter-rouge\">Orange</code> in another file. An <code class=\"highlighter-rouge\">Apple</code> should always be an <code class=\"highlighter-rouge\">Apple</code>.</li>\n  <li><strong>Throw errors early and often.</strong> If it’s possible for something to be missing then it’s best to check as early as possible and, in the best case, throw an error that alerts me to the problem. I don’t want to wait until the code has finished executing to discover that it didn’t work correctly and then hunt for the problem.</li>\n  <li><strong>Fewer decisions mean faster development.</strong> A lot of the preferences I have are for eliminating decisions during coding. Every decision you make slows you down, which is why things like coding conventions lead to faster development. I want to decide things up front and then just go.</li>\n  <li><strong>Side trips slow down development.</strong> Whenever you have to stop and look something up in the middle of coding, I call that a side trip. Side trips are sometimes necessary but there are a lot of unnecessary side trips that can slow things down. I try to write code that eliminates the need for side trips.</li>\n  <li><strong>Cognitive overhead slows down development.</strong> Put simply: the more detail you need to remember to be productive when writing code, the slower your development will be.</li>\n</ol>\n\n<aside class=\"note\">\n  <p>The focus on speed of development is a practical one for me. As I’ve struggled with my health for years, the amount of energy I’ve had to code continued to decrease. Anything I could do to reduce the amount of time spent coding while still accomplishing my task was key.</p>\n</aside>\n\n<h2 id=\"the-problems-ive-run-into\">The problems I’ve run into</h2>\n\n<p>With all of this in mind, here are the top problems I’ve run into using default exports and why I believe that named exports are a better choice in most situations.</p>\n\n<h3 id=\"what-is-that-thing\">What is that thing?</h3>\n\n<p>As I mentioned in my original tweet, I find it difficult to figure out what I’m importing when a module only has a default import. If you’re using a module or file you’re unfamiliar with, it can be difficult to figure out what is returned, for example:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">const</span> <span class=\"nx\">list</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">./list</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n</code></pre></div></div>\n\n<p>In this context, what would you expect <code class=\"highlighter-rouge\">list</code> to be? It’s unlikely to be a primitive value, but it could logically be a function, class, or other type of object. How will I know for sure? I need a side trip. In this case, a side trip might be any of:</p>\n\n<ul>\n  <li>If I own <code class=\"highlighter-rouge\">list.js</code>, then I may open the file and look for the export.</li>\n  <li>If I don’t own <code class=\"highlighter-rouge\">list.js</code>, then I may open up some documentation.</li>\n</ul>\n\n<p>In either case, this now becomes an extra bit of information you need in your brain to avoid a second side trip penalty when you need to import from <code class=\"highlighter-rouge\">list.js</code> again. If you are importing a lot of defaults from modules then either your cognitive overhead is increasing or the number of side trips is increasing. Both are suboptimal and can be frustrating.</p>\n\n<p>Some will say that IDEs are the answer to this problem, that the IDEs should be smart enough to figure out what is being imported and tell you. While I’m all for smarter IDEs to help developers, I believe requiring IDEs to effectively use a language feature is problematic.</p>\n\n<h3 id=\"name-matching-problems\">Name matching problems</h3>\n\n<p>Named exports require consuming modules to at least specify the name of the thing they are importing from a module. The benefit is that I can easily search for everywhere that <code class=\"highlighter-rouge\">LinkedList</code> is used in a code base and know that it all refers to the same <code class=\"highlighter-rouge\">LinkedList</code>. As default exports are not prescriptive of the names used to import them, that means naming imports becomes more cognitive overhead for each developer. You need to determine the correct naming convention, and as extra overhead, you need to make sure every developer working in the application will use the same name for the same thing. (You can, of course, allow each developer to use different names for the same thing, but that introduces more cognitive overhead for the team.)</p>\n\n<p>Importing a named export means at least referencing the canonical name of a thing everywhere that it’s used. Even if you choose to rename an import, the decision is made explicit, and cannot be done without first referencing the canonical name in some way. In CommonJS:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">const</span> <span class=\"nx\">MyList</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">./list</span><span class=\"dl\">\"</span><span class=\"p\">).</span><span class=\"nx\">LinkedList</span><span class=\"p\">;</span>\n</code></pre></div></div>\n\n<p>In JavaScript modules:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">LinkedList</span> <span class=\"k\">as</span> <span class=\"nx\">MyList</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">\"</span><span class=\"s2\">./list.js</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n</code></pre></div></div>\n\n<p>In both module formats, you’ve made an explicit statement that <code class=\"highlighter-rouge\">LinkedList</code> is now going to be referred to as <code class=\"highlighter-rouge\">MyList</code>.</p>\n\n<p>When naming is consistent across a codebase, you’re able to easily do things like:</p>\n\n<ol>\n  <li>Search the codebase to find usage information.</li>\n  <li>Refactor the name of something across the entire codebase.</li>\n</ol>\n\n<p>Is it possible to do this when using default exports and ad-hoc naming of things? My guess is yes, but I’d also guess that it would be a lot more complicated and error-prone.</p>\n\n<h3 id=\"importing-the-wrong-thing\">Importing the wrong thing</h3>\n\n<p>Named exports in JavaScript modules have a particular advantage over default exports in that an error is thrown when attempting to import something that doesn’t exist in the module. Consider this code:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">LinkedList</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">\"</span><span class=\"s2\">./list.js</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n</code></pre></div></div>\n\n<p>If <code class=\"highlighter-rouge\">LinkedList</code> doesn’t exist in <code class=\"highlighter-rouge\">list.js</code>, then an error is thrown. Further, tools such as IDEs and ESLint<sup id=\"fnref:1\"><a href="https://humanwhocodes.com/feeds/\&quot;#fn:1\"" class=\"footnote\">1</a></sup> are easily able to detect a missing reference before the code is executed.</p>\n\n<h2 id=\"worse-tooling-support\">Worse tooling support</h2>\n\n<p>Speaking of IDEs, WebStorm is able to help write <code class=\"highlighter-rouge\">import</code> statements for you.<sup id=\"fnref:2\"><a href="https://humanwhocodes.com/feeds/\&quot;#fn:2\"" class=\"footnote\">2</a></sup> When you have finished typing an identifier that isn’t defined in the file, WebStorm will search the modules in your project to determine if the identifier is a named export in another file. At that point, it can do any of the following:</p>\n\n<ol>\n  <li>Underline the identifier that is missing its definition and show you the <code class=\"highlighter-rouge\">import</code> statement that would fix it.</li>\n  <li>Automatically add the correct <code class=\"highlighter-rouge\">import</code> statement (if you have enable auto import)\ncan now automatically add an <code class=\"highlighter-rouge\">import</code> statement based on an identifier that you type. In fact, WebStorm is able to help you a great deal when using named imports:</li>\n</ol>\n\n<p>There is a plugin for Visual Studio Code<sup id=\"fnref:3\"><a href="https://humanwhocodes.com/feeds/\&quot;#fn:3\"" class=\"footnote\">3</a></sup> that provides similar functionality. This type of functionality isn’t possible when using default exports because there is no canonical name for things you want to import.</p>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<p>I’ve had several productivity problems importing default exports in my projects. While none of the problems are necessarily impossible to overcome, using named imports and exports seems to better fit my preferences when coding. Making things explicit and leaning heavily on tooling makes me a productive coder, and insofar as named exports help me do that, I will likely favor them for the foreseeable future. Of course, I have no control over how third-party modules I use export their functionality, but I definitely have a choice over how my own modules export things and will choose named exports.</p>\n\n<p>As earlier, I remind you that this is my opinion and you may not find my reasoning to be persuasive. This post was not meant to persuade anyone to stop using default exports, but rather, to better explain to those that inquired why I, personally, will stop exporting defaults from the modules I write.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n  <ol>\n    <li id=\"fn:1\">\n      <p><a href="https://humanwhocodes.com/feeds/\&quot;https://github.com/benmosher/eslint-plugin-import/blob/master/docs/rules/named.md\&quot;">esling-plugin-import <code class=\"highlighter-rouge\">import/named</code> rule</a> <a href="https://humanwhocodes.com/feeds/\&quot;#fnref:1\"" class=\"reversefootnote\">&#8617;</a></p>\n    </li>\n    <li id=\"fn:2\">\n      <p><a href="https://humanwhocodes.com/feeds/\&quot;https://www.jetbrains.com/help/webstorm/javascript-specific-guidelines.html#ws_js_auto_import\"">WebStorm: Auto Import in JavaScript</a> <a href="https://humanwhocodes.com/feeds/\&quot;#fnref:2\"" class=\"reversefootnote\">&#8617;</a></p>\n    </li>\n    <li id=\"fn:3\">\n      <p><a href="https://humanwhocodes.com/feeds/\&quot;https://marketplace.visualstudio.com/items?itemName=NuclleaR.vscode-extension-auto-import\&quot;">Visual Studio Extension: Auto Import</a> <a href="https://humanwhocodes.com/feeds/\&quot;#fnref:3\"" class=\"reversefootnote\">&#8617;</a></p>\n    </li>\n  </ol>\n</div>\n",
            "url": "https://humanwhocodes.com/blog/2019/01/stop-using-default-exports-javascript-module/",
            
            
            
            "tags": ["JavaScript","Modules","CommonJS"],
            
            "date_published": "2019-01-15T00:00:00+00:00",
            "date_modified": "2019-01-15T00:00:00+00:00",
            
                "author": "Nicholas C. Zakas"
            
        },
    
        {
            "id": "https://humanwhocodes.com/blog/2019/01/computer-science-in-javascript-linked-list/",
            "title": "Computer science in JavaScript: Linked list",
            "summary": "Back in 2009, I challenged myself to write one blog post per week for the entire year. I had read that the best way to gain more traffic to a blog was to post consistently. One post per week seemed like a realistic goal due to all the article ideas I had but it turned out I was well short of 52 ideas. I dug through some half-written chapters what would eventually become Professional JavaScript and found a lot of material on classic computer science topics, including data structures and algorithms. I took that material and turned it into several posts in 2009 and (and a few in 2012), and got a lot of positive feedback on them.",
            "content_text": "Back in 2009, I challenged myself to write one blog post per week for the entire year. I had read that the best way to gain more traffic to a blog was to post consistently. One post per week seemed like a realistic goal due to all the article ideas I had but it turned out I was well short of 52 ideas. I dug through some half-written chapters what would eventually become Professional JavaScript and found a lot of material on classic computer science topics, including data structures and algorithms. I took that material and turned it into several posts in 2009 and (and a few in 2012), and got a lot of positive feedback on them.\n\nNow, at the ten year anniversary of those posts, I’ve decided to update, republish, and expand on them using JavaScript in 2019. It’s been interesting to see what has changed and what hasn’t, and I hope you enjoy them.\n\nWhat is a linked list?\n\nA linked list is a data structure that stores multiple values in a linear fashion. Each value in a linked list is contained in its own node, an object that contains the data along with a link to the next node in the list. The link is a pointer to another node object or null if there is no next node. If each node has just one pointer to another node (most frequently called next) then the list is considered a singly linked list (or just linked list) whereas if each node has two links (usually previous and next) then it is considered a doubly linked list. In this post, I am focusing on singly linked lists.\n\nWhy use a linked list?\n\nThe primary benefit of linked lists is that they can contain an arbitrary number of values while using only the amount of memory necessary for those values. Preserving memory was very important on older computers where memory was scarce. At that time, a built-in array in C required you to specify how many items the array could contain and the program would reserve that amount of memory. Reserving that memory meant it could not be used for the rest of the program or any other programs running at the same time, even if the memory was never filled. One memory-scarce machines, you could easily run out of available memory using arrays. Linked lists were created to work around this problem.\n\nThough originally intended for better memory management, linked lists also became popular when developers didn’t know how many items an array would ultimately contain. It was much easier to use a linked list and add values as necessary than it was to accurately guess the maximum number of values an array might contain. As such, linked lists are often used as the foundation for built-in data structures in various programming languages.\n\nThe built-in JavaScript Array type is not implemented as a linked list, though its size is dynamic and is always the best option to start with. You might go your entire career without needing to use a linked list in JavaScript but linked lists are still a good way to learn about creating your own data structures.\n\nThe design of a linked list\n\nThe most important part of a linked list is its node structure. Each node must contain some data and a pointer to the next node in the list. Here is a simple representation in JavaScript:\n\nclass LinkedListNode {\n    constructor(data) {\n        this.data = data;\n        this.next = null;\n    }\n}\n\n\nIn the LinkedListNode class, the data property contains the value the linked list item should store and the next property is a pointer to the next item in the list. The next property starts out as null because you don’t yet know the next node. You can then create a linked list using the LinkedListNode class like this:\n\n// create the first node\nconst head = new LinkedListNode(12);\n\n// add a second node\nhead.next = new LinkedListNode(99);\n\n// add a third node\nhead.next.next = new LinkedListNode(37);\n\n\nThe first node in a linked list is typically called the head, so the head identifier in this example represents the first node. The second node is created an assigned to head.next to create a list with two items. A third node is added by assigning it to head.next.next, which is the next pointer of the second node in the list. The next pointer of the third node in the list remains null. The following image shows the resulting data structure.\n\n\n\nThe structure of a linked list allows you to traverse all of the data by following the next pointer on each node. Here is a simple example of how to traverse a linked list and print each value out to the console:\n\nlet current = head;\n\nwhile (current !== null) {\n    console.log(current.data);\n    current = current.next;\n}\n\n\nThis code uses the variable current as the pointer that moves through the linked list. The current variable is initialized to the head of the list and the while loop continues until current is null. Inside of the loop, the value stored on the current node is printed and then the next pointer is followed to the next node.\n\nMost linked list operations use this traversal algorithm or something similar, so understanding this algorithm is important to understanding linked lists in general.\n\nThe LinkedList class\n\nIf you were writing a linked list in C, you might stop at this point and consider your task complete (although you would use a struct instead of a class to represent each node). However, in object-oriented languages like JavaScript, it’s more customary to create a class to encapsulate this functionality. Here is a simple example:\n\nconst head = Symbol(\"head\");\n\nclass LinkedList {\n    constructor() {\n        this[head] = null;\n    }\n}\n\n\nThe LinkedList class represents a linked list and will contain methods for interacting with the data it contains. The only property is a symbol property called head that will contain a pointer to the first node in the list. A symbol property is used instead of a string property to make it clear that this property is not intended to be modified outside of the class.\n\nAdding new data to the list\n\nAdding an item into a linked list requires walking the structure to find the correct location, creating a new node, and inserting it in place. The one special case is when the list is empty, in which case you simply create a new node and assign it to head:\n\nconst head = Symbol(\"head\");\n\nclass LinkedList {\n    constructor() {\n        this[head] = null;\n    }\n\n    add(data) {\n\n        // create a new node\n        const newNode = new LinkedListNode(data);\n                \n        //special case: no items in the list yet\n        if (this[head] === null) {\n\n            // just set the head to the new node\n            this[head] = newNode;\n        } else {\n\n            // start out by looking at the first node\n            let current = this[head];\n\n            // follow `next` links until you reach the end\n            while (current.next !== null) {\n                current = current.next;\n            }\n           \n            // assign the node into the `next` pointer\n            current.next = newNode;            \n        }\n    }\n}\n\n\nThe add() method accepts a single argument, any piece of data, and adds it to the end of the list. If the list is empty (this[head] is null) then you assign this[head] equal to the new node. If the list is not empty, then you need to traverse the already-existing list to find the last node. The traversal happens in a while loop that start at this[head] and follows the next links of each node until the last node is found. The last node has a next property equal to null, so it’s important to stop traversal at that point rather than when current is null (as in the previous section). You can then assign the new node to that next property to add the data into the list.\n\n\n  Traditional algorithms use two pointers, a current that points to the item being inspected and a previous that points to the node before current. When current is null, that means previous is pointing to the last item in the list. I don’t find that approach very logical when you can just check the value of current.next and exit the loop at that point.\n\n\nThe complexity of the add() method is O(n) because you must traverse the entire list to find the location to insert a new node. You can reduce this complexity to O(1) by tracking the end of the list (usually called the tail) in addition to the head, allowing you to immediately insert a new node in the correct position.\n\nRetrieving data from the list\n\nLinked lists don’t allow random access to its contents, but you can still retrieve data in any given position by traversing the list and returning the data. To do so, you’ll add a get() method that accepts a zero-based index of the data to retrieve, like this:\n\nclass LinkedList {\n\n    // other methods hidden for clarity\n\n    get(index) {\n    \n        // ensure `index` is a positive value\n        if (index &gt; -1) {\n\n            // the pointer to use for traversal\n            let current = this[head];\n\n            // used to keep track of where in the list you are\n            let i = 0;\n\n            // traverse the list until you reach either the end or the index\n            while ((current !== null) &amp;&amp; (i &lt; index)) {\n                current = current.next;\n                i++;          \n            }\n        \n            // return the data if `current` isn't null\n            return current !== null ? current.data : undefined;\n        } else {\n            return undefined;\n        }\n    }\n\n}\n\n\nThe get() method first checks to make sure that index is a positive value, otherwise it returns undefined. The i variable is used to keep track of how deep the traversal has gone into the list. The loop itself is the same basic traversal you saw earlier with the added condition that the loop should exit when i is equal to index. That means there are two conditions under which the loop can exit:\n\n\n  current is null, which means the list is shorter than index.\n  i is equal to index, which means current is the node in the index position.\n\n\nIf current is null then undefined is returned and otherwise current.data is returned. This check ensures that get() will never throw an error for an index that isn’t found in the list (although you could decide to throw an error instead of returning undefined).\n\nThe complexity of the get() method ranges from O(1) when removing the first node (no traversal is needed) to O(n) when removing the last node (traversing the entire list is required). It’s difficult to reduce complexity because a search is always required to identify the correct value to return.\n\nRemoving data from a linked list\n\nRemoving data from a linked list is a little bit tricky because you need to ensure that all next pointers remain valid after a node is removed. For instance, if you want to remove the second node in a three-node list, you’ll need to ensure that the first node’s next property now points to the third node instead of the second. Skipping over the second node in this way effectively removes it from the list.\n\n\n\nThe remove operation is actually two operations:\n\n\n  Find the specified index (the same algorithm as in get())\n  Remove the node at that index\n\n\nFinding the specified index is the same as in the get() method, but in this loop you also need to track the node that comes before current because you’ll need to modify the next pointer of the previous node.\n\nThere are also four special cases to consider:\n\n\n  The list is empty (no traversal is possible)\n  The index is less than zero\n  The index is greater than the number of items in the list\n  The index is zero (removing the head)\n\n\nIn the first three cases, the removal operation cannot be completed, and so it makes sense to throw an error; the fourth special case requires rewriting the this[head] property. Here is what the implementation of a remove() method looks like:\n\nclass LinkedList {\n\n    // other methods hidden for clarity\n\n    remove(index) {\n    \n        // special cases: empty list or invalid `index`\n        if ((this[head] === null) || (index &lt; 0)) {\n            throw new RangeError(`Index ${index} does not exist in the list.`);\n        }\n \n        // special case: removing the first node\n        if (index === 0) {\n\n            // temporary store the data from the node\n            const data = this[head].data;\n\n            // just replace the head with the next node in the list\n            this[head] = this[head].next;\n\n            // return the data at the previous head of the list\n            return data;\n        }\n\n        // pointer use to traverse the list\n        let current = this[head];\n\n        // keeps track of the node before current in the loop\n        let previous = null;\n\n        // used to track how deep into the list you are\n        let i = 0;\n\n        // same loops as in `get()`\n        while ((current !== null) &amp;&amp; (i &lt; index)) {\n\n            // save the value of current\n            previous = current;\n\n            // traverse to the next node\n            current = current.next;\n\n            // increment the count\n            i++;\n        }\n\n        // if node was found, remove it\n        if (current !== null) {\n\n            // skip over the node to remove\n            previous.next = current.next;\n\n            // return the value that was just removed from the list\n            return current.data;\n        }\n\n        // if node wasn't found, throw an error\n        throw new RangeError(`Index ${index} does not exist in the list.`);\n    }\n\n}\n\n\nThe remove() method first checks for two special cases, an empty list (this[head] is null) and an index that is less than zero. An error is thrown in both cases.\n\nThe next special case is when index is 0, meaning that you are removing the list head. The new list head should be the second node in the list, so you can set this[head] equal to this[head].next. It doesn’t matter if there’s only one node in the list because this[head] would end up equal to null, which means the list is empty after the removal. The only catch is to store the data from the original head in a local variable, data, so that it can be returned.\n\nWith three of the four special cases taken care of, you can now proceed with a traversal similar to that found in the get() method. As mentioned earlier, this loop is slightly different in that the previous variable is used to keep track of the node that appears just before current, as that information is necessary to propely remove a node. Similar to get(), when the loop exits current may be null, indicating that the index wasn’t found. If that happens then an error is thrown, otherwise, previous.next is set to current.next, effectively removing current from the list. The data stored on current is returned as the last step.\n\nThe complexity of the remove() method is the same as get() and ranges from O(1) when removing the first node to O(n) when removing the last node.\n\nMaking the list iterable\n\nIn order to be used with the JavaScript for-of loop and array destructuring, collections of data must be iterables. The built-in JavaScript collections such as Array and Set are iterable by default, and you can make your own classes iterable by specifying a Symbol.iterator generator method on the class. I prefer to first implement a values() generator method (to match the method found on built-in collection classes) and then have Symbol.iterator call values() directly.\n\nThe values() method need only do a basic traversal of the list and yield the data that each node contains:\n\nclass LinkedList {\n\n    // other methods hidden for clarity\n\n    *values(){\n        \n        let current = this[head];\n\n        while (current !== null) {\n            yield current.data;\n            current = current.next;\n        }\n    }\n\n    [Symbol.iterator]() {\n        return this.values();\n    }    \n\n}\n\n\nThe values() method is marked with an asterisk (*) to indicate that it’s a generator method. The method traverses the list, using yield to return each piece of data it encounters. (Note that the Symbol.iterator method isn’t marked as a generator because it is returning an iterator from the values() generator method.)\n\nUsing the class\n\nOnce complete, you can use the linked list implementation like this:\n\nconst list = new LinkedList();\nlist.add(\"red\");\nlist.add(\"orange\");\nlist.add(\"yellow\");\n    \n// get the second item in the list\nconsole.log(list.get(1));       // \"orange\"\n\n// print out all items\nfor (const color of list) {\n    console.log(color);\n}\n\n// remove the second item in the list    \nconsole.log(list.remove(1));    // \"orange\"\n    \n// get the new first item in the list\nconsole.log(list.get(1));       // \"yellow\"\n\n// convert to an array\nconst array1 = [...list.values()];\nconst array2 = [...list];\n\n\nThis basic implementation of a linked list can be rounded out with a size property to count the number of nodes in the list, and other familiar methods such as indexOf(). The full source code is available on GitHub at my Computer Science in JavaScript project.\n\nConclusion\n\nLinked lists aren’t something you’re likely to use every day, but they are a foundational data structure in computer science. The concept of using nodes that point to one another is used in many other data structures are built into many higher-level programming languages. A good understanding of how linked lists work is important for a good overall understanding of how to create and use other data structures.\n\nFor JavaScript programming, you are almost always better off using the built-in collection classes such as Array rather than creating your own. The built-in collection classes have already been optimized for production use and are well-supported across execution environments.\n\n",
            "content_html": "<p>Back in 2009, I challenged myself to write one blog post per week for the entire year. I had read that the best way to gain more traffic to a blog was to post consistently. One post per week seemed like a realistic goal due to all the article ideas I had but it turned out I was well short of 52 ideas. I dug through some half-written chapters what would eventually become <cite>Professional JavaScript</cite> and found a lot of material on classic computer science topics, including data structures and algorithms. I took that material and turned it into <a href="https://humanwhocodes.com/feeds/\&quot;https://humanwhocodes.com/blog/tag/computer-science/\&quot;">several posts</a> in 2009 and (and a few in 2012), and got a lot of positive feedback on them.</p>\n\n<p>Now, at the ten year anniversary of those posts, I’ve decided to update, republish, and expand on them using JavaScript in 2019. It’s been interesting to see what has changed and what hasn’t, and I hope you enjoy them.</p>\n\n<h2 id=\"what-is-a-linked-list\">What is a linked list?</h2>\n\n<p>A <em>linked list</em> is a data structure that stores multiple values in a linear fashion. Each value in a linked list is contained in its own <em>node</em>, an object that contains the data along with a link to the next node in the list. The link is a pointer to another node object or <code class=\"highlighter-rouge\">null</code> if there is no next node. If each node has just one pointer to another node (most frequently called <code class=\"highlighter-rouge\">next</code>) then the list is considered a <em>singly linked list</em> (or just linked list) whereas if each node has two links (usually <code class=\"highlighter-rouge\">previous</code> and <code class=\"highlighter-rouge\">next</code>) then it is considered a <em>doubly linked list</em>. In this post, I am focusing on singly linked lists.</p>\n\n<h2 id=\"why-use-a-linked-list\">Why use a linked list?</h2>\n\n<p>The primary benefit of linked lists is that they can contain an arbitrary number of values while using only the amount of memory necessary for those values. Preserving memory was very important on older computers where memory was scarce. At that time, a built-in array in C required you to specify how many items the array could contain and the program would reserve that amount of memory. Reserving that memory meant it could not be used for the rest of the program or any other programs running at the same time, even if the memory was never filled. One memory-scarce machines, you could easily run out of available memory using arrays. Linked lists were created to work around this problem.</p>\n\n<p>Though originally intended for better memory management, linked lists also became popular when developers didn’t know how many items an array would ultimately contain. It was much easier to use a linked list and add values as necessary than it was to accurately guess the maximum number of values an array might contain. As such, linked lists are often used as the foundation for built-in data structures in various programming languages.</p>\n\n<p>The built-in JavaScript <code class=\"highlighter-rouge\">Array</code> type is not implemented as a linked list, though its size is dynamic and is always the best option to start with. You might go your entire career without needing to use a linked list in JavaScript but linked lists are still a good way to learn about creating your own data structures.</p>\n\n<h2 id=\"the-design-of-a-linked-list\">The design of a linked list</h2>\n\n<p>The most important part of a linked list is its node structure. Each node must contain some data and a pointer to the next node in the list. Here is a simple representation in JavaScript:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">class</span> <span class=\"nx\">LinkedListNode</span> <span class=\"p\">{</span>\n    <span class=\"kd\">constructor</span><span class=\"p\">(</span><span class=\"nx\">data</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">data</span> <span class=\"o\">=</span> <span class=\"nx\">data</span><span class=\"p\">;</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">next</span> <span class=\"o\">=</span> <span class=\"kc\">null</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>In the <code class=\"highlighter-rouge\">LinkedListNode</code> class, the <code class=\"highlighter-rouge\">data</code> property contains the value the linked list item should store and the <code class=\"highlighter-rouge\">next</code> property is a pointer to the next item in the list. The <code class=\"highlighter-rouge\">next</code> property starts out as <code class=\"highlighter-rouge\">null</code> because you don’t yet know the next node. You can then create a linked list using the <code class=\"highlighter-rouge\">LinkedListNode</code> class like this:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// create the first node</span>\n<span class=\"kd\">const</span> <span class=\"nx\">head</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">LinkedListNode</span><span class=\"p\">(</span><span class=\"mi\">12</span><span class=\"p\">);</span>\n\n<span class=\"c1\">// add a second node</span>\n<span class=\"nx\">head</span><span class=\"p\">.</span><span class=\"nx\">next</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">LinkedListNode</span><span class=\"p\">(</span><span class=\"mi\">99</span><span class=\"p\">);</span>\n\n<span class=\"c1\">// add a third node</span>\n<span class=\"nx\">head</span><span class=\"p\">.</span><span class=\"nx\">next</span><span class=\"p\">.</span><span class=\"nx\">next</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">LinkedListNode</span><span class=\"p\">(</span><span class=\"mi\">37</span><span class=\"p\">);</span>\n</code></pre></div></div>\n\n<p>The first node in a linked list is typically called the <em>head</em>, so the <code class=\"highlighter-rouge\">head</code> identifier in this example represents the first node. The second node is created an assigned to <code class=\"highlighter-rouge\">head.next</code> to create a list with two items. A third node is added by assigning it to <code class=\"highlighter-rouge\">head.next.next</code>, which is the <code class=\"highlighter-rouge\">next</code> pointer of the second node in the list. The <code class=\"highlighter-rouge\">next</code> pointer of the third node in the list remains <code class=\"highlighter-rouge\">null</code>. The following image shows the resulting data structure.</p>\n\n<p><a href="https://humanwhocodes.com/feeds/\&quot;https://commons.wikimedia.org/w/index.php?curid=2245162\&quot;"><img src="https://humanwhocodes.com/feeds/\&quot;https://humanwhocodes.com/images/posts/2019/singly-linked-list.svg\&quot;" alt=\"Diagram of a Linked List by Lasindi - Own work, Public Domain\" /></a></p>\n\n<p>The structure of a linked list allows you to traverse all of the data by following the <code class=\"highlighter-rouge\">next</code> pointer on each node. Here is a simple example of how to traverse a linked list and print each value out to the console:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">let</span> <span class=\"nx\">current</span> <span class=\"o\">=</span> <span class=\"nx\">head</span><span class=\"p\">;</span>\n\n<span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"nx\">current</span> <span class=\"o\">!==</span> <span class=\"kc\">null</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">current</span><span class=\"p\">.</span><span class=\"nx\">data</span><span class=\"p\">);</span>\n    <span class=\"nx\">current</span> <span class=\"o\">=</span> <span class=\"nx\">current</span><span class=\"p\">.</span><span class=\"nx\">next</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>This code uses the variable <code class=\"highlighter-rouge\">current</code> as the pointer that moves through the linked list. The <code class=\"highlighter-rouge\">current</code> variable is initialized to the head of the list and the <code class=\"highlighter-rouge\">while</code> loop continues until <code class=\"highlighter-rouge\">current</code> is <code class=\"highlighter-rouge\">null</code>. Inside of the loop, the value stored on the <code class=\"highlighter-rouge\">current</code> node is printed and then the <code class=\"highlighter-rouge\">next</code> pointer is followed to the next node.</p>\n\n<p>Most linked list operations use this traversal algorithm or something similar, so understanding this algorithm is important to understanding linked lists in general.</p>\n\n<h2 id=\"the-linkedlist-class\">The <code class=\"highlighter-rouge\">LinkedList</code> class</h2>\n\n<p>If you were writing a linked list in C, you might stop at this point and consider your task complete (although you would use a struct instead of a class to represent each node). However, in object-oriented languages like JavaScript, it’s more customary to create a class to encapsulate this functionality. Here is a simple example:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">const</span> <span class=\"nx\">head</span> <span class=\"o\">=</span> <span class=\"nb\">Symbol</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">head</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n\n<span class=\"kd\">class</span> <span class=\"nx\">LinkedList</span> <span class=\"p\">{</span>\n    <span class=\"kd\">constructor</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"k\">this</span><span class=\"p\">[</span><span class=\"nx\">head</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">null</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>The <code class=\"highlighter-rouge\">LinkedList</code> class represents a linked list and will contain methods for interacting with the data it contains. The only property is a symbol property called <code class=\"highlighter-rouge\">head</code> that will contain a pointer to the first node in the list. A symbol property is used instead of a string property to make it clear that this property is not intended to be modified outside of the class.</p>\n\n<h3 id=\"adding-new-data-to-the-list\">Adding new data to the list</h3>\n\n<p>Adding an item into a linked list requires walking the structure to find the correct location, creating a new node, and inserting it in place. The one special case is when the list is empty, in which case you simply create a new node and assign it to <code class=\"highlighter-rouge\">head</code>:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">const</span> <span class=\"nx\">head</span> <span class=\"o\">=</span> <span class=\"nb\">Symbol</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">head</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n\n<span class=\"kd\">class</span> <span class=\"nx\">LinkedList</span> <span class=\"p\">{</span>\n    <span class=\"kd\">constructor</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"k\">this</span><span class=\"p\">[</span><span class=\"nx\">head</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">null</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"nx\">add</span><span class=\"p\">(</span><span class=\"nx\">data</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\n        <span class=\"c1\">// create a new node</span>\n        <span class=\"kd\">const</span> <span class=\"nx\">newNode</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">LinkedListNode</span><span class=\"p\">(</span><span class=\"nx\">data</span><span class=\"p\">);</span>\n                \n        <span class=\"c1\">//special case: no items in the list yet</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">[</span><span class=\"nx\">head</span><span class=\"p\">]</span> <span class=\"o\">===</span> <span class=\"kc\">null</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\n            <span class=\"c1\">// just set the head to the new node</span>\n            <span class=\"k\">this</span><span class=\"p\">[</span><span class=\"nx\">head</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nx\">newNode</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n\n            <span class=\"c1\">// start out by looking at the first node</span>\n            <span class=\"kd\">let</span> <span class=\"nx\">current</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">[</span><span class=\"nx\">head</span><span class=\"p\">];</span>\n\n            <span class=\"c1\">// follow `next` links until you reach the end</span>\n            <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"nx\">current</span><span class=\"p\">.</span><span class=\"nx\">next</span> <span class=\"o\">!==</span> <span class=\"kc\">null</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                <span class=\"nx\">current</span> <span class=\"o\">=</span> <span class=\"nx\">current</span><span class=\"p\">.</span><span class=\"nx\">next</span><span class=\"p\">;</span>\n            <span class=\"p\">}</span>\n           \n            <span class=\"c1\">// assign the node into the `next` pointer</span>\n            <span class=\"nx\">current</span><span class=\"p\">.</span><span class=\"nx\">next</span> <span class=\"o\">=</span> <span class=\"nx\">newNode</span><span class=\"p\">;</span>            \n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>The <code class=\"highlighter-rouge\">add()</code> method accepts a single argument, any piece of data, and adds it to the end of the list. If the list is empty (<code class=\"highlighter-rouge\">this[head]</code> is <code class=\"highlighter-rouge\">null</code>) then you assign <code class=\"highlighter-rouge\">this[head]</code> equal to the new node. If the list is not empty, then you need to traverse the already-existing list to find the last node. The traversal happens in a <code class=\"highlighter-rouge\">while</code> loop that start at <code class=\"highlighter-rouge\">this[head]</code> and follows the <code class=\"highlighter-rouge\">next</code> links of each node until the last node is found. The last node has a <code class=\"highlighter-rouge\">next</code> property equal to <code class=\"highlighter-rouge\">null</code>, so it’s important to stop traversal at that point rather than when <code class=\"highlighter-rouge\">current</code> is <code class=\"highlighter-rouge\">null</code> (as in the previous section). You can then assign the new node to that <code class=\"highlighter-rouge\">next</code> property to add the data into the list.</p>\n\n<aside class=\"note\">\n  <p>Traditional algorithms use two pointers, a <code class=\"highlighter-rouge\">current</code> that points to the item being inspected and a <code class=\"highlighter-rouge\">previous</code> that points to the node before <code class=\"highlighter-rouge\">current</code>. When <code class=\"highlighter-rouge\">current</code> is <code class=\"highlighter-rouge\">null</code>, that means <code class=\"highlighter-rouge\">previous</code> is pointing to the last item in the list. I don’t find that approach very logical when you can just check the value of <code class=\"highlighter-rouge\">current.next</code> and exit the loop at that point.</p>\n</aside>\n\n<p>The complexity of the <code class=\"highlighter-rouge\">add()</code> method is O(n) because you must traverse the entire list to find the location to insert a new node. You can reduce this complexity to O(1) by tracking the end of the list (usually called the <em>tail</em>) in addition to the head, allowing you to immediately insert a new node in the correct position.</p>\n\n<h3 id=\"retrieving-data-from-the-list\">Retrieving data from the list</h3>\n\n<p>Linked lists don’t allow random access to its contents, but you can still retrieve data in any given position by traversing the list and returning the data. To do so, you’ll add a <code class=\"highlighter-rouge\">get()</code> method that accepts a zero-based index of the data to retrieve, like this:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">class</span> <span class=\"nx\">LinkedList</span> <span class=\"p\">{</span>\n\n    <span class=\"c1\">// other methods hidden for clarity</span>\n\n    <span class=\"kd\">get</span><span class=\"p\">(</span><span class=\"nx\">index</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    \n        <span class=\"c1\">// ensure `index` is a positive value</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">index</span> <span class=\"o\">&gt;</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\n            <span class=\"c1\">// the pointer to use for traversal</span>\n            <span class=\"kd\">let</span> <span class=\"nx\">current</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">[</span><span class=\"nx\">head</span><span class=\"p\">];</span>\n\n            <span class=\"c1\">// used to keep track of where in the list you are</span>\n            <span class=\"kd\">let</span> <span class=\"nx\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n\n            <span class=\"c1\">// traverse the list until you reach either the end or the index</span>\n            <span class=\"k\">while</span> <span class=\"p\">((</span><span class=\"nx\">current</span> <span class=\"o\">!==</span> <span class=\"kc\">null</span><span class=\"p\">)</span> <span class=\"o\">&amp;&amp;</span> <span class=\"p\">(</span><span class=\"nx\">i</span> <span class=\"o\">&lt;</span> <span class=\"nx\">index</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n                <span class=\"nx\">current</span> <span class=\"o\">=</span> <span class=\"nx\">current</span><span class=\"p\">.</span><span class=\"nx\">next</span><span class=\"p\">;</span>\n                <span class=\"nx\">i</span><span class=\"o\">++</span><span class=\"p\">;</span>          \n            <span class=\"p\">}</span>\n        \n            <span class=\"c1\">// return the data if `current` isn't null</span>\n            <span class=\"k\">return</span> <span class=\"nx\">current</span> <span class=\"o\">!==</span> <span class=\"kc\">null</span> <span class=\"p\">?</span> <span class=\"nx\">current</span><span class=\"p\">.</span><span class=\"nx\">data</span> <span class=\"p\">:</span> <span class=\"kc\">undefined</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n            <span class=\"k\">return</span> <span class=\"kc\">undefined</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>The <code class=\"highlighter-rouge\">get()</code> method first checks to make sure that <code class=\"highlighter-rouge\">index</code> is a positive value, otherwise it returns <code class=\"highlighter-rouge\">undefined</code>. The <code class=\"highlighter-rouge\">i</code> variable is used to keep track of how deep the traversal has gone into the list. The loop itself is the same basic traversal you saw earlier with the added condition that the loop should exit when <code class=\"highlighter-rouge\">i</code> is equal to <code class=\"highlighter-rouge\">index</code>. That means there are two conditions under which the loop can exit:</p>\n\n<ol>\n  <li><code class=\"highlighter-rouge\">current</code> is <code class=\"highlighter-rouge\">null</code>, which means the list is shorter than <code class=\"highlighter-rouge\">index</code>.</li>\n  <li><code class=\"highlighter-rouge\">i</code> is equal to <code class=\"highlighter-rouge\">index</code>, which means <code class=\"highlighter-rouge\">current</code> is the node in the <code class=\"highlighter-rouge\">index</code> position.</li>\n</ol>\n\n<p>If <code class=\"highlighter-rouge\">current</code> is <code class=\"highlighter-rouge\">null</code> then <code class=\"highlighter-rouge\">undefined</code> is returned and otherwise <code class=\"highlighter-rouge\">current.data</code> is returned. This check ensures that <code class=\"highlighter-rouge\">get()</code> will never throw an error for an <code class=\"highlighter-rouge\">index</code> that isn’t found in the list (although you could decide to throw an error instead of returning <code class=\"highlighter-rouge\">undefined</code>).</p>\n\n<p>The complexity of the <code class=\"highlighter-rouge\">get()</code> method ranges from O(1) when removing the first node (no traversal is needed) to O(n) when removing the last node (traversing the entire list is required). It’s difficult to reduce complexity because a search is always required to identify the correct value to return.</p>\n\n<h3 id=\"removing-data-from-a-linked-list\">Removing data from a linked list</h3>\n\n<p>Removing data from a linked list is a little bit tricky because you need to ensure that all <code class=\"highlighter-rouge\">next</code> pointers remain valid after a node is removed. For instance, if you want to remove the second node in a three-node list, you’ll need to ensure that the first node’s <code class=\"highlighter-rouge\">next</code> property now points to the third node instead of the second. Skipping over the second node in this way effectively removes it from the list.</p>\n\n<p><a href="https://humanwhocodes.com/feeds/\&quot;http://en.wikipedia.org/wiki/File:Singly_linked_list_delete_after.png\&quot;"><img src="https://humanwhocodes.com/feeds/\&quot;https://humanwhocodes.com/images/wp-content/uploads/2009/04/Singly_linked_list_delete_after.png\&quot;" alt=\"Linked list removal diagram\" /></a></p>\n\n<p>The remove operation is actually two operations:</p>\n\n<ol>\n  <li>Find the specified index (the same algorithm as in <code class=\"highlighter-rouge\">get()</code>)</li>\n  <li>Remove the node at that index</li>\n</ol>\n\n<p>Finding the specified index is the same as in the <code class=\"highlighter-rouge\">get()</code> method, but in this loop you also need to track the node that comes before <code class=\"highlighter-rouge\">current</code> because you’ll need to modify the <code class=\"highlighter-rouge\">next</code> pointer of the previous node.</p>\n\n<p>There are also four special cases to consider:</p>\n\n<ol>\n  <li>The list is empty (no traversal is possible)</li>\n  <li>The index is less than zero</li>\n  <li>The index is greater than the number of items in the list</li>\n  <li>The index is zero (removing the head)</li>\n</ol>\n\n<p>In the first three cases, the removal operation cannot be completed, and so it makes sense to throw an error; the fourth special case requires rewriting the <code class=\"highlighter-rouge\">this[head]</code> property. Here is what the implementation of a <code class=\"highlighter-rouge\">remove()</code> method looks like:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">class</span> <span class=\"nx\">LinkedList</span> <span class=\"p\">{</span>\n\n    <span class=\"c1\">// other methods hidden for clarity</span>\n\n    <span class=\"nx\">remove</span><span class=\"p\">(</span><span class=\"nx\">index</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    \n        <span class=\"c1\">// special cases: empty list or invalid `index`</span>\n        <span class=\"k\">if</span> <span class=\"p\">((</span><span class=\"k\">this</span><span class=\"p\">[</span><span class=\"nx\">head</span><span class=\"p\">]</span> <span class=\"o\">===</span> <span class=\"kc\">null</span><span class=\"p\">)</span> <span class=\"o\">||</span> <span class=\"p\">(</span><span class=\"nx\">index</span> <span class=\"o\">&lt;</span> <span class=\"mi\">0</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n            <span class=\"k\">throw</span> <span class=\"k\">new</span> <span class=\"nx\">RangeError</span><span class=\"p\">(</span><span class=\"s2\">`Index </span><span class=\"p\">${</span><span class=\"nx\">index</span><span class=\"p\">}</span><span class=\"s2\"> does not exist in the list.`</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span>\n \n        <span class=\"c1\">// special case: removing the first node</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">index</span> <span class=\"o\">===</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\n            <span class=\"c1\">// temporary store the data from the node</span>\n            <span class=\"kd\">const</span> <span class=\"nx\">data</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">[</span><span class=\"nx\">head</span><span class=\"p\">].</span><span class=\"nx\">data</span><span class=\"p\">;</span>\n\n            <span class=\"c1\">// just replace the head with the next node in the list</span>\n            <span class=\"k\">this</span><span class=\"p\">[</span><span class=\"nx\">head</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">[</span><span class=\"nx\">head</span><span class=\"p\">].</span><span class=\"nx\">next</span><span class=\"p\">;</span>\n\n            <span class=\"c1\">// return the data at the previous head of the list</span>\n            <span class=\"k\">return</span> <span class=\"nx\">data</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"c1\">// pointer use to traverse the list</span>\n        <span class=\"kd\">let</span> <span class=\"nx\">current</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">[</span><span class=\"nx\">head</span><span class=\"p\">];</span>\n\n        <span class=\"c1\">// keeps track of the node before current in the loop</span>\n        <span class=\"kd\">let</span> <span class=\"nx\">previous</span> <span class=\"o\">=</span> <span class=\"kc\">null</span><span class=\"p\">;</span>\n\n        <span class=\"c1\">// used to track how deep into the list you are</span>\n        <span class=\"kd\">let</span> <span class=\"nx\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n\n        <span class=\"c1\">// same loops as in `get()`</span>\n        <span class=\"k\">while</span> <span class=\"p\">((</span><span class=\"nx\">current</span> <span class=\"o\">!==</span> <span class=\"kc\">null</span><span class=\"p\">)</span> <span class=\"o\">&amp;&amp;</span> <span class=\"p\">(</span><span class=\"nx\">i</span> <span class=\"o\">&lt;</span> <span class=\"nx\">index</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n\n            <span class=\"c1\">// save the value of current</span>\n            <span class=\"nx\">previous</span> <span class=\"o\">=</span> <span class=\"nx\">current</span><span class=\"p\">;</span>\n\n            <span class=\"c1\">// traverse to the next node</span>\n            <span class=\"nx\">current</span> <span class=\"o\">=</span> <span class=\"nx\">current</span><span class=\"p\">.</span><span class=\"nx\">next</span><span class=\"p\">;</span>\n\n            <span class=\"c1\">// increment the count</span>\n            <span class=\"nx\">i</span><span class=\"o\">++</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"c1\">// if node was found, remove it</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">current</span> <span class=\"o\">!==</span> <span class=\"kc\">null</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\n            <span class=\"c1\">// skip over the node to remove</span>\n            <span class=\"nx\">previous</span><span class=\"p\">.</span><span class=\"nx\">next</span> <span class=\"o\">=</span> <span class=\"nx\">current</span><span class=\"p\">.</span><span class=\"nx\">next</span><span class=\"p\">;</span>\n\n            <span class=\"c1\">// return the value that was just removed from the list</span>\n            <span class=\"k\">return</span> <span class=\"nx\">current</span><span class=\"p\">.</span><span class=\"nx\">data</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"c1\">// if node wasn't found, throw an error</span>\n        <span class=\"k\">throw</span> <span class=\"k\">new</span> <span class=\"nx\">RangeError</span><span class=\"p\">(</span><span class=\"s2\">`Index </span><span class=\"p\">${</span><span class=\"nx\">index</span><span class=\"p\">}</span><span class=\"s2\"> does not exist in the list.`</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>The <code class=\"highlighter-rouge\">remove()</code> method first checks for two special cases, an empty list (<code class=\"highlighter-rouge\">this[head]</code> is <code class=\"highlighter-rouge\">null</code>) and an <code class=\"highlighter-rouge\">index</code> that is less than zero. An error is thrown in both cases.</p>\n\n<p>The next special case is when <code class=\"highlighter-rouge\">index</code> is <code class=\"highlighter-rouge\">0</code>, meaning that you are removing the list head. The new list head should be the second node in the list, so you can set <code class=\"highlighter-rouge\">this[head]</code> equal to <code class=\"highlighter-rouge\">this[head].next</code>. It doesn’t matter if there’s only one node in the list because <code class=\"highlighter-rouge\">this[head]</code> would end up equal to <code class=\"highlighter-rouge\">null</code>, which means the list is empty after the removal. The only catch is to store the data from the original head in a local variable, <code class=\"highlighter-rouge\">data</code>, so that it can be returned.</p>\n\n<p>With three of the four special cases taken care of, you can now proceed with a traversal similar to that found in the <code class=\"highlighter-rouge\">get()</code> method. As mentioned earlier, this loop is slightly different in that the <code class=\"highlighter-rouge\">previous</code> variable is used to keep track of the node that appears just before <code class=\"highlighter-rouge\">current</code>, as that information is necessary to propely remove a node. Similar to <code class=\"highlighter-rouge\">get()</code>, when the loop exits <code class=\"highlighter-rouge\">current</code> may be <code class=\"highlighter-rouge\">null</code>, indicating that the index wasn’t found. If that happens then an error is thrown, otherwise, <code class=\"highlighter-rouge\">previous.next</code> is set to <code class=\"highlighter-rouge\">current.next</code>, effectively removing <code class=\"highlighter-rouge\">current</code> from the list. The data stored on <code class=\"highlighter-rouge\">current</code> is returned as the last step.</p>\n\n<p>The complexity of the <code class=\"highlighter-rouge\">remove()</code> method is the same as <code class=\"highlighter-rouge\">get()</code> and ranges from O(1) when removing the first node to O(n) when removing the last node.</p>\n\n<h3 id=\"making-the-list-iterable\">Making the list iterable</h3>\n\n<p>In order to be used with the JavaScript <code class=\"highlighter-rouge\">for-of</code> loop and array destructuring, collections of data must be iterables. The built-in JavaScript collections such as <code class=\"highlighter-rouge\">Array</code> and <code class=\"highlighter-rouge\">Set</code> are iterable by default, and you can make your own classes iterable by specifying a <code class=\"highlighter-rouge\">Symbol.iterator</code> generator method on the class. I prefer to first implement a <code class=\"highlighter-rouge\">values()</code> generator method (to match the method found on built-in collection classes) and then have <code class=\"highlighter-rouge\">Symbol.iterator</code> call <code class=\"highlighter-rouge\">values()</code> directly.</p>\n\n<p>The <code class=\"highlighter-rouge\">values()</code> method need only do a basic traversal of the list and <code class=\"highlighter-rouge\">yield</code> the data that each node contains:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">class</span> <span class=\"nx\">LinkedList</span> <span class=\"p\">{</span>\n\n    <span class=\"c1\">// other methods hidden for clarity</span>\n\n    <span class=\"o\">*</span><span class=\"nx\">values</span><span class=\"p\">(){</span>\n        \n        <span class=\"kd\">let</span> <span class=\"nx\">current</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">[</span><span class=\"nx\">head</span><span class=\"p\">];</span>\n\n        <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"nx\">current</span> <span class=\"o\">!==</span> <span class=\"kc\">null</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"k\">yield</span> <span class=\"nx\">current</span><span class=\"p\">.</span><span class=\"nx\">data</span><span class=\"p\">;</span>\n            <span class=\"nx\">current</span> <span class=\"o\">=</span> <span class=\"nx\">current</span><span class=\"p\">.</span><span class=\"nx\">next</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"p\">[</span><span class=\"nb\">Symbol</span><span class=\"p\">.</span><span class=\"nx\">iterator</span><span class=\"p\">]()</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">values</span><span class=\"p\">();</span>\n    <span class=\"p\">}</span>    \n\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>The <code class=\"highlighter-rouge\">values()</code> method is marked with an asterisk (<code class=\"highlighter-rouge\">*</code>) to indicate that it’s a generator method. The method traverses the list, using <code class=\"highlighter-rouge\">yield</code> to return each piece of data it encounters. (Note that the <code class=\"highlighter-rouge\">Symbol.iterator</code> method isn’t marked as a generator because it is returning an iterator from the <code class=\"highlighter-rouge\">values()</code> generator method.)</p>\n\n<h3 id=\"using-the-class\">Using the class</h3>\n\n<p>Once complete, you can use the linked list implementation like this:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">const</span> <span class=\"nx\">list</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">LinkedList</span><span class=\"p\">();</span>\n<span class=\"nx\">list</span><span class=\"p\">.</span><span class=\"nx\">add</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">red</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n<span class=\"nx\">list</span><span class=\"p\">.</span><span class=\"nx\">add</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">orange</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n<span class=\"nx\">list</span><span class=\"p\">.</span><span class=\"nx\">add</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">yellow</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n    \n<span class=\"c1\">// get the second item in the list</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">list</span><span class=\"p\">.</span><span class=\"kd\">get</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">));</span>       <span class=\"c1\">// \"orange\"</span>\n\n<span class=\"c1\">// print out all items</span>\n<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kd\">const</span> <span class=\"nx\">color</span> <span class=\"k\">of</span> <span class=\"nx\">list</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">color</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// remove the second item in the list    </span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">list</span><span class=\"p\">.</span><span class=\"nx\">remove</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">));</span>    <span class=\"c1\">// \"orange\"</span>\n    \n<span class=\"c1\">// get the new first item in the list</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">list</span><span class=\"p\">.</span><span class=\"kd\">get</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">));</span>       <span class=\"c1\">// \"yellow\"</span>\n\n<span class=\"c1\">// convert to an array</span>\n<span class=\"kd\">const</span> <span class=\"nx\">array1</span> <span class=\"o\">=</span> <span class=\"p\">[...</span><span class=\"nx\">list</span><span class=\"p\">.</span><span class=\"nx\">values</span><span class=\"p\">()];</span>\n<span class=\"kd\">const</span> <span class=\"nx\">array2</span> <span class=\"o\">=</span> <span class=\"p\">[...</span><span class=\"nx\">list</span><span class=\"p\">];</span>\n</code></pre></div></div>\n\n<p>This basic implementation of a linked list can be rounded out with a <code class=\"highlighter-rouge\">size</code> property to count the number of nodes in the list, and other familiar methods such as <code class=\"highlighter-rouge\">indexOf()</code>. The full source code is available on GitHub at my <a href="https://humanwhocodes.com/feeds/\&quot;https://github.com/humanwhocodes/computer-science-in-javascript\&quot;">Computer Science in JavaScript</a> project.</p>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<p>Linked lists aren’t something you’re likely to use every day, but they are a foundational data structure in computer science. The concept of using nodes that point to one another is used in many other data structures are built into many higher-level programming languages. A good understanding of how linked lists work is important for a good overall understanding of how to create and use other data structures.</p>\n\n<p>For JavaScript programming, you are almost always better off using the built-in collection classes such as <code class=\"highlighter-rouge\">Array</code> rather than creating your own. The built-in collection classes have already been optimized for production use and are well-supported across execution environments.</p>\n\n",
            "url": "https://humanwhocodes.com/blog/2019/01/computer-science-in-javascript-linked-list/",
            
            
            
            "tags": ["Computer Science","JavaScript","Linked List","Programming"],
            
            "date_published": "2019-01-08T00:00:00+00:00",
            "date_modified": "2019-01-08T00:00:00+00:00",
            
                "author": "Nicholas C. Zakas"
            
        },
    
        {
            "id": "https://humanwhocodes.com/blog/2018/10/my-somewhat-complete-salary-history-software-engineer/",
            "title": "My (somewhat) complete salary history as a software engineer",
            "summary": "It’s 2018 and somehow women are still getting paid less than men, even in supposedly progressive industries like software.[1] Whether that be from companies offering women less than men for the same position, women being less likely to negotiate or less successful in negotiations, or any of the other myriad reasons, the results are still the same: women make less than men for the same job. That’s something that shouldn’t be happening in today’s world and it’s up to us (read: men) to step up and make things right. This is my attempt to do just that.",
            "content_text": "It’s 2018 and somehow women are still getting paid less than men, even in supposedly progressive industries like software.[1] Whether that be from companies offering women less than men for the same position, women being less likely to negotiate or less successful in negotiations, or any of the other myriad reasons, the results are still the same: women make less than men for the same job. That’s something that shouldn’t be happening in today’s world and it’s up to us (read: men) to step up and make things right. This is my attempt to do just that.\n\nWhy am I doing this?\n\nLongtime followers know that I’ve been dealing with serious health issues for several years. Two and a half years ago I had to stop working to focus on my health and it will likely be a couple more years before I’m able to even consider working a full-time job again. The people responsible for my last compensation package have long since left that company. That puts me in a unique position where I am not beholden to any past employers, and any future employers are far enough into the future that the information I’m sharing here will be mostly useless by then. Plus, as a white man, I know I’m going to be able to negotiate for my salary without backlash[2] when I do start working again. As such, the information in this post is more valuable to others than it is to me.\n\n\n  I’ve been annoyed that throughout my career I’ve been lectured many times to avoid discussing my compensation with colleagues. Usually it’s with the warning that, “not everyone is getting what you’re getting, and we don’t want to hurt feelings.” It took me a long time to realize that the “hurt feelings” they’re talking about come from an overall lack of transparency into the compensation process, and that simply explaining why people are compensated in certain ways would be a better solution than to hide all of the information from everyone. Yes, there will always be people who think they deserve to be making more but who don’t actually deserve it. That seems like a great way to communicate that they aren’t doing a good enough job and figure out ways to improve.\n\n\nThe bottom line is that nothing gets better unless people are willing to share information. And while I could just share my last salary, I don’t think that’s very useful, especially when compared with the variety of already-available sources of information online. No, to be useful, I felt like I would need to reveal my entire salary history so people can determine for themselves if they’re seeing enough improvement in their salaries over time.\n\nWhere did this data come from?\n\nThe data in this post comes from the following sources:\n\n\n  My memory. Yes, memory is fallible, but there are some data points that are so important on an emotional level that they tend to stick in my brain. I’ll point those out.\n  Offer letters. As my offer letters post-2006 were always emailed to me, I’ve been able to be 100% sure of those details. Prior to 2006, my offer letters were always mailed to me, and I have no record of those.\n\n\nWhere my memory fails me and I don’t have an offer letter, I’ve made an attempt to guess the salary range I had at the time.\n\nThe data\n\nThe table below contains all of my salary (and some other compensation history). I’m including what I believe to be data relevant to evaluating the compensation include the year I received the salary, the years of experience I had at the time (YOE), the starting and ending salary to take into account raises, and any signing bonus (Signing $) and stock options (Options) I might have received. Any amount with a question mark indicates that I’m guessing. I did not include any restricted stock units I might have received because I only ever received them at Yahoo as part of my initial offer.\n\n\n  \n    \n      Year\n      YOE\n      Company\n      State\n      Title\n      Starting $\n      Ending $\n      Signing $\n      Options\n    \n  \n  \n    \n      2000\n      0\n      Radnet, Inc.\n      MA\n      Webmaster\n      $48,000\n      $55,000\n      -\n      ?\n    \n    \n      2001\n      0\n      Radnet, Inc.\n      MA\n      UI Developer\n      $62,500\n      $62,500\n      -\n      -\n    \n    \n      2001\n      0\n      MatrixOne, Inc.\n      MA\n      UI Designer/Developer\n      $68,000?\n      ?\n      $2,000\n      ?\n    \n    \n      2003\n      3\n      MatrixOne, Inc.\n      MA\n      Senior Software Engineer\n      ?\n      $75,000?\n      -\n      -\n    \n    \n      2005\n      5\n      Vistaprint, Inc.\n      MA\n      Lead Software Engineer\n      $82,000?\n      $98,000\n      -\n      3,000\n    \n    \n      2006\n      6\n      Yahoo, Inc.\n      CA\n      Senior Front-end Engineer\n      $115,000\n      ?\n      $10,000\n      3,500\n    \n    \n      2008\n      8\n      Yahoo, Inc.\n      CA\n      Principal Front-end Engineer\n      ?\n      ?\n      -\n      -\n    \n    \n      2011\n      11\n      Yahoo, Inc.\n      CA\n      Presentation Architect\n      ?\n      $165,000?\n      -\n      -\n    \n    \n      2013\n      13\n      Box, Inc.\n      CA\n      Staff Software Engineer\n      $175,000\n      ?\n      $25,000\n      50,000\n    \n    \n      2014\n      14\n      Box, Inc.\n      CA\n      Principal Architect\n      $208,000\n      $220,000\n      -\n      -\n    \n  \n\n\nJob Details\n\nThe data alone doesn’t really tell the full story, so here are the details around each position. I’ve also included how I came to work at each company, as I think it’s important to recognize blind resume submissions from having contacts as a company.\n\nIn 2006, I moved from Massachusetts to California. This undoubtedly affected my pay positively due to the higher cost of living in California. At one point, my manager mentioned that if I moved back to Massachusetts, I should expect a 10% pay cut due to cost of living differences. I’m still in California, so I have no idea if that was accurate.\n\nRadnet (2000-2001)\n\nMy first job out of college was at a small startup in Wakefield, MA called Radnet, Inc. I got this job because the woman who used to babysit me as a child was running human resources at the company. My official title was webmaster, and I thought I would be coming in to run the company website. As it turned out, between the time they offered me the job and my starting day, they had hired someone to oversee both UI development and the website. As it turned out, I would never manage the website and instead would spend time making JavaScript components for the company’s web application.\n\nI know that my starting salary was $48,000 (about $70,284 in 2018 dollars) because I was very excited about it. After spending summers working jobs that ranged from $2/hour to $6/hour, this seemed like an incredible amount of money to me. A few months in, they gave me a raise to $55,000 because I was doing a good job. Towards the end of 2000, they believed the company would be bought and so they changed my title to UI Developer and upped my salary to $62,500 with the belief that an acquirer would immediately fire the “webmaster” and ensuring I’d benefit from the acquisition.\n\nAs it turned out, the company never got bought and so it shutdown in January 2001. I never really saw much of the $62,500, and eight months after I had started my first job, I was unemployed.\n\nThe job itself was pretty low-stress. I worked an even 40 hours per week during my eight months there, and never once worked on a weekend.\n\nNote: I did receive stock options for this position, but I don’t remember what they were. I didn’t really understand what stock options were at the time so that information never stuck in my brain.\n\nMatrixOne (2001-2005)\n\nWhen Radnet closed down, my manager ended up at MatrixOne and asked if I would like to join him. I had enjoyed working with him at Radnet so I accepted. It’s important to understand that this was during the dot-com crash and there weren’t a lot of tech jobs to be had in Massachusetts at the time. I considered myself lucky to have formed a good relationship that allowed me to find a new job fairly quickly after Radnet shut down.\n\nI don’t remember all of the details but I’m pretty sure my starting salary was close to $68,000 ($96,814 in 2018 dollars). I’m also reasonably certain that I got a small signing bonus, maybe around $2,000, that my manager negotiated for me. I also received some stock options, but once again, I didn’t really understand what they were and so didn’t even register them as part of my compensation. It didn’t matter, though, because the company stock was never again as high as the day I joined. I was never able to exercise options, even when I got some repriced options later in my career there because the stock only ever went down. (Eventually the company would be bought out by a competitor.)\n\nMy salary didn’t improve much there because the company was in perpetually poor financial health. There was a salary freeze in place almost the entire time I was there. I survived four rounds of layoffs. I was eventually “promoted” to the position of Senior Software Engineer, but it was a promotion in title only. There was no increase in salary (because of the salary freeze) and no change in my responsibilities (because the organization was weird). It was just a pat on the back to say, “good job, please don’t leave.” Spoiler alert: I left as soon as I could.\n\nRight before I left, I did get a salary increase to around $75,000. It wasn’t enough to make me want to stay.\n\nIn terms of workload, once again I stuck pretty close to 40 hours per week and never worked a weekend. My commute, however, added three hours every day (1.5 hours each way). Adding in the commute time would make it 55 hours per week.\n\nThis was the busiest time of my life, as I was not only working full time but was also writing my first book (nights and weekends) and going to school for my master’s degree (nights and weekends). I’m not quite sure how I ended up doing all of that, and managing a serious relationship with my then-partner, but somehow I made it through.\n\nVistaprint (2005-2006)\n\nI often refer to my position at Vistaprint as my first real software engineering job. It was the first time I applied for a software engineering job without having a connection at the company; I just sent my resume in to their email address. I reported into the engineering organization (as opposed to the design organization in my prior jobs), and I got what I considered to be a good offer. The company was pre-IPO, and I was excited to get 3,000 stock options. (By this time, I actually understood what stock options were.)\n\nI don’t recall the starting salary but I suspect it was around $82,000 ($105,867 in 2018 dollars). I definitely recall the ending salary as $98,000 for a few reasons. First, I was complaining a lot about the boring project they had assigned me to so I expected that would eliminate me from any serious raise considerations. I was shocked to get a raise and even more shocked at the amount. Second, I was bummed they didn’t give me the extra $2,000 to make an even $100,000. Last, I was secretly interviewing with both Google and Yahoo, and upping my salary meant that I could use that number when it came time to talk compensation with them.\n\nI was only at Vistaprint for a little over a year before deciding to move to California to work for Yahoo. Vistaprint did go public while I was there, but since I left after a year, I didn’t see much from those stock options.\n\nThe workload here was heavier but I still managed to stick to 40-45 hours per week. I don’t recall working any weekends, however, I do recall sometimes needing to work from home in the evening or early morning. All in all, though, the workload wasn’t that bad.\n\nYahoo (2006-2011)\n\nYahoo’s initial offer was the best I had received up to that point. In addition to a $115,000 base salary ($143,833 in 2018 dollars), it included $10,000 signing bonus, 3,500 stock options, 1,500 RSUs, and relocation expenses. This was the first time I tried to negotiate for a higher starting salary and was summarily rejected. At least I tried.\n\nI ended up at Yahoo through a circuitous route. I had heard that Yahoo was using my first book, Professional JavaScript for Web Developers, to teach JavaScript at the company. As such, I had an open invitation to stop by the campus if I was ever in the area. I had traveled to Mountain View to interview Google (they had found me through my second book, Professional Ajax) and so reached out to the folks at Yahoo to meet up. I didn’t realize that conversation would turn into an invitation to apply to work at Yahoo as well.\n\nI don’t remember a lot of my pay details after I joined. Being at Yahoo for almost five years, I got several raises and two promotions, so my pay did keep increasing.  All of that information was sent to my Yahoo corporate email address, and as such, I no longer have any of the documentation. That was intermixed with periods of layoffs and salary freezes. My initial stock options ended up worthless because the company stock price never again reached the level it was at when the options were priced. I would later get repriced stock options and more RSUs, but I don’t have specifics on that.\n\nBy the time I left, I suspect I was making around $165,000 based on how I felt about the offer from Box.\n\nIt’s worth noting that I left Yahoo to try to start a company with some friends and so didn’t have a regular salary for about 18 months.\n\nThe workload at Yahoo varied based on the position I had at that time. When I first arrived at Yahoo, I was in a deep depression after moving across the country to a place where I didn’t know anyone. I found being alone in my apartment to be unbearable and so I would go into work early and leave late. Focusing on my work kept the bad thoughts out of my head and I really enjoyed working on My Yahoo, so it was a good mix. I was probably in the office from 9am to 7pm most days.\n\nOnce I got more comfortable and started meeting people, I spent less time at the office and settled back into more of a 40-hour work week. Unfortunately, I also got more involved with writing and speaking, and those activities started to fill my nights and weekends. Before I knew it, I was basically working every day from the moment I woke up until the moment I went to sleep. Even though all of the work wasn’t Yahoo was paying me for, it was all the same type of work, so it all flowed together.\n\nThe one thing I never did, though, was check my work email from home. I told everyone that leaving the office meant I was off the clock and the only way to reach me was to call me (I did give everyone my cell phone number). In my almost five years at Yahoo, I was only ever called once.\n\nThere were several occasions when I had to work over the weekend, but my managers were very good about giving me that time back the next week. If I had to work over the weekend then I could choose the same number of days during the week to take off (I’d usually take Thursday and Friday the next week to get a long weekend).\n\nBox (2013-2016)\n\nMy offer from Box was also strong. The starting salary of $175,000 ($189,415 in 2018 dollars) was more than enough to make me happy at the time, and the offer included 50,000 stock options. Box was pre-IPO so that high stock option allocation (which I was told was higher than what they usually gave people at my level) was a big consideration for me. I negotiated for a $25,000 signing bonus, as well.\n\nAs part of my consulting business, I would regularly give talks at different companies. I agreed to give a talk for free at Box because a friend worked there and mentioned that they were having trouble managing their growing JavaScript code base. I spoke with a few people after the talk, including the VP of engineering, and we decided to explore if working at Box was a good fit for the company and me. Through several more discussions, it seemed like a good opportunity to get back into the stability of a regular salary with some interesting problems to tackle.\n\nMy memory is a bit hazy around what happened between joining and the end of my time at Box as this was the period when my health was on a steep decline. I think I got one raise as a Staff Software Engineer about three months after I joined, and was informed of being promoted to Principal Architect six months after I joined (although I wouldn’t get the pay increase for another six months). I’m reasonably certain the promotion pay increase bumped me to $208,000. I recall clearly that I got one last raise to push me to $220,000 during 2014 because I had started working from home full time due to my health and I thought it was very nice of them to give me a raise regardless.\n\nAt Box, I managed my workload very carefully due to my health. I started out at 40 hours per week but as my health declined, that number went down. I definitely dipped below that level later, but since we were evaluated on our impact rather than number of hours worked, I still got consistently positive reviews from my peers and manager. Box was also gracious enough to give me flexibility to work from home for two years, and even then, to work my own schedule as my health allowed. Ironically, it was my declining health that forced me to get smarter about how I worked and really keep my hours sane. I was also not spending time writing and speaking after the first year.\n\nI left Box when I was no longer physically able to work from home.\n\nConclusion\n\nIn my sixteen year career, I averaged a pay increase of $10,000 per year, even when taking into account several years of salary freezes at MatrixOne and Yahoo. As such, I suspect I’d be making around $250,000 if I was working full time today.\n\nIt’s also important to understand that I never asked for a raise and only negotiated other details occassionally (as mentioned in the post). I never really felt comfortable with negotiations prior to working for myself, and generally was happy with the offers I received.\n\nWith the exception of my one year at Vistaprint (during which I was a grouchy pain in the ass), I was consistently reviewed as a top performer at my position. I wasn’t put on any sort of improvement plan and most of my feedback had to do with improving interactions and communication with colleagues. And again, with the exception of Vistaprint (because…pain in the ass), I took the feedback to heart and worked to improve in those areas.\n\nBeing single and not having a family to support throughout my entire career meant that I had more options. I could afford to take salary that was lower than what I wanted or could get elsewhere, and I could also afford to walk away from valuable stock options (such as with Vistaprint) to find a job that was more fulfilling. I recognize that not everyone has that option, so I think it’s important to make my situation clear here.\n\nI have two hopes from sharing this information. First, I hope that having this information will make it easier for women to understand how much they should be paid for similar work and just how their pay should be increasing throughout their career. Second, I hope that other men who are in a similarly independent position will also share their compensation history to benefit others.\n\nWe can all be better if we’re willing to share.\n\nUpdates\n\n\n  30-October-2018 - added in details about hours worked per week based on feedback.\n  31-October-2018 - many people are sharing their salary histories on Hacker News.\n  09-November-2018 - Business Insider has republished this article.\n\n\nReferences\n\n\n  By the Numbers: What pay inequality looks like for women in tech (forbes.com)\n  Women Know When Negotiating Isn’t Worth It (theatlantic.com)\n\n",
            "content_html": "<p>It’s 2018 and somehow women are still getting paid less than men, even in supposedly progressive industries like software.[1] Whether that be from companies offering women less than men for the same position, women being less likely to negotiate or less successful in negotiations, or any of the other myriad reasons, the results are still the same: women make less than men for the same job. That’s something that shouldn’t be happening in today’s world and it’s up to us (read: men) to step up and make things right. This is my attempt to do just that.</p>\n\n<h2 id=\"why-am-i-doing-this\">Why am I doing this?</h2>\n\n<p>Longtime followers know that I’ve been dealing with serious health issues for several years. Two and a half years ago I had to stop working to focus on my health and it will likely be a couple more years before I’m able to even consider working a full-time job again. The people responsible for my last compensation package have long since left that company. That puts me in a unique position where I am not beholden to any past employers, and any future employers are far enough into the future that the information I’m sharing here will be mostly useless by then. Plus, as a white man, I know I’m going to be able to negotiate for my salary without backlash[2] when I do start working again. As such, the information in this post is more valuable to others than it is to me.</p>\n\n<aside class=\"note\">\n  <p>I’ve been annoyed that throughout my career I’ve been lectured many times to avoid discussing my compensation with colleagues. Usually it’s with the warning that, “not everyone is getting what you’re getting, and we don’t want to hurt feelings.” It took me a long time to realize that the “hurt feelings” they’re talking about come from an overall lack of transparency into the compensation process, and that simply explaining why people are compensated in certain ways would be a better solution than to hide all of the information from everyone. Yes, there will always be people who think they deserve to be making more but who don’t actually deserve it. That seems like a great way to communicate that they aren’t doing a good enough job and figure out ways to improve.</p>\n</aside>\n\n<p>The bottom line is that nothing gets better unless people are willing to share information. And while I could just share my last salary, I don’t think that’s very useful, especially when compared with the variety of already-available sources of information online. No, to be useful, I felt like I would need to reveal my entire salary history so people can determine for themselves if they’re seeing enough improvement in their salaries over time.</p>\n\n<h2 id=\"where-did-this-data-come-from\">Where did this data come from?</h2>\n\n<p>The data in this post comes from the following sources:</p>\n\n<ol>\n  <li>My memory. Yes, memory is fallible, but there are some data points that are so important on an emotional level that they tend to stick in my brain. I’ll point those out.</li>\n  <li>Offer letters. As my offer letters post-2006 were always emailed to me, I’ve been able to be 100% sure of those details. Prior to 2006, my offer letters were always mailed to me, and I have no record of those.</li>\n</ol>\n\n<p>Where my memory fails me and I don’t have an offer letter, I’ve made an attempt to guess the salary range I had at the time.</p>\n\n<h2 id=\"the-data\">The data</h2>\n\n<p>The table below contains all of my salary (and some other compensation history). I’m including what I believe to be data relevant to evaluating the compensation include the year I received the salary, the years of experience I had at the time (<b>YOE</b>), the starting and ending salary to take into account raises, and any signing bonus (<b>Signing $</b>) and stock options (<b>Options</b>) I might have received. Any amount with a question mark indicates that I’m guessing. I did not include any restricted stock units I might have received because I only ever received them at Yahoo as part of my initial offer.</p>\n\n<table>\n  <thead>\n    <tr>\n      <th>Year</th>\n      <th>YOE</th>\n      <th>Company</th>\n      <th>State</th>\n      <th>Title</th>\n      <th>Starting $</th>\n      <th>Ending $</th>\n      <th>Signing $</th>\n      <th>Options</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>2000</td>\n      <td>0</td>\n      <td>Radnet, Inc.</td>\n      <td>MA</td>\n      <td>Webmaster</td>\n      <td>$48,000</td>\n      <td>$55,000</td>\n      <td>-</td>\n      <td>?</td>\n    </tr>\n    <tr>\n      <td>2001</td>\n      <td>0</td>\n      <td>Radnet, Inc.</td>\n      <td>MA</td>\n      <td>UI Developer</td>\n      <td>$62,500</td>\n      <td>$62,500</td>\n      <td>-</td>\n      <td>-</td>\n    </tr>\n    <tr>\n      <td>2001</td>\n      <td>0</td>\n      <td>MatrixOne, Inc.</td>\n      <td>MA</td>\n      <td>UI Designer/Developer</td>\n      <td>$68,000?</td>\n      <td>?</td>\n      <td>$2,000</td>\n      <td>?</td>\n    </tr>\n    <tr>\n      <td>2003</td>\n      <td>3</td>\n      <td>MatrixOne, Inc.</td>\n      <td>MA</td>\n      <td>Senior Software Engineer</td>\n      <td>?</td>\n      <td>$75,000?</td>\n      <td>-</td>\n      <td>-</td>\n    </tr>\n    <tr>\n      <td>2005</td>\n      <td>5</td>\n      <td>Vistaprint, Inc.</td>\n      <td>MA</td>\n      <td>Lead Software Engineer</td>\n      <td>$82,000?</td>\n      <td>$98,000</td>\n      <td>-</td>\n      <td>3,000</td>\n    </tr>\n    <tr>\n      <td>2006</td>\n      <td>6</td>\n      <td>Yahoo, Inc.</td>\n      <td>CA</td>\n      <td>Senior Front-end Engineer</td>\n      <td>$115,000</td>\n      <td>?</td>\n      <td>$10,000</td>\n      <td>3,500</td>\n    </tr>\n    <tr>\n      <td>2008</td>\n      <td>8</td>\n      <td>Yahoo, Inc.</td>\n      <td>CA</td>\n      <td>Principal Front-end Engineer</td>\n      <td>?</td>\n      <td>?</td>\n      <td>-</td>\n      <td>-</td>\n    </tr>\n    <tr>\n      <td>2011</td>\n      <td>11</td>\n      <td>Yahoo, Inc.</td>\n      <td>CA</td>\n      <td>Presentation Architect</td>\n      <td>?</td>\n      <td>$165,000?</td>\n      <td>-</td>\n      <td>-</td>\n    </tr>\n    <tr>\n      <td>2013</td>\n      <td>13</td>\n      <td>Box, Inc.</td>\n      <td>CA</td>\n      <td>Staff Software Engineer</td>\n      <td>$175,000</td>\n      <td>?</td>\n      <td>$25,000</td>\n      <td>50,000</td>\n    </tr>\n    <tr>\n      <td>2014</td>\n      <td>14</td>\n      <td>Box, Inc.</td>\n      <td>CA</td>\n      <td>Principal Architect</td>\n      <td>$208,000</td>\n      <td>$220,000</td>\n      <td>-</td>\n      <td>-</td>\n    </tr>\n  </tbody>\n</table>\n\n<h2 id=\"job-details\">Job Details</h2>\n\n<p>The data alone doesn’t really tell the full story, so here are the details around each position. I’ve also included how I came to work at each company, as I think it’s important to recognize blind resume submissions from having contacts as a company.</p>\n\n<p>In 2006, I moved from Massachusetts to California. This undoubtedly affected my pay positively due to the higher cost of living in California. At one point, my manager mentioned that if I moved back to Massachusetts, I should expect a 10% pay cut due to cost of living differences. I’m still in California, so I have no idea if that was accurate.</p>\n\n<h3 id=\"radnet-2000-2001\">Radnet (2000-2001)</h3>\n\n<p>My first job out of college was at a small startup in Wakefield, MA called Radnet, Inc. I got this job because the woman who used to babysit me as a child was running human resources at the company. My official title was webmaster, and I thought I would be coming in to run the company website. As it turned out, between the time they offered me the job and my starting day, they had hired someone to oversee both UI development and the website. As it turned out, I would never manage the website and instead would spend time making JavaScript components for the company’s web application.</p>\n\n<p>I know that my starting salary was $48,000 (about $70,284 in 2018 dollars) because I was very excited about it. After spending summers working jobs that ranged from $2/hour to $6/hour, this seemed like an incredible amount of money to me. A few months in, they gave me a raise to $55,000 because I was doing a good job. Towards the end of 2000, they believed the company would be bought and so they changed my title to UI Developer and upped my salary to $62,500 with the belief that an acquirer would immediately fire the “webmaster” and ensuring I’d benefit from the acquisition.</p>\n\n<p>As it turned out, the company never got bought and so it shutdown in January 2001. I never really saw much of the $62,500, and eight months after I had started my first job, I was unemployed.</p>\n\n<p>The job itself was pretty low-stress. I worked an even 40 hours per week during my eight months there, and never once worked on a weekend.</p>\n\n<p><strong>Note:</strong> I did receive stock options for this position, but I don’t remember what they were. I didn’t really understand what stock options were at the time so that information never stuck in my brain.</p>\n\n<h3 id=\"matrixone-2001-2005\">MatrixOne (2001-2005)</h3>\n\n<p>When Radnet closed down, my manager ended up at MatrixOne and asked if I would like to join him. I had enjoyed working with him at Radnet so I accepted. It’s important to understand that this was during the dot-com crash and there weren’t a lot of tech jobs to be had in Massachusetts at the time. I considered myself lucky to have formed a good relationship that allowed me to find a new job fairly quickly after Radnet shut down.</p>\n\n<p>I don’t remember all of the details but I’m pretty sure my starting salary was close to $68,000 ($96,814 in 2018 dollars). I’m also reasonably certain that I got a small signing bonus, maybe around $2,000, that my manager negotiated for me. I also received some stock options, but once again, I didn’t really understand what they were and so didn’t even register them as part of my compensation. It didn’t matter, though, because the company stock was never again as high as the day I joined. I was never able to exercise options, even when I got some repriced options later in my career there because the stock only ever went down. (Eventually the company would be bought out by a competitor.)</p>\n\n<p>My salary didn’t improve much there because the company was in perpetually poor financial health. There was a salary freeze in place almost the entire time I was there. I survived four rounds of layoffs. I was eventually “promoted” to the position of Senior Software Engineer, but it was a promotion in title only. There was no increase in salary (because of the salary freeze) and no change in my responsibilities (because the organization was weird). It was just a pat on the back to say, “good job, please don’t leave.” Spoiler alert: I left as soon as I could.</p>\n\n<p>Right before I left, I did get a salary increase to around $75,000. It wasn’t enough to make me want to stay.</p>\n\n<p>In terms of workload, once again I stuck pretty close to 40 hours per week and never worked a weekend. My commute, however, added three hours every day (1.5 hours each way). Adding in the commute time would make it 55 hours per week.</p>\n\n<p>This was the busiest time of my life, as I was not only working full time but was also writing my first book (nights and weekends) and going to school for my master’s degree (nights and weekends). I’m not quite sure how I ended up doing all of that, and managing a serious relationship with my then-partner, but somehow I made it through.</p>\n\n<h3 id=\"vistaprint-2005-2006\">Vistaprint (2005-2006)</h3>\n\n<p>I often refer to my position at Vistaprint as my first real software engineering job. It was the first time I applied for a software engineering job without having a connection at the company; I just sent my resume in to their email address. I reported into the engineering organization (as opposed to the design organization in my prior jobs), and I got what I considered to be a good offer. The company was pre-IPO, and I was excited to get 3,000 stock options. (By this time, I actually understood what stock options were.)</p>\n\n<p>I don’t recall the starting salary but I suspect it was around $82,000 ($105,867 in 2018 dollars). I definitely recall the ending salary as $98,000 for a few reasons. First, I was complaining a lot about the boring project they had assigned me to so I expected that would eliminate me from any serious raise considerations. I was shocked to get a raise and even more shocked at the amount. Second, I was bummed they didn’t give me the extra $2,000 to make an even $100,000. Last, I was secretly interviewing with both Google and Yahoo, and upping my salary meant that I could use that number when it came time to talk compensation with them.</p>\n\n<p>I was only at Vistaprint for a little over a year before deciding to move to California to work for Yahoo. Vistaprint did go public while I was there, but since I left after a year, I didn’t see much from those stock options.</p>\n\n<p>The workload here was heavier but I still managed to stick to 40-45 hours per week. I don’t recall working any weekends, however, I do recall sometimes needing to work from home in the evening or early morning. All in all, though, the workload wasn’t that bad.</p>\n\n<h3 id=\"yahoo-2006-2011\">Yahoo (2006-2011)</h3>\n\n<p>Yahoo’s initial offer was the best I had received up to that point. In addition to a $115,000 base salary ($143,833 in 2018 dollars), it included $10,000 signing bonus, 3,500 stock options, 1,500 RSUs, and relocation expenses. This was the first time I tried to negotiate for a higher starting salary and was summarily rejected. At least I tried.</p>\n\n<p>I ended up at Yahoo through a circuitous route. I had heard that Yahoo was using my first book, <cite>Professional JavaScript for Web Developers</cite>, to teach JavaScript at the company. As such, I had an open invitation to stop by the campus if I was ever in the area. I had traveled to Mountain View to interview Google (they had found me through my second book, <cite>Professional Ajax</cite>) and so reached out to the folks at Yahoo to meet up. I didn’t realize that conversation would turn into an invitation to apply to work at Yahoo as well.</p>\n\n<p>I don’t remember a lot of my pay details after I joined. Being at Yahoo for almost five years, I got several raises and two promotions, so my pay did keep increasing.  All of that information was sent to my Yahoo corporate email address, and as such, I no longer have any of the documentation. That was intermixed with periods of layoffs and salary freezes. My initial stock options ended up worthless because the company stock price never again reached the level it was at when the options were priced. I would later get repriced stock options and more RSUs, but I don’t have specifics on that.</p>\n\n<p>By the time I left, I suspect I was making around $165,000 based on how I felt about the offer from Box.</p>\n\n<p>It’s worth noting that I left Yahoo to try to start a company with some friends and so didn’t have a regular salary for about 18 months.</p>\n\n<p>The workload at Yahoo varied based on the position I had at that time. When I first arrived at Yahoo, I was in a deep depression after moving across the country to a place where I didn’t know anyone. I found being alone in my apartment to be unbearable and so I would go into work early and leave late. Focusing on my work kept the bad thoughts out of my head and I really enjoyed working on My Yahoo, so it was a good mix. I was probably in the office from 9am to 7pm most days.</p>\n\n<p>Once I got more comfortable and started meeting people, I spent less time at the office and settled back into more of a 40-hour work week. Unfortunately, I also got more involved with writing and speaking, and those activities started to fill my nights and weekends. Before I knew it, I was basically working every day from the moment I woke up until the moment I went to sleep. Even though all of the work wasn’t Yahoo was paying me for, it was all the same type of work, so it all flowed together.</p>\n\n<p>The one thing I never did, though, was check my work email from home. I told everyone that leaving the office meant I was off the clock and the only way to reach me was to call me (I did give everyone my cell phone number). In my almost five years at Yahoo, I was only ever called once.</p>\n\n<p>There were several occasions when I had to work over the weekend, but my managers were very good about giving me that time back the next week. If I had to work over the weekend then I could choose the same number of days during the week to take off (I’d usually take Thursday and Friday the next week to get a long weekend).</p>\n\n<h3 id=\"box-2013-2016\">Box (2013-2016)</h3>\n\n<p>My offer from Box was also strong. The starting salary of $175,000 ($189,415 in 2018 dollars) was more than enough to make me happy at the time, and the offer included 50,000 stock options. Box was pre-IPO so that high stock option allocation (which I was told was higher than what they usually gave people at my level) was a big consideration for me. I negotiated for a $25,000 signing bonus, as well.</p>\n\n<p>As part of my consulting business, I would regularly give talks at different companies. I agreed to give a talk for free at Box because a friend worked there and mentioned that they were having trouble managing their growing JavaScript code base. I spoke with a few people after the talk, including the VP of engineering, and we decided to explore if working at Box was a good fit for the company and me. Through several more discussions, it seemed like a good opportunity to get back into the stability of a regular salary with some interesting problems to tackle.</p>\n\n<p>My memory is a bit hazy around what happened between joining and the end of my time at Box as this was the period when my health was on a steep decline. I think I got one raise as a Staff Software Engineer about three months after I joined, and was informed of being promoted to Principal Architect six months after I joined (although I wouldn’t get the pay increase for another six months). I’m reasonably certain the promotion pay increase bumped me to $208,000. I recall clearly that I got one last raise to push me to $220,000 during 2014 because I had started working from home full time due to my health and I thought it was very nice of them to give me a raise regardless.</p>\n\n<p>At Box, I managed my workload very carefully due to my health. I started out at 40 hours per week but as my health declined, that number went down. I definitely dipped below that level later, but since we were evaluated on our impact rather than number of hours worked, I still got consistently positive reviews from my peers and manager. Box was also gracious enough to give me flexibility to work from home for two years, and even then, to work my own schedule as my health allowed. Ironically, it was my declining health that forced me to get smarter about how I worked and really keep my hours sane. I was also not spending time writing and speaking after the first year.</p>\n\n<p>I left Box when I was no longer physically able to work from home.</p>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<p>In my sixteen year career, I averaged a pay increase of $10,000 per year, even when taking into account several years of salary freezes at MatrixOne and Yahoo. As such, I suspect I’d be making around $250,000 if I was working full time today.</p>\n\n<p>It’s also important to understand that I never asked for a raise and only negotiated other details occassionally (as mentioned in the post). I never really felt comfortable with negotiations prior to working for myself, and generally was happy with the offers I received.</p>\n\n<p>With the exception of my one year at Vistaprint (during which I was a grouchy pain in the ass), I was consistently reviewed as a top performer at my position. I wasn’t put on any sort of improvement plan and most of my feedback had to do with improving interactions and communication with colleagues. And again, with the exception of Vistaprint (because…pain in the ass), I took the feedback to heart and worked to improve in those areas.</p>\n\n<p>Being single and not having a family to support throughout my entire career meant that I had more options. I could afford to take salary that was lower than what I wanted or could get elsewhere, and I could also afford to walk away from valuable stock options (such as with Vistaprint) to find a job that was more fulfilling. I recognize that not everyone has that option, so I think it’s important to make my situation clear here.</p>\n\n<p>I have two hopes from sharing this information. First, I hope that having this information will make it easier for women to understand how much they should be paid for similar work and just how their pay should be increasing throughout their career. Second, I hope that other men who are in a similarly independent position will also share their compensation history to benefit others.</p>\n\n<p>We can all be better if we’re willing to share.</p>\n\n<h2 id=\"updates\">Updates</h2>\n\n<ul>\n  <li><strong>30-October-2018</strong> - added in details about hours worked per week based on feedback.</li>\n  <li><strong>31-October-2018</strong> - many people are sharing their salary histories on <a href="https://humanwhocodes.com/feeds/\&quot;https://news.ycombinator.com/item?id=18342996\&quot;">Hacker News</a>.</li>\n  <li><strong>09-November-2018</strong> - <cite>Business Insider</cite> has <a href="https://humanwhocodes.com/feeds/\&quot;https://www.businessinsider.com/software-engineer-salary-history-2018-11\&quot;">republished</a> this article.</li>\n</ul>\n\n<h2 id=\"references\">References</h2>\n\n<ol>\n  <li><a href="https://humanwhocodes.com/feeds/\&quot;https://www.forbes.com/sites/tanyatarr/2018/04/04/by-the-numbers-what-pay-inequality-looks-like-for-women-in-tech/\&quot;">By the Numbers: What pay inequality looks like for women in tech</a> (forbes.com)</li>\n  <li><a href="https://humanwhocodes.com/feeds/\&quot;https://www.theatlantic.com/business/archive/2017/01/women-negotiating/512174/\&quot;">Women Know When Negotiating Isn’t Worth It</a> (theatlantic.com)</li>\n</ol>\n",
            "url": "https://humanwhocodes.com/blog/2018/10/my-somewhat-complete-salary-history-software-engineer/",
            
            
            
            "tags": ["Salary","Compensation","Stock Options"],
            
            "date_published": "2018-10-30T00:00:00+00:00",
            "date_modified": "2018-10-30T00:00:00+00:00",
            
                "author": 
                ""
                
            
        },
    
        {
            "id": "https://humanwhocodes.com/blog/2018/10/extracting-command-line-arguments-nodejs/",
            "title": "Extracting command line arguments from Node.js using destructuring",
            "summary": "If you’ve worked on a Node.js command-line program, you were probably faced with the extraction of command line arguments. Node.js provides all command line arguments in the process.argv array. However, the contents of the array aren’t what you might expect.",
            "content_text": "If you’ve worked on a Node.js command-line program, you were probably faced with the extraction of command line arguments. Node.js provides all command line arguments in the process.argv array. However, the contents of the array aren’t what you might expect.\n\nWhat’s in process.argv?\n\nThe first two items in process.argv are:\n\n\n  The path to the executable running the JavaScript file\n  The path of the JavaScript file being executed\n\n\nSo the first command line argument is the third item in the array. For example, consider the following command that runs a Node.js program:\n\nnode index.js --watch\n\n\nThe contents of process.argv will look something like this (depending on your system and file root)\n\n\n  /usr/bin/node\n  /home/nzakas/projects/example/index.js\n  --watch\n\n\nWhile the first two items in the array might be useful to some, chances are that you’re only interested in --watch. Fortunately, you can use JavaScript destructuring to pick out just the command line arguments you want.\n\nUsing destructuring to extract arguments\n\nUsing JavaScript destructuring, you can separate the process.argv array into pieces and only use what you need. For example, this code separates the array into its three parts:\n\nconst [ bin, sourcePath, ...args ] = process.argv;\n\nconsole.log(args[0]);   // \"--watch\"\n\n\nHere, the bin variable receives the Node.js executable path, sourcePath receives the JavaScript filepath, and the rest element args is an array containing all of the remaining command line arguments.\n\nYou can take this one step further and just omit bin and sourcePath if you have no use for them:\n\nconst [ , , ...args ] = process.argv;\n\nconsole.log(args[0]);   // \"--watch\"\n\n\nThe two commas at the beginning of the pattern indicate that you’d like to skip over the first two items in the array and store the remaining items in the args array. You can then further process args to determine what to do next.\n\nConclusion\n\nWhile the process.argv array is a bit confusing at first, you can easily slice off just the information you’re interested in using JavaScript destructuring. Destructuring assignment is ideally suited for extracting just the information you want from an array.\n",
            "content_html": "<p>If you’ve worked on a Node.js command-line program, you were probably faced with the extraction of command line arguments. Node.js provides all command line arguments in the <code class=\"highlighter-rouge\">process.argv</code> array. However, the contents of the array aren’t what you might expect.</p>\n\n<h2 id=\"whats-in-processargv\">What’s in process.argv?</h2>\n\n<p>The first two items in <code class=\"highlighter-rouge\">process.argv</code> are:</p>\n\n<ol>\n  <li>The path to the executable running the JavaScript file</li>\n  <li>The path of the JavaScript file being executed</li>\n</ol>\n\n<p>So the first command line argument is the third item in the array. For example, consider the following command that runs a Node.js program:</p>\n\n<div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>node index.js --watch\n</code></pre></div></div>\n\n<p>The contents of <code class=\"highlighter-rouge\">process.argv</code> will look something like this (depending on your system and file root)</p>\n\n<ol>\n  <li><code class=\"highlighter-rouge\">/usr/bin/node</code></li>\n  <li><code class=\"highlighter-rouge\">/home/nzakas/projects/example/index.js</code></li>\n  <li><code class=\"highlighter-rouge\">--watch</code></li>\n</ol>\n\n<p>While the first two items in the array might be useful to some, chances are that you’re only interested in <code class=\"highlighter-rouge\">--watch</code>. Fortunately, you can use JavaScript destructuring to pick out just the command line arguments you want.</p>\n\n<h2 id=\"using-destructuring-to-extract-arguments\">Using destructuring to extract arguments</h2>\n\n<p>Using JavaScript destructuring, you can separate the <code class=\"highlighter-rouge\">process.argv</code> array into pieces and only use what you need. For example, this code separates the array into its three parts:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">const</span> <span class=\"p\">[</span> <span class=\"nx\">bin</span><span class=\"p\">,</span> <span class=\"nx\">sourcePath</span><span class=\"p\">,</span> <span class=\"p\">...</span><span class=\"nx\">args</span> <span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nx\">process</span><span class=\"p\">.</span><span class=\"nx\">argv</span><span class=\"p\">;</span>\n\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">args</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]);</span>   <span class=\"c1\">// \"--watch\"</span>\n</code></pre></div></div>\n\n<p>Here, the <code class=\"highlighter-rouge\">bin</code> variable receives the Node.js executable path, <code class=\"highlighter-rouge\">sourcePath</code> receives the JavaScript filepath, and the rest element <code class=\"highlighter-rouge\">args</code> is an array containing all of the remaining command line arguments.</p>\n\n<p>You can take this one step further and just omit <code class=\"highlighter-rouge\">bin</code> and <code class=\"highlighter-rouge\">sourcePath</code> if you have no use for them:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">const</span> <span class=\"p\">[</span> <span class=\"p\">,</span> <span class=\"p\">,</span> <span class=\"p\">...</span><span class=\"nx\">args</span> <span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nx\">process</span><span class=\"p\">.</span><span class=\"nx\">argv</span><span class=\"p\">;</span>\n\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">args</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]);</span>   <span class=\"c1\">// \"--watch\"</span>\n</code></pre></div></div>\n\n<p>The two commas at the beginning of the pattern indicate that you’d like to skip over the first two items in the array and store the remaining items in the <code class=\"highlighter-rouge\">args</code> array. You can then further process <code class=\"highlighter-rouge\">args</code> to determine what to do next.</p>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<p>While the <code class=\"highlighter-rouge\">process.argv</code> array is a bit confusing at first, you can easily slice off just the information you’re interested in using JavaScript destructuring. Destructuring assignment is ideally suited for extracting just the information you want from an array.</p>\n",
            "url": "https://humanwhocodes.com/blog/2018/10/extracting-command-line-arguments-nodejs/",
            
            
            
            "tags": ["JavaScript","Destructuring","Node.js"],
            
            "date_published": "2018-10-02T00:00:00+00:00",
            "date_modified": "2018-10-02T00:00:00+00:00",
            
                "author": 
                ""
                
            
        },
    
        {
            "id": "https://humanwhocodes.com/blog/2018/09/detecting-new-post-jekyll-netlify/",
            "title": "Detecting new posts with Jekyll and Netlify",
            "summary": "This blog has long featured the ability to subscribe by email, so you could get an email notification when a new post was published. I’ve used various services over the years to achieve this, first with FeedBurner and later with Zapier. As I’m a do-it-yourself kind of person, I never liked relying on external services to determine when a new post appeared on my blog. I figured I would never be able to build my own system When I moved this blog from the dynamic Wordpress to the static Jekyll[1]. Still, it seemed like a waste to have a service keep polling an RSS feed to see if it changed. After all, I know when my blog is being built…why can’t I just check for a new post then? It took me a little while and several iterations but eventually I figured out a way.",
            "content_text": "This blog has long featured the ability to subscribe by email, so you could get an email notification when a new post was published. I’ve used various services over the years to achieve this, first with FeedBurner and later with Zapier. As I’m a do-it-yourself kind of person, I never liked relying on external services to determine when a new post appeared on my blog. I figured I would never be able to build my own system When I moved this blog from the dynamic Wordpress to the static Jekyll[1]. Still, it seemed like a waste to have a service keep polling an RSS feed to see if it changed. After all, I know when my blog is being built…why can’t I just check for a new post then? It took me a little while and several iterations but eventually I figured out a way.\n\nStep 1: Creating a data source\n\nMost services that check for new blog posts use RSS feeds to do so. I didn’t want to use the RSS feed for two reasons:\n\n\n  Parsing RSS is a pain\n  Bandwidth concerns - My RSS feed is quite large because I include full post content\n\n\nSo I decided to create a small JSON file containing just the information I was interested in. This file lives at /feeds/firstpost.json and contains metadata related to just the most recent post on the blog. Here’s the Liquid template:\n\n---\nlayout: null\n---\n{\n    {% assign post = site.posts.first %}\n    \"id\": \"{{ post.url | absolute_url | sha1 }}\",\n    \"title\": {{ post.title | jsonify }},\n    \"date_published\": \"{{ post.date | date_to_xmlschema }}\",\n    \"summary\": {{ post.content | strip_html | truncatewords: 55 | jsonify }},\n    \"url\": \"{{ post.url | absolute_url }}\"\n}\n\n\nThis file includes just the information I need for any new blog post notification, which might include emails, tweets, Slack messages, etc. I’m using the absolute URL for the blog post as a unique identifier, but you can use anything is sufficiently unique. (You can always add or remove any data you may need if this dataset doesn’t fit your purposes.)\n\nCredit: This format is loosely based on JSON Feed[2] and the code is partially taken from Alexandre Vallières-Lagacé’s Jekyll JSON Feed implementation[3].\n\nStep 2: Deploy the data source\n\nThis is very important: the data source must already be live in order for the detectiong script to work correctly. So before going on to the next step, deploy an update to your site.\n\nStep 3: Create the new post detection script\n\nThe new post detection script checks the live data source against the one on disk after running jekyll build. If the id of the most recent post is different between the live and local versions of firstpost.json, then there is a new post. Here’s the detection script:\n\n\"use strict\";\n\nconst fs = require(\"fs\");\nconst fetch = require(\"node-fetch\");\n\n(async () =&gt; {\n\n    // fetch the live data source\n    const response = await fetch(\"https://humanwhocodes.com/feeds/firstpost.json\");\n    if (response.status !== 200) {\n        throw new Error(\"Invalid response status: \" + response.status);\n    }\n\n    const currentFirstPost = await response.json();\n    console.log(\"Current first post is \", currentFirstPost.id);\n\n    // read the locally built version of the data source\n    const newFirstPost = JSON.parse(fs.readFileSync(\"./_site/feeds/firstpost.json\", { encoding: \"utf8\" }));\n    console.log(\"New first post is \", newFirstPost.id);\n\n    // compare the two\n    if (currentFirstPost.id !== newFirstPost.id) {\n\n        console.log(\"New post detected!\");\n\n        // do something for new posts\n    }\n})();\n\n\nThis script uses node-fetch to retrieve the live data source and then compares it to the local data source. If the id is different, it outputs a message. How you respond to a new post is up to you. Some options include:\n\n\n  Send an email notification\n  Post a tweet\n  Post a Slack message\n  Emit an event to AWS CloudWatch (this is what I do)\n\n\nThe most important part of the script is that it needs to be executed after jekyll build and before the site is deployed.\n\nStep 4: Updating Netlify configuration\n\nOne of the advantages that Netlify[4] has over GitHub pages for Jekyll sites is the ability to modify the build command. The easiest way to do that is by using a netlify.toml file[5] in the root of your site. In that file, you can modify the build command. Here’s an example:\n\n[build]\n  command = \"jekyll build &amp;&amp; node _tools/newpostcheck.js\"\n  publish = \"_site\"\n\n\nThe command entry specifies the build command while publish indicates the directory into which the built web site files should be placed (most Jekyll builds use _site, and this is Netlify’s default). The command should be updated to run the new post detection script after jekyll build.\n\nNote: You must have a package.json file in the root of your repository to have Netlify install Node.js and any dependencies (such as node-fetch) automatically.\n\nStep 5: Deploy to Netlify\n\nThe last step is to deploy the changes discussed in this post. When Netlify builds your site, the new post detection script will be executed and you will be able to respond accordingly. It’s a good idea to run the script once with a new post and observe the logs just to make sure it’s working correctly before hooking up notifications.\n\nConclusion\n\nThe advantages of using a static site generator (such as Jekyll) sometimes means giving up a big of convenience as it relates to changes on your site. While dynamic solutions (such as WordPress) might offer more hooks, static solutions are often capable of similar functionality. New blog post notifications are important for most blogs and being able to achieve them using Jekyll is one more vote in favor of static sites.\n\nWhile this post focuses on Jekyll and Netlify, the same approach should work for any static site generator and any deployment system that allows you to modify the build command.\n\nReferences\n\n\n  Jekyll (jekyllrb.com)\n  JSON Feed (jsonfeed.org)\n  jekyll-json-feed (github.com)\n  Netlify (netlify.com)\n  The netlify.toml File (netlify.com)\n\n",
            "content_html": "<p>This blog has long featured the ability to subscribe by email, so you could get an email notification when a new post was published. I’ve used various services over the years to achieve this, first with FeedBurner and later with Zapier. As I’m a do-it-yourself kind of person, I never liked relying on external services to determine when a new post appeared on my blog. I figured I would never be able to build my own system When I moved this blog from the dynamic Wordpress to the static Jekyll[1]. Still, it seemed like a waste to have a service keep polling an RSS feed to see if it changed. After all, I know when my blog is being built…why can’t I just check for a new post then? It took me a little while and several iterations but eventually I figured out a way.</p>\n\n<h2 id=\"step-1-creating-a-data-source\">Step 1: Creating a data source</h2>\n\n<p>Most services that check for new blog posts use RSS feeds to do so. I didn’t want to use the RSS feed for two reasons:</p>\n\n<ol>\n  <li>Parsing RSS is a pain</li>\n  <li>Bandwidth concerns - My RSS feed is quite large because I include full post content</li>\n</ol>\n\n<p>So I decided to create a small JSON file containing just the information I was interested in. This file lives at <code class=\"highlighter-rouge\">/feeds/firstpost.json</code> and contains metadata related to just the most recent post on the blog. Here’s the Liquid template:</p>\n\n<div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>---\nlayout: null\n---\n{\n    {% assign post = site.posts.first %}\n    \"id\": \"{{ post.url | absolute_url | sha1 }}\",\n    \"title\": {{ post.title | jsonify }},\n    \"date_published\": \"{{ post.date | date_to_xmlschema }}\",\n    \"summary\": {{ post.content | strip_html | truncatewords: 55 | jsonify }},\n    \"url\": \"{{ post.url | absolute_url }}\"\n}\n</code></pre></div></div>\n\n<p>This file includes just the information I need for any new blog post notification, which might include emails, tweets, Slack messages, etc. I’m using the absolute URL for the blog post as a unique identifier, but you can use anything is sufficiently unique. (You can always add or remove any data you may need if this dataset doesn’t fit your purposes.)</p>\n\n<p><strong>Credit:</strong> This format is loosely based on JSON Feed[2] and the code is partially taken from Alexandre Vallières-Lagacé’s Jekyll JSON Feed implementation[3].</p>\n\n<h2 id=\"step-2-deploy-the-data-source\">Step 2: Deploy the data source</h2>\n\n<p>This is very important: the data source must already be live in order for the detectiong script to work correctly. So before going on to the next step, deploy an update to your site.</p>\n\n<h2 id=\"step-3-create-the-new-post-detection-script\">Step 3: Create the new post detection script</h2>\n\n<p>The new post detection script checks the live data source against the one on disk after running <code class=\"highlighter-rouge\">jekyll build</code>. If the <code class=\"highlighter-rouge\">id</code> of the most recent post is different between the live and local versions of <code class=\"highlighter-rouge\">firstpost.json</code>, then there is a new post. Here’s the detection script:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"dl\">\"</span><span class=\"s2\">use strict</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">fs</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">fs</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n<span class=\"kd\">const</span> <span class=\"nx\">fetch</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">node-fetch</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n\n<span class=\"p\">(</span><span class=\"k\">async</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n\n    <span class=\"c1\">// fetch the live data source</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">response</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"nx\">fetch</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">https://humanwhocodes.com/feeds/firstpost.json</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">response</span><span class=\"p\">.</span><span class=\"nx\">status</span> <span class=\"o\">!==</span> <span class=\"mi\">200</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">throw</span> <span class=\"k\">new</span> <span class=\"nb\">Error</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">Invalid response status: </span><span class=\"dl\">\"</span> <span class=\"o\">+</span> <span class=\"nx\">response</span><span class=\"p\">.</span><span class=\"nx\">status</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"kd\">const</span> <span class=\"nx\">currentFirstPost</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"nx\">response</span><span class=\"p\">.</span><span class=\"nx\">json</span><span class=\"p\">();</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">Current first post is </span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"nx\">currentFirstPost</span><span class=\"p\">.</span><span class=\"nx\">id</span><span class=\"p\">);</span>\n\n    <span class=\"c1\">// read the locally built version of the data source</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">newFirstPost</span> <span class=\"o\">=</span> <span class=\"nx\">JSON</span><span class=\"p\">.</span><span class=\"nx\">parse</span><span class=\"p\">(</span><span class=\"nx\">fs</span><span class=\"p\">.</span><span class=\"nx\">readFileSync</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">./_site/feeds/firstpost.json</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"p\">{</span> <span class=\"na\">encoding</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">utf8</span><span class=\"dl\">\"</span> <span class=\"p\">}));</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">New first post is </span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"nx\">newFirstPost</span><span class=\"p\">.</span><span class=\"nx\">id</span><span class=\"p\">);</span>\n\n    <span class=\"c1\">// compare the two</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">currentFirstPost</span><span class=\"p\">.</span><span class=\"nx\">id</span> <span class=\"o\">!==</span> <span class=\"nx\">newFirstPost</span><span class=\"p\">.</span><span class=\"nx\">id</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\n        <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">New post detected!</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n\n        <span class=\"c1\">// do something for new posts</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">})();</span>\n</code></pre></div></div>\n\n<p>This script uses <code class=\"highlighter-rouge\">node-fetch</code> to retrieve the live data source and then compares it to the local data source. If the <code class=\"highlighter-rouge\">id</code> is different, it outputs a message. How you respond to a new post is up to you. Some options include:</p>\n\n<ul>\n  <li>Send an email notification</li>\n  <li>Post a tweet</li>\n  <li>Post a Slack message</li>\n  <li>Emit an event to AWS CloudWatch (this is what I do)</li>\n</ul>\n\n<p>The most important part of the script is that it needs to be executed after <code class=\"highlighter-rouge\">jekyll build</code> and before the site is deployed.</p>\n\n<h2 id=\"step-4-updating-netlify-configuration\">Step 4: Updating Netlify configuration</h2>\n\n<p>One of the advantages that Netlify[4] has over GitHub pages for Jekyll sites is the ability to modify the build command. The easiest way to do that is by using a <code class=\"highlighter-rouge\">netlify.toml</code> file[5] in the root of your site. In that file, you can modify the build command. Here’s an example:</p>\n\n<div class=\"language-toml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nn\">[build]</span>\n  <span class=\"py\">command</span> <span class=\"p\">=</span> <span class=\"s\">\"jekyll build &amp;&amp; node _tools/newpostcheck.js\"</span>\n  <span class=\"py\">publish</span> <span class=\"p\">=</span> <span class=\"s\">\"_site\"</span>\n</code></pre></div></div>\n\n<p>The <code class=\"highlighter-rouge\">command</code> entry specifies the build command while <code class=\"highlighter-rouge\">publish</code> indicates the directory into which the built web site files should be placed (most Jekyll builds use <code class=\"highlighter-rouge\">_site</code>, and this is Netlify’s default). The <code class=\"highlighter-rouge\">command</code> should be updated to run the new post detection script after <code class=\"highlighter-rouge\">jekyll build</code>.</p>\n\n<p><strong>Note:</strong> You must have a <code class=\"highlighter-rouge\">package.json</code> file in the root of your repository to have Netlify install Node.js and any dependencies (such as <code class=\"highlighter-rouge\">node-fetch</code>) automatically.</p>\n\n<h2 id=\"step-5-deploy-to-netlify\">Step 5: Deploy to Netlify</h2>\n\n<p>The last step is to deploy the changes discussed in this post. When Netlify builds your site, the new post detection script will be executed and you will be able to respond accordingly. It’s a good idea to run the script once with a new post and observe the logs just to make sure it’s working correctly before hooking up notifications.</p>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<p>The advantages of using a static site generator (such as Jekyll) sometimes means giving up a big of convenience as it relates to changes on your site. While dynamic solutions (such as WordPress) might offer more hooks, static solutions are often capable of similar functionality. New blog post notifications are important for most blogs and being able to achieve them using Jekyll is one more vote in favor of static sites.</p>\n\n<p>While this post focuses on Jekyll and Netlify, the same approach should work for any static site generator and any deployment system that allows you to modify the build command.</p>\n\n<h2 id=\"references\">References</h2>\n\n<ol>\n  <li><a href="https://humanwhocodes.com/feeds/\&quot;https://jekyllrb.com/\&quot;">Jekyll</a> (jekyllrb.com)</li>\n  <li><a href="https://humanwhocodes.com/feeds/\&quot;https://jsonfeed.org\&quot;">JSON Feed</a> (jsonfeed.org)</li>\n  <li><a href="https://humanwhocodes.com/feeds/\&quot;https://github.com/vallieres/jekyll-json-feed\&quot;">jekyll-json-feed</a> (github.com)</li>\n  <li><a href="https://humanwhocodes.com/feeds/\&quot;https://netlify.com\&quot;">Netlify</a> (netlify.com)</li>\n  <li><a href="https://humanwhocodes.com/feeds/\&quot;https://www.netlify.com/docs/netlify-toml-reference/\&quot;">The netlify.toml File</a> (netlify.com)</li>\n</ol>\n",
            "url": "https://humanwhocodes.com/blog/2018/09/detecting-new-post-jekyll-netlify/",
            
            
            
            "tags": ["JavaScript","Jekyll","Netlify","Blog","Node.js"],
            
            "date_published": "2018-09-04T00:00:00+00:00",
            "date_modified": "2018-09-04T00:00:00+00:00",
            
                "author": 
                ""
                
            
        },
    
        {
            "id": "https://humanwhocodes.com/blog/2018/03/scheduling-jekyll-posts-netlify/",
            "title": "Scheduling Jekyll posts with Netlify and AWS",
            "summary": "Not too long ago I moved this site from a custom setup on Amazon Web Services (AWS) to Netlify[1]. My AWS setup was a bit cumbersome, consisting of a Jenkins machine that pulled from a private GitHub repository, built the site using Jekyll[2], and published the result to S3. The benefit of this setup over using GitHub pages was that I could schedule posts to be published later. Jenkins was run every morning and new posts were automatically published without manual intervention. (Jenkins was also triggered whenever I pushed to the GitHub repository for instant builds.)",
            "content_text": "Not too long ago I moved this site from a custom setup on Amazon Web Services (AWS) to Netlify[1]. My AWS setup was a bit cumbersome, consisting of a Jenkins machine that pulled from a private GitHub repository, built the site using Jekyll[2], and published the result to S3. The benefit of this setup over using GitHub pages was that I could schedule posts to be published later. Jenkins was run every morning and new posts were automatically published without manual intervention. (Jenkins was also triggered whenever I pushed to the GitHub repository for instant builds.)\n\nMy custom AWS setup worked well, but it cost around $14 every month and I wasn’t happy about that, especially given how infrequently I’ve been writing new posts in the past couple of years. I decided in the short-term to just move this site to Netlify and not worry about scheduling posts because I didn’t think I would be writing that much for the foreseeable future. If I ever wanted to post something, I could do so manually, and in the meantime I’d be saving $14 a month. As it turned out, scheduling posts on Netlify was a lot simpler than I thought it would be. All I needed was an AWS Lambda function and an AWS Cloudwatch event.\n\nNote: This post assumes you already have a site setup on Netlify using a GitHub repository. While I assume the solution works the same for other source code repository types, like BitBucket, I’m not entirely sure. This post also assumes that you have an AWS account.\n\nConfiguring Jekyll\n\nBy default, Jekyll generates all blog posts in the _posts directory regardless of the publish date associated with each. That obviously doesn’t work well when you want to schedule posts to be published in the future, so the first step is to configure Jekyll to ignore future posts. To do so, add this key to Jekyll’s _config.yml:\n\nfuture: false\n\n\nSetting future to false tells Jekyll to skip any posts with a publish date in the future. You can then set the date field in the front matter of a post to a future date and know that the post will not be generated until then, like this:\n\n---\nlayout: post\ntitle: \"My future post\"\ndate: 2075-01-01 00:00:00\n---\n\n\nThis post will be published on January 1, 2075, so it will not be built by Jekyll until that point in time. I find it easier to schedule all posts for midnight so that whenever the site gets published, so long as the date matches, the post will always be generated.\n\nGenerating a Netlify build hook\n\nOne of the things I like about Netlify is that you can trigger a new site build whenever you want, either manually or programmatically. Netlify has a useful feature called a build hook[3], which is a URL that triggers a new build. To generate a new build hook, go to the Netlify dashboard for your domain and go Site Settings and then to the Build &amp; Deploy page. When you scroll down, you’ll see a section for Build Hooks. Click “Add build hook”, give your new hook a name (something like “Daily Cron Job” would be appropriate here), and choose the branch to build from.\n\n\n\nYou’ll be presented with a new URL that looks something like this:\n\nhttps://api.netlify.com/build_hooks/{some long unique identifier}\n\n\nWhenever you send a POST request to the build hook, Netlify will pull the latest files from the GitHub repository, build the site, and deploy it. This is quite useful because you don’t need to worry about authenticating against the Netlify API; you can use this URL without credentials. Just make sure to keep this URL a secret. You can see the URL in your list of build hooks on the same page.\n\n\n\n(Don’t worry, the build hook URL in the screenshot has already been deleted.)\n\nCreating the AWS Lambda function\n\nAWS Lambda functions are standalone functions that don’t require you to setup and manage a server. As such, they are especially useful when you have very simple processes to run infrequently. All you need to do is create a Lambda function that sends a POST request to the build URL.\n\nThe first step is to create a local Node.js application that will become the executable code for the Lamda function. Create a new directory (build-netlify-lambda, for example) and install the request module, which will make it easy to send an HTTP request:\n\n$ cd build-netlify-lambda\n$ npm i request\n\n\nYou can create a package.json file if you want, but it’s not necessary.\n\nNext, create a file called index.js inside of build-netlify-lamda and paste the following code into it:\n\n\"use strict\";\n\nconst request = require(\"request\");\n\nexports.handler = (event, context, callback) =&gt; {\n    request.post(process.env.URL, callback);\n};\n\n\nAll Lamda functions export a handler function that receives three parameters: an event object with information about the event that triggered the function call, a context object with information about the runtime environment, and a callback function to call when the function is finished. In this case, you only need the callback function. The Netlify build hook will be stored in an environment variable called URL in the Lambda function, which you access using process.env.URL. That value is passed directly to request.post() along with the callback, making this Lamda function as small as possible.\n\nNow, you just need to zip up the entire build-netlify-lambda directory so it can be deployed to AWS Lambda:\n\n$ zip -r build-netlify-lamda.zip index.js node_modules/\n\n\nMake sure the top level of the zip file has both index.js and node_modules/. If you mistakenly zip up the entire directory so that build-netlify-lambda is at the top level, AWS will not find the executable files.\n\nThe last step is to upload this zip file to AWS. To do so, go to the AWS Console[4] and click “Create Function”.\n\n\n\nYou’ll be presented with a form to fill out. Enter a name for the function, such as “publishNetlifySiteExample” and select one of the Node.js options as your runtime. The last field is for the Lambda role. If you already have other roles defined, you can use one that already exists; otherwise, select “Create role from template(s)”. This Lambda function doesn’t need a lot of permissions, so you can just add “Basic Edge Lambda Permissions” to allow access to logs. Click “Create Function”.\n\n\n\nWhen the Lambda function has been created, a new screen will load. This screen is a bit difficult to parse due to the amount of information on it. If this is your first Lambda function, don’t worry, you’ll get used to it quickly. Scroll down to the section called “Function Code” and select “Upload a .ZIP file” from the “Code entry type” dropdown. You can then select your zip file to upload to the Lambda function.\n\nBeneath the “Function Code” section is the “Environment Variables” section. Create a new environment variable named URL with its value set to your Netlify build hook. Once that’s complete, click “Save” at the top of the screen to upload the zip file and save your environment variables.\n\nYou can test the Lambda function by creating a new test event. At the top of the screen, click the “Select a Test Event Dropdown” and select “Configure Test Events”.\n\n\n\nA new dialog will open to create a test event. Since this Lambda function doesn’t use any incoming data, you can keep the default settings and give the event a meaningful name like “TestNetlifyBuild”. Click the “Create” button to save the test event.\n\n\n\nIn order to run the test, make sure “TestNetlifyBuild” is selected in the dropdown at the top of the screen and click the “Test” button. This will execute the function. If you look at your Netlify Deploys dashboard, you should see a new build begin.\n\nSetting up the Cloudwatch event\n\nAt this point, the Lambda function is operational and will trigger a new Netlify deploy when executed. That’s somewhat useful but isn’t much more powerful than logging into the Netlify dashboard and manually triggering a build. The goal is to have Netlify build automatically on a certain schedule and Cloudwatch is the perfect solution.\n\nCloudwatch is a service that generates events based on any number of criteria. You can use it to monitor your services on a variety of criteria and then respond with certain actions. For the purposes of this post, Cloudwatch will be set to run periodically and then trigger the Lambda function that builds the Netlify website.\n\nOn the Cloudwatch console[5], click “Events” on the left menu and then the “Create Rule” button.\n\n\n\nUnder “Event Source” select “Schedule”. You’re now able to select the frequency with which you want the event to be triggered. You can select an interval of minutes, hours, or days, or you can create a custom schedule using a Cron expression. (If you want to control the exact time that an event is triggered, it’s best to use a Cron expression.) Under “Targets”, select “Lambda function” and your function name. There’s no need to configure the version/alias or input because the Lambda function isn’t using any of those. Click the “Configure Details” button. You’ll be brought to a second dialog.\n\n\n\nIn this dialog, fill in a meaningful name for your event (and optional description) and then click “Create Rule”. Rules are on by default so your new event should be triggered at the next interval. The Lambda function will then be called and regenerate the website.\n\nConclusion\n\nThis website has been running on the setup described in this post for over a month. In fact, this post was written ahead of time and published using my AWS Cloudwatch event and Lambda function. The functionality is the same as my previous setup with Jenkins and S3, however, this setup costs $0 compared to $14. I only run my Cloudwatch event two times a week (I’m not posting much these days) and each run of the Lambda function takes under two seconds to complete, which means I fall into the free tier and I’m not charged anything.\n\nThe Lambda free tier is one million requests and 400,000 GB-seconds per month. A GB-second is one second of execution time with 1 GB of allocated memory. The Lambda function created in this post uses the default memory allocation of 128 MB. If you figure out the match, you’ll still be in the free tier even if you run your Lambda function every hour of the day each month. As the Lambda function only sends off an HTTPS request and then Netlify does the build, the real work isn’t done inside of Lambda.\n\nI’ve found this setup to be very simple and cost-efficient, not to mention a lot less complicated. I no longer have to log into a Jenkins server to figure out why a build of the website failed. There’s just one small function to manage and all of the important information is displayed in the Netlify dashboard.\n\nThe most important thing to remember when using this setup is to set the date field of each post to some time in the future. When the Cloudwatch event triggers the Lambda function to execute, only those posts with a date in the past will be generated. You can play around with the timing of the Cloudwatch event to best suit your frequency of posts, and keep in mind that Netlify automatically builds the site whenever a change is pushed, so you still have just-in-time updates as needed.\n\nReferences\n\n\n  Netlify (netlify.com)\n  Jekyll (jekyllrb.com/)\n  Netlify Webhooks - Incoming Hooks (netlify.com)\n  AWS Console - Lambda (console.aws.amazon.com)\n  AWS Console - Cloudwatch (console.aws.amazon.com)\n\n",
            "content_html": "<p>Not too long ago I moved this site from a custom setup on Amazon Web Services (AWS) to Netlify[1]. My AWS setup was a bit cumbersome, consisting of a Jenkins machine that pulled from a private GitHub repository, built the site using Jekyll[2], and published the result to S3. The benefit of this setup over using GitHub pages was that I could schedule posts to be published later. Jenkins was run every morning and new posts were automatically published without manual intervention. (Jenkins was also triggered whenever I pushed to the GitHub repository for instant builds.)</p>\n\n<p>My custom AWS setup worked well, but it cost around $14 every month and I wasn’t happy about that, especially given how infrequently I’ve been writing new posts in the past couple of years. I decided in the short-term to just move this site to Netlify and not worry about scheduling posts because I didn’t think I would be writing that much for the foreseeable future. If I ever wanted to post something, I could do so manually, and in the meantime I’d be saving $14 a month. As it turned out, scheduling posts on Netlify was a lot simpler than I thought it would be. All I needed was an AWS Lambda function and an AWS Cloudwatch event.</p>\n\n<p><strong>Note:</strong> This post assumes you already have a site setup on Netlify using a GitHub repository. While I assume the solution works the same for other source code repository types, like BitBucket, I’m not entirely sure. This post also assumes that you have an AWS account.</p>\n\n<h2 id=\"configuring-jekyll\">Configuring Jekyll</h2>\n\n<p>By default, Jekyll generates all blog posts in the <code class=\"highlighter-rouge\">_posts</code> directory regardless of the publish date associated with each. That obviously doesn’t work well when you want to schedule posts to be published in the future, so the first step is to configure Jekyll to ignore future posts. To do so, add this key to Jekyll’s <code class=\"highlighter-rouge\">_config.yml</code>:</p>\n\n<div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>future: false\n</code></pre></div></div>\n\n<p>Setting <code class=\"highlighter-rouge\">future</code> to <code class=\"highlighter-rouge\">false</code> tells Jekyll to skip any posts with a publish date in the future. You can then set the <code class=\"highlighter-rouge\">date</code> field in the front matter of a post to a future date and know that the post will not be generated until then, like this:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"o\">---</span>\n<span class=\"nx\">layout</span><span class=\"p\">:</span> <span class=\"nx\">post</span>\n<span class=\"nx\">title</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">My future post</span><span class=\"dl\">\"</span>\n<span class=\"nx\">date</span><span class=\"p\">:</span> <span class=\"mi\">2075</span><span class=\"o\">-</span><span class=\"mi\">01</span><span class=\"o\">-</span><span class=\"mi\">01</span> <span class=\"mi\">00</span><span class=\"p\">:</span><span class=\"mi\">00</span><span class=\"p\">:</span><span class=\"mi\">00</span>\n<span class=\"o\">---</span>\n</code></pre></div></div>\n\n<p>This post will be published on January 1, 2075, so it will not be built by Jekyll until that point in time. I find it easier to schedule all posts for midnight so that whenever the site gets published, so long as the date matches, the post will always be generated.</p>\n\n<h2 id=\"generating-a-netlify-build-hook\">Generating a Netlify build hook</h2>\n\n<p>One of the things I like about Netlify is that you can trigger a new site build whenever you want, either manually or programmatically. Netlify has a useful feature called a build hook[3], which is a URL that triggers a new build. To generate a new build hook, go to the Netlify dashboard for your domain and go Site Settings and then to the Build &amp; Deploy page. When you scroll down, you’ll see a section for Build Hooks. Click “Add build hook”, give your new hook a name (something like “Daily Cron Job” would be appropriate here), and choose the branch to build from.</p>\n\n<p><img src="https://humanwhocodes.com/feeds/\&quot;https://humanwhocodes.com/images/posts/netlify-build-hooks.png\&quot;" alt=\"Netlify create build hook dialog\" /></p>\n\n<p>You’ll be presented with a new URL that looks something like this:</p>\n\n<div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>https://api.netlify.com/build_hooks/{some long unique identifier}\n</code></pre></div></div>\n\n<p>Whenever you send a <code class=\"highlighter-rouge\">POST</code> request to the build hook, Netlify will pull the latest files from the GitHub repository, build the site, and deploy it. This is quite useful because you don’t need to worry about authenticating against the Netlify API; you can use this URL without credentials. Just make sure to keep this URL a secret. You can see the URL in your list of build hooks on the same page.</p>\n\n<p><img src="https://humanwhocodes.com/feeds/\&quot;https://humanwhocodes.com/images/posts/netlify-build-hooks-2.png\&quot;" alt=\"Netlify build hooks list\" /></p>\n\n<p>(Don’t worry, the build hook URL in the screenshot has already been deleted.)</p>\n\n<h2 id=\"creating-the-aws-lambda-function\">Creating the AWS Lambda function</h2>\n\n<p>AWS Lambda functions are standalone functions that don’t require you to setup and manage a server. As such, they are especially useful when you have very simple processes to run infrequently. All you need to do is create a Lambda function that sends a <code class=\"highlighter-rouge\">POST</code> request to the build URL.</p>\n\n<p>The first step is to create a local Node.js application that will become the executable code for the Lamda function. Create a new directory (<code class=\"highlighter-rouge\">build-netlify-lambda</code>, for example) and install the <code class=\"highlighter-rouge\">request</code> module, which will make it easy to send an HTTP request:</p>\n\n<div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>$ cd build-netlify-lambda\n$ npm i request\n</code></pre></div></div>\n\n<p>You can create a <code class=\"highlighter-rouge\">package.json</code> file if you want, but it’s not necessary.</p>\n\n<p>Next, create a file called <code class=\"highlighter-rouge\">index.js</code> inside of <code class=\"highlighter-rouge\">build-netlify-lamda</code> and paste the following code into it:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"dl\">\"</span><span class=\"s2\">use strict</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">request</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">request</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n\n<span class=\"nx\">exports</span><span class=\"p\">.</span><span class=\"nx\">handler</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">event</span><span class=\"p\">,</span> <span class=\"nx\">context</span><span class=\"p\">,</span> <span class=\"nx\">callback</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"nx\">post</span><span class=\"p\">(</span><span class=\"nx\">process</span><span class=\"p\">.</span><span class=\"nx\">env</span><span class=\"p\">.</span><span class=\"nx\">URL</span><span class=\"p\">,</span> <span class=\"nx\">callback</span><span class=\"p\">);</span>\n<span class=\"p\">};</span>\n</code></pre></div></div>\n\n<p>All Lamda functions export a <code class=\"highlighter-rouge\">handler</code> function that receives three parameters: an <code class=\"highlighter-rouge\">event</code> object with information about the event that triggered the function call, a <code class=\"highlighter-rouge\">context</code> object with information about the runtime environment, and a <code class=\"highlighter-rouge\">callback</code> function to call when the function is finished. In this case, you only need the <code class=\"highlighter-rouge\">callback</code> function. The Netlify build hook will be stored in an environment variable called <code class=\"highlighter-rouge\">URL</code> in the Lambda function, which you access using <code class=\"highlighter-rouge\">process.env.URL</code>. That value is passed directly to <code class=\"highlighter-rouge\">request.post()</code> along with the <code class=\"highlighter-rouge\">callback</code>, making this Lamda function as small as possible.</p>\n\n<p>Now, you just need to zip up the entire <code class=\"highlighter-rouge\">build-netlify-lambda</code> directory so it can be deployed to AWS Lambda:</p>\n\n<div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>$ zip -r build-netlify-lamda.zip index.js node_modules/\n</code></pre></div></div>\n\n<p>Make sure the top level of the zip file has both <code class=\"highlighter-rouge\">index.js</code> and <code class=\"highlighter-rouge\">node_modules/</code>. If you mistakenly zip up the entire directory so that <code class=\"highlighter-rouge\">build-netlify-lambda</code> is at the top level, AWS will not find the executable files.</p>\n\n<p>The last step is to upload this zip file to AWS. To do so, go to the AWS Console[4] and click “Create Function”.</p>\n\n<p><img src="https://humanwhocodes.com/feeds/\&quot;https://humanwhocodes.com/images/posts/aws-lambda-create.png\&quot;" alt=\"AWS Lambda create function dialog\" /></p>\n\n<p>You’ll be presented with a form to fill out. Enter a name for the function, such as “publishNetlifySiteExample” and select one of the Node.js options as your runtime. The last field is for the Lambda role. If you already have other roles defined, you can use one that already exists; otherwise, select “Create role from template(s)”. This Lambda function doesn’t need a lot of permissions, so you can just add “Basic Edge Lambda Permissions” to allow access to logs. Click “Create Function”.</p>\n\n<p><img src="https://humanwhocodes.com/feeds/\&quot;https://humanwhocodes.com/images/posts/aws-lambda-create.png\&quot;" alt=\"AWS Lambda upload code and set environment variable\" /></p>\n\n<p>When the Lambda function has been created, a new screen will load. This screen is a bit difficult to parse due to the amount of information on it. If this is your first Lambda function, don’t worry, you’ll get used to it quickly. Scroll down to the section called “Function Code” and select “Upload a .ZIP file” from the “Code entry type” dropdown. You can then select your zip file to upload to the Lambda function.</p>\n\n<p>Beneath the “Function Code” section is the “Environment Variables” section. Create a new environment variable named <code class=\"highlighter-rouge\">URL</code> with its value set to your Netlify build hook. Once that’s complete, click “Save” at the top of the screen to upload the zip file and save your environment variables.</p>\n\n<p>You can test the Lambda function by creating a new test event. At the top of the screen, click the “Select a Test Event Dropdown” and select “Configure Test Events”.</p>\n\n<p><img src="https://humanwhocodes.com/feeds/\&quot;https://humanwhocodes.com/images/posts/aws-lambda-test-dropdown.png\&quot;" alt=\"AWS Lambda Test Event Dropdown\" /></p>\n\n<p>A new dialog will open to create a test event. Since this Lambda function doesn’t use any incoming data, you can keep the default settings and give the event a meaningful name like “TestNetlifyBuild”. Click the “Create” button to save the test event.</p>\n\n<p><img src="https://humanwhocodes.com/feeds/\&quot;https://humanwhocodes.com/images/posts/aws-lambda-test-create.png\&quot;" alt=\"AWS Lambda Test Event Create Dialog\" /></p>\n\n<p>In order to run the test, make sure “TestNetlifyBuild” is selected in the dropdown at the top of the screen and click the “Test” button. This will execute the function. If you look at your Netlify Deploys dashboard, you should see a new build begin.</p>\n\n<h2 id=\"setting-up-the-cloudwatch-event\">Setting up the Cloudwatch event</h2>\n\n<p>At this point, the Lambda function is operational and will trigger a new Netlify deploy when executed. That’s somewhat useful but isn’t much more powerful than logging into the Netlify dashboard and manually triggering a build. The goal is to have Netlify build automatically on a certain schedule and Cloudwatch is the perfect solution.</p>\n\n<p>Cloudwatch is a service that generates events based on any number of criteria. You can use it to monitor your services on a variety of criteria and then respond with certain actions. For the purposes of this post, Cloudwatch will be set to run periodically and then trigger the Lambda function that builds the Netlify website.</p>\n\n<p>On the Cloudwatch console[5], click “Events” on the left menu and then the “Create Rule” button.</p>\n\n<p><img src="https://humanwhocodes.com/feeds/\&quot;https://humanwhocodes.com/images/posts/aws-cloudwatch-create.png\&quot;" alt=\"AWS Cloudwatch Create Rule Dialog - Step 1\" /></p>\n\n<p>Under “Event Source” select “Schedule”. You’re now able to select the frequency with which you want the event to be triggered. You can select an interval of minutes, hours, or days, or you can create a custom schedule using a Cron expression. (If you want to control the exact time that an event is triggered, it’s best to use a Cron expression.) Under “Targets”, select “Lambda function” and your function name. There’s no need to configure the version/alias or input because the Lambda function isn’t using any of those. Click the “Configure Details” button. You’ll be brought to a second dialog.</p>\n\n<p><img src="https://humanwhocodes.com/feeds/\&quot;https://humanwhocodes.com/images/posts/aws-cloudwatch-create-2.png\&quot;" alt=\"AWS Cloudwatch Create Rule Dialog - Step 2\" /></p>\n\n<p>In this dialog, fill in a meaningful name for your event (and optional description) and then click “Create Rule”. Rules are on by default so your new event should be triggered at the next interval. The Lambda function will then be called and regenerate the website.</p>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<p>This website has been running on the setup described in this post for over a month. In fact, this post was written ahead of time and published using my AWS Cloudwatch event and Lambda function. The functionality is the same as my previous setup with Jenkins and S3, however, this setup costs $0 compared to $14. I only run my Cloudwatch event two times a week (I’m not posting much these days) and each run of the Lambda function takes under two seconds to complete, which means I fall into the free tier and I’m not charged anything.</p>\n\n<p>The Lambda free tier is one million requests and 400,000 GB-seconds per month. A GB-second is one second of execution time with 1 GB of allocated memory. The Lambda function created in this post uses the default memory allocation of 128 MB. If you figure out the match, you’ll still be in the free tier even if you run your Lambda function every hour of the day each month. As the Lambda function only sends off an HTTPS request and then Netlify does the build, the real work isn’t done inside of Lambda.</p>\n\n<p>I’ve found this setup to be very simple and cost-efficient, not to mention a lot less complicated. I no longer have to log into a Jenkins server to figure out why a build of the website failed. There’s just one small function to manage and all of the important information is displayed in the Netlify dashboard.</p>\n\n<p>The most important thing to remember when using this setup is to set the <code class=\"highlighter-rouge\">date</code> field of each post to some time in the future. When the Cloudwatch event triggers the Lambda function to execute, only those posts with a <code class=\"highlighter-rouge\">date</code> in the past will be generated. You can play around with the timing of the Cloudwatch event to best suit your frequency of posts, and keep in mind that Netlify automatically builds the site whenever a change is pushed, so you still have just-in-time updates as needed.</p>\n\n<h2 id=\"references\">References</h2>\n\n<ol>\n  <li><a href="https://humanwhocodes.com/feeds/\&quot;https://www.netlify.com\&quot;">Netlify</a> (netlify.com)</li>\n  <li><a href="https://humanwhocodes.com/feeds/\&quot;https://jekyllrb.com/\&quot;">Jekyll</a> (jekyllrb.com/)</li>\n  <li><a href="https://humanwhocodes.com/feeds/\&quot;https://www.netlify.com/docs/webhooks/#incoming-webhooks\"">Netlify Webhooks - Incoming Hooks</a> (netlify.com)</li>\n  <li><a href="https://humanwhocodes.com/feeds/\&quot;https://console.aws.amazon.com/lambda/\&quot;">AWS Console - Lambda</a> (console.aws.amazon.com)</li>\n  <li><a href="https://humanwhocodes.com/feeds/\&quot;https://console.aws.amazon.com/cloudwatch/\&quot;">AWS Console - Cloudwatch</a> (console.aws.amazon.com)</li>\n</ol>\n",
            "url": "https://humanwhocodes.com/blog/2018/03/scheduling-jekyll-posts-netlify/",
            
            
            
            "tags": ["Netlify","Static Site","AWS","Lambda","Cloudwatch","Jekyll"],
            
            "date_published": "2018-03-27T00:00:00+00:00",
            "date_modified": "2018-03-27T00:00:00+00:00",
            
                "author": 
                ""
                
            
        },
    
        {
            "id": "https://humanwhocodes.com/blog/2018/02/the-inception-of-eslint/",
            "title": "The inception of ESLint",
            "summary": "If you’re like me, you probably use a lot of open source tools every day without thinking about how they got started. Few projects share the “why” of their creation: the actual problem they were trying to solve and when they first came across that problem. You can, of course, benefit from open source projects without understanding their origin story, but I always find it interesting to hear about how it all started.",
            "content_text": "If you’re like me, you probably use a lot of open source tools every day without thinking about how they got started. Few projects share the “why” of their creation: the actual problem they were trying to solve and when they first came across that problem. You can, of course, benefit from open source projects without understanding their origin story, but I always find it interesting to hear about how it all started.\n\nI recently realized that I’d never shared the origin story of ESLint. I’ve shared some of the decisions I made along the way in previous posts but never the initial domino that fell and led to ESLint’s creation. As you will see, ESLint wasn’t created through some divine intervention or stroke of insight, but rather through a series of events that eventually built up to ESLint’s creation.\n\nThe bug\n\nI was still fairly new at Box when a teammate was working on a strange bug. A client had reported problems using the web application in Internet Explorer 7 (we were probably one of the last companies supporting IE7 at that point). A developer had apparently used the native XMLHttpRequest object in some JavaScript code instead of our in-house wrapper. This wasn’t a problem for any other browser, and there wasn’t a problem testing with IE7 internally. The problem occurred because the client had an internal security policy that disabled ActiveX in Internet Explorer, and since the native XMLHttpRequest object in IE7 was really just a wrapper around the ActiveX object, it was blocked as well.\n\nThe solution was easy enough, just make sure everyone knows to use the in-house Ajax wrapper instead of the native XMLHttpRequest object. But how could we enforce this? It turned out that Box had a JavaScript “linter” as part of the build system. I put the word linter in quotes because it was really just a series of regular expressions that were run against JavaScript code. For this case, my teammate added a regular expression for “XMLHttpRequest” and that was the solution. The build would break going forward if someone tried to commit a JavaScript file matching that pattern.\n\nIn my experience, using regular expressions on source code was never a good idea. I wished that there was a better way to do checks like this one during the build. I figured that someone must have already solved this problem and so I started looking for solutions.\n\nCould it be JSHint?\n\nThe first thing I did was email the maintainer of JSHint at that time, Anton Kovalyov[1]. I had remembered reading a blog post[2] that said JSHint was planning to support plugins but couldn’t find any information about that feature being implemented. From past experience contributing to JSHint and from modifying JSLint for a project at Yahoo, I knew JSHint hadn’t initially been setup to support plugins, and without formal support there wouldn’t be an easy way to modify JSHint to do what I wanted.\n\nAnton informed me that the plugin proposal had stalled and didn’t look like it would be implemented. I was disappointed, as this seemed like the most direct path to solving the problem. I thanked him and asked him to please not be offended if I create a linter that did what I needed. I wanted to support JSHint, but I felt like this was a problem that needed to be solved with JSHint or without it.\n\nThe inspiration\n\nAfter digging around in the build system at Box, I found there was actually a PHP linter running in addition to the makeshift JavaScript linter. The PHP linter, however, was a lot more involved that the JavaScript one. Instead of using regular expressions, the PHP linter parsed the code into an abstract syntax tree (AST) and then inspected the AST for the patterns to report.\n\nI was probably shaking my head “yes” as I read through that code. Immediately I realized that this was exactly what I needed to do for JavaScript. If only there was some way to parse JavaScript into an AST and then inspect the AST for problems.\n\nThe groundwork\n\nWith all of this floating around in my brain, I invited Ariya Hidayat[3] to give a talk at Box about whatever topic he pleased. It just so happened that he gave a talk on Esprima[4], the JavaScript parser he wrote in JavaScript. During that talk, Ariya discussed why having an AST representation of JavaScript was useful and referenced several already-existing tools built on top of Esprima. Among those tools were estraverse for traversing the AST and escope for scope analysis, both written by Yusuke Suzuki.\n\nAs Ariya continued talking and giving examples of the types of problems an AST can solve, the idea for a new tool formed in my head. It made sense to me that there should be one tool that could perform all of the evaluations Ariya mentioned. After all, they are all just using the AST for different purposes. Why not have one AST they all can use?\n\nThe beginning\n\nThanks largely to the availability of Esprima, estraverse, and escope, I was able to put together the first prototype of ESLint over a couple of weekends. To me, these three utilities represented everything that I needed to create a new tool that could easily find problem patterns in JavaScript code. If I had to create those from scratch, I have no doubt that ESLint would not exist today. Building on top of those tools, I was able to iterate quickly, and eventually, the tool you know today as ESLint was born.\n\n(I feel it’s important to point out that I was not the only one looking to create an AST-based linter at the time. JSCS[5] was also under development at around the same time, and current ESLint maintainer Ilya Volodin was working on his own project before discovering ESLint. If I had not come up with something like ESLint then someone else undoubtedly would have. All of the pieces were already out there thanks to Ariya and Yusuke, someone just had to put them together in a useful way.)\n\nReferences\n\n\n  Anton Kovalyov (antonkovalyov.com)\n  JSHint 3 Plans (jshint.com)\n  Ariya Hidayat (ariya.io)\n  JavaScript Code Analysis (speakerdeck.com)\n  JSCS (jscs.info)\n\n",
            "content_html": "<p>If you’re like me, you probably use a lot of open source tools every day without thinking about how they got started. Few projects share the “why” of their creation: the actual problem they were trying to solve and when they first came across that problem. You can, of course, benefit from open source projects without understanding their origin story, but I always find it interesting to hear about how it all started.</p>\n\n<p>I recently realized that I’d never shared the origin story of ESLint. I’ve shared some of the decisions I made along the way in previous posts but never the initial domino that fell and led to ESLint’s creation. As you will see, ESLint wasn’t created through some divine intervention or stroke of insight, but rather through a series of events that eventually built up to ESLint’s creation.</p>\n\n<h2 id=\"the-bug\">The bug</h2>\n\n<p>I was still fairly new at Box when a teammate was working on a strange bug. A client had reported problems using the web application in Internet Explorer 7 (we were probably one of the last companies supporting IE7 at that point). A developer had apparently used the native <code class=\"highlighter-rouge\">XMLHttpRequest</code> object in some JavaScript code instead of our in-house wrapper. This wasn’t a problem for any other browser, and there wasn’t a problem testing with IE7 internally. The problem occurred because the client had an internal security policy that disabled ActiveX in Internet Explorer, and since the native <code class=\"highlighter-rouge\">XMLHttpRequest</code> object in IE7 was really just a wrapper around the ActiveX object, it was blocked as well.</p>\n\n<p>The solution was easy enough, just make sure everyone knows to use the in-house Ajax wrapper instead of the native <code class=\"highlighter-rouge\">XMLHttpRequest</code> object. But how could we enforce this? It turned out that Box had a JavaScript “linter” as part of the build system. I put the word linter in quotes because it was really just a series of regular expressions that were run against JavaScript code. For this case, my teammate added a regular expression for “XMLHttpRequest” and that was the solution. The build would break going forward if someone tried to commit a JavaScript file matching that pattern.</p>\n\n<p>In my experience, using regular expressions on source code was never a good idea. I wished that there was a better way to do checks like this one during the build. I figured that someone must have already solved this problem and so I started looking for solutions.</p>\n\n<h2 id=\"could-it-be-jshint\">Could it be JSHint?</h2>\n\n<p>The first thing I did was email the maintainer of JSHint at that time, Anton Kovalyov[1]. I had remembered reading a blog post[2] that said JSHint was planning to support plugins but couldn’t find any information about that feature being implemented. From past experience contributing to JSHint and from modifying JSLint for a project at Yahoo, I knew JSHint hadn’t initially been setup to support plugins, and without formal support there wouldn’t be an easy way to modify JSHint to do what I wanted.</p>\n\n<p>Anton informed me that the plugin proposal had stalled and didn’t look like it would be implemented. I was disappointed, as this seemed like the most direct path to solving the problem. I thanked him and asked him to please not be offended if I create a linter that did what I needed. I wanted to support JSHint, but I felt like this was a problem that needed to be solved with JSHint or without it.</p>\n\n<h2 id=\"the-inspiration\">The inspiration</h2>\n\n<p>After digging around in the build system at Box, I found there was actually a PHP linter running in addition to the makeshift JavaScript linter. The PHP linter, however, was a lot more involved that the JavaScript one. Instead of using regular expressions, the PHP linter parsed the code into an abstract syntax tree (AST) and then inspected the AST for the patterns to report.</p>\n\n<p>I was probably shaking my head “yes” as I read through that code. Immediately I realized that this was exactly what I needed to do for JavaScript. If only there was some way to parse JavaScript into an AST and then inspect the AST for problems.</p>\n\n<h2 id=\"the-groundwork\">The groundwork</h2>\n\n<p>With all of this floating around in my brain, I invited Ariya Hidayat[3] to give a talk at Box about whatever topic he pleased. It just so happened that he gave a talk on Esprima[4], the JavaScript parser he wrote in JavaScript. During that talk, Ariya discussed why having an AST representation of JavaScript was useful and referenced several already-existing tools built on top of Esprima. Among those tools were estraverse for traversing the AST and escope for scope analysis, both written by Yusuke Suzuki.</p>\n\n<p>As Ariya continued talking and giving examples of the types of problems an AST can solve, the idea for a new tool formed in my head. It made sense to me that there should be one tool that could perform all of the evaluations Ariya mentioned. After all, they are all just using the AST for different purposes. Why not have one AST they all can use?</p>\n\n<h2 id=\"the-beginning\">The beginning</h2>\n\n<p>Thanks largely to the availability of Esprima, estraverse, and escope, I was able to put together the first prototype of ESLint over a couple of weekends. To me, these three utilities represented everything that I needed to create a new tool that could easily find problem patterns in JavaScript code. If I had to create those from scratch, I have no doubt that ESLint would not exist today. Building on top of those tools, I was able to iterate quickly, and eventually, the tool you know today as ESLint was born.</p>\n\n<p>(I feel it’s important to point out that I was not the only one looking to create an AST-based linter at the time. JSCS[5] was also under development at around the same time, and current ESLint maintainer Ilya Volodin was working on his own project before discovering ESLint. If I had not come up with something like ESLint then someone else undoubtedly would have. All of the pieces were already out there thanks to Ariya and Yusuke, someone just had to put them together in a useful way.)</p>\n\n<h2 id=\"references\">References</h2>\n\n<ol>\n  <li><a href="https://humanwhocodes.com/feeds/\&quot;https://www.antonkovalyov.com/\&quot;">Anton Kovalyov</a> (antonkovalyov.com)</li>\n  <li><a href="https://humanwhocodes.com/feeds/\&quot;http://jshint.com/blog/jshint-3-plans/\&quot;">JSHint 3 Plans</a> (jshint.com)</li>\n  <li><a href="https://humanwhocodes.com/feeds/\&quot;https://ariya.io\&quot;">Ariya Hidayat</a> (ariya.io)</li>\n  <li><a href="https://humanwhocodes.com/feeds/\&quot;https://speakerdeck.com/ariya/javascript-code-analysis\&quot;">JavaScript Code Analysis</a> (speakerdeck.com)</li>\n  <li><a href="https://humanwhocodes.com/feeds/\&quot;http://jscs.info/\&quot;">JSCS</a> (jscs.info)</li>\n</ol>\n",
            "url": "https://humanwhocodes.com/blog/2018/02/the-inception-of-eslint/",
            
            
            
            "tags": ["JavaScript","ESLint","ECMAScript","AST"],
            
            "date_published": "2018-02-27T00:00:00+00:00",
            "date_modified": "2018-02-27T00:00:00+00:00",
            
                "author": 
                ""
                
            
        },
    
        {
            "id": "https://humanwhocodes.com/blog/2016/10/the-ecmascript-2016-change-you-probably-dont-know/",
            "title": "The ECMAScript 2016 change you probably don't know",
            "summary": "Compared to ECMAScript 6 (also known as ECMAScript 2015), ECMAScript 2016 was a minor update to the language specification for JavaScript. This was due to the decision that ECMAScript editions would now move to a yearly release cycle, effectively just a snapshot of all the features that were ready. As such, most resources list only two significant changes in ECMAScript 2016:",
            "content_text": "Compared to ECMAScript 6 (also known as ECMAScript 2015), ECMAScript 2016 was a minor update to the language specification for JavaScript. This was due to the decision that ECMAScript editions would now move to a yearly release cycle, effectively just a snapshot of all the features that were ready. As such, most resources list only two significant changes in ECMAScript 2016:\n\n\n  The addition of the exponentiation (**) operator\n  The addition of the Array.prototype.includes() method\n\n\nThese features had the most direct impact for JavaScript developers, however, there is one other significant change that is often forgotten. It’s something I cover in my book, Understanding ECMAScript 6, however, I’m still receiving questions about it and so I’d like to dig a bit deeper.\n\nFirst I’ll describe the change and then I’ll describe some of the rationale behind it.\n\nThe change\n\nECMAScript 2016 says that the \"use strict\" directive cannot be used in the body of a function whose parameters either have default values, use destructuring, or a rest parameter. The specification defines simple parameters as parameter lists that contain only identifiers (ECMAScript 5 only supported simple parameter lists)[1]. The change affects all function types, including function declarations and expressions, arrow functions, and concise object literal methods. Here are some examples:\n\n// this is okay\nfunction doSomething(a, b) {\n    \"use strict\";\n\n    // code\n}\n\n// syntax error in ECMAScript 2016\nfunction doSomething(a, b=a) {\n    \"use strict\";\n\n    // code\n}\n\n// syntax error in ECMAScript 2016\nconst doSomething = function({a, b}) {\n    \"use strict\";\n\n    // code\n};\n\n// syntax error in ECMAScript 2016\nconst doSomething = (...a) =&gt; {\n    \"use strict\";\n\n    // code\n};\n\nconst obj = {\n\n    // syntax error in ECMAScript 2016\n    doSomething({a, b}) {\n        \"use strict\";\n\n        // code\n    }\n};\n\n\nYou can still use \"use strict\" globally, outside of a function, in order to have that function run in strict mode even if the function has non-simple parameters. For example:\n\n// this is okay\n\"use strict\";\n\nfunction doSomething(a, b=a) {\n    // code\n}\n\n\nIn this case, the \"use strict\" directive outside of the function is valid syntax. This is also not a concern if you’re using ECMAScript modules, which run all code in strict mode.\n\nWhy make this change?\n\nThis change is important due to the way strict mode and non-simple parameter lists work. When strict mode was created in ECMAScript 5, destructuring and default parameter values did not exist, so there was no problem with parsing the parameter list and then seeing a “use strict” directive. At that point, the \"use strict\" could not affect the outcome of parsing the parameter list, it was only used to validate parameter identifiers (disallowing duplicates and checking for forbidden identifiers like eval and arguments). With the introduction of destructuring and default parameter values in ECMAScript 6, however, this was no longer the case because the specification indicated that parameter lists should be parsed in the same mode as the function body (which means the \"use strict\" directive in the function body must trigger strict mode).\n\nThe first thing to realize is that strict mode requires changes to both parsing and execution[2] of JavaScript code. As a very simple example, strict mode disallows the use of the old-style octal numeric literals (such as 070). If code is parsed in strict mode, then 070 will throw a syntax error. With that in mind, what do you think the following code should do?\n\n// syntax error in ECMAScript 2016\nfunction doSomething(value=070) {\n    \"use strict\";\n\n    return value;\n}\n\n\nIf you have a JavaScript parser attempting to parse this code, the parameter list is parsed before the function body. That means 070 is parsed as valid and then \"use strict\" is encountered in the function body, which tells the parser, “actually, you should have parsed the parameter list in strict mode.” At that point, the parser would have to backtrack and re-parse the parameter list in strict mode so a syntax error is thrown for 070. That might not seem like a big deal, but what if the default parameter value is more complex?\n\n// syntax error in ECMAScript 2016\nfunction doSomething(value=(function() {\n   return doSomeCalculation() + 070;\n}())) {\n    \"use strict\";\n\n    return value;\n}\n\n\nIn this case, with a function used in a default parameter value, you have more of a problem. The number of tokens you’d have to unwind is greater and the you also have to set the function in the default value as running in strict mode. That’s a lot of complexity to ensure that the default parameter value expression is parsed correctly and understood to be running in strict mode.\n\nDestructured parameters cause similar problems because they can include default values. For example:\n\n// syntax error in ECMAScript 2016\nfunction doSomething({value=070}) {\n    \"use strict\";\n\n    return value;\n}\n\n\nHere, the destructured parameter value has a default value that is disallowed in strict mode, causing the same problems as default parameter values.\n\nIn the end, it appears TC-39 decided[3] to simply disallow function body \"use strict\" in situations that were not present in ECMAScript 5 in order to avoid missing edge cases. That means functions with default parameter values, destructured parameters, or rest parameters cannot have \"use strict\" in the function body. That includes situations where \"use strict\" would have no effect, such as this:\n\nfunction outer() {\n    \"use strict\";\n\n    // syntax error in ECMAScript 2016\n    function doSomething(value=070) {\n        \"use strict\";\n\n        return value;\n    }\n}\n\n\nThis example nests a function with non-simple parameters inside of another function that has \"use strict\". The doSomething() function is automatically in strict mode but JavaScript engines will still throw a syntax error on the \"use strict\" directive in doSomething()’s function body.\n\nWorkarounds\n\nThis change is unlikely to affect many developers, which is likely why you weren’t aware of it. The \"use strict\" directive is starting to become a historical artifact of JavaScript as ECMAScript modules and classes both automatically run in strict mode without a way to opt-out, meaning that \"use strict\" is not needed in those situations. However, in the rare case that you need a function with non-simple parameters to run in strict mode, you can use an IIFE to create the function:\n\nconst doSomething = (function() {\n    \"use strict\";\n\n    return function(value=42) {\n        return value;\n    };\n}());\n\n\nIn this code, a function is created inside an IIFE that is running in strict mode. This allows the returned function to run in strict mode while using a default parameter value. Because the outer scope is running in strict mode, there is no problem parsing the default parameter value correctly and no need for an additional \"use strict\" inside the function body.\n\nConclusion\n\nThis small change to ECMAScript 2016, disallowing function body \"use strict\" for functions with non-simple parameter lists, highlights just how difficult evolving such a popular programming language can be. In this case, TC-39 decided to remove ambiguity by introducing a new syntax error that likely would have been part of ECMAScript 6 (2015) had this problem been surfaced earlier. Adding this syntax error was the most obvious path forward because it affects very little existing code (the specification change was made around the same time that JavaScript engines were implementing non-simple parameter lists) and likely wouldn’t affect much future code due to ECMAScript modules and classes running in strict mode.\n\nReferences\n\n\n  Static Semantics: IsSimpleParameterList (ecma-international.org)\n  It’s time to start using JavaScript strict mode (nczonline.net)\n  The scope of “use strict” with respect to destructuring in parameter lists\n\n",
            "content_html": "<p>Compared to ECMAScript 6 (also known as ECMAScript 2015), ECMAScript 2016 was a minor update to the language specification for JavaScript. This was due to the decision that ECMAScript editions would now move to a yearly release cycle, effectively just a snapshot of all the features that were ready. As such, most resources list only two significant changes in ECMAScript 2016:</p>\n\n<ol>\n  <li>The addition of the exponentiation (<code class=\"highlighter-rouge\">**</code>) operator</li>\n  <li>The addition of the <code class=\"highlighter-rouge\">Array.prototype.includes()</code> method</li>\n</ol>\n\n<p>These features had the most direct impact for JavaScript developers, however, there is one other significant change that is often forgotten. It’s something I cover in my book, <a href="https://humanwhocodes.com/feeds/\&quot;http://amzn.to/2d31CIC\&quot;">Understanding ECMAScript 6</a>, however, I’m still receiving questions about it and so I’d like to dig a bit deeper.</p>\n\n<p>First I’ll describe the change and then I’ll describe some of the rationale behind it.</p>\n\n<h2 id=\"the-change\">The change</h2>\n\n<p>ECMAScript 2016 says that the <code class=\"highlighter-rouge\">\"use strict\"</code> directive cannot be used in the body of a function whose parameters either have default values, use destructuring, or a rest parameter. The specification defines <em>simple parameters</em> as parameter lists that contain only identifiers (ECMAScript 5 only supported simple parameter lists)[1]. The change affects all function types, including function declarations and expressions, arrow functions, and concise object literal methods. Here are some examples:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// this is okay</span>\n<span class=\"kd\">function</span> <span class=\"nx\">doSomething</span><span class=\"p\">(</span><span class=\"nx\">a</span><span class=\"p\">,</span> <span class=\"nx\">b</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"dl\">\"</span><span class=\"s2\">use strict</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n\n    <span class=\"c1\">// code</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// syntax error in ECMAScript 2016</span>\n<span class=\"kd\">function</span> <span class=\"nx\">doSomething</span><span class=\"p\">(</span><span class=\"nx\">a</span><span class=\"p\">,</span> <span class=\"nx\">b</span><span class=\"o\">=</span><span class=\"nx\">a</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"dl\">\"</span><span class=\"s2\">use strict</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n\n    <span class=\"c1\">// code</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// syntax error in ECMAScript 2016</span>\n<span class=\"kd\">const</span> <span class=\"nx\">doSomething</span> <span class=\"o\">=</span> <span class=\"kd\">function</span><span class=\"p\">({</span><span class=\"nx\">a</span><span class=\"p\">,</span> <span class=\"nx\">b</span><span class=\"p\">})</span> <span class=\"p\">{</span>\n    <span class=\"dl\">\"</span><span class=\"s2\">use strict</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n\n    <span class=\"c1\">// code</span>\n<span class=\"p\">};</span>\n\n<span class=\"c1\">// syntax error in ECMAScript 2016</span>\n<span class=\"kd\">const</span> <span class=\"nx\">doSomething</span> <span class=\"o\">=</span> <span class=\"p\">(...</span><span class=\"nx\">a</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"dl\">\"</span><span class=\"s2\">use strict</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n\n    <span class=\"c1\">// code</span>\n<span class=\"p\">};</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">obj</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n\n    <span class=\"c1\">// syntax error in ECMAScript 2016</span>\n    <span class=\"nx\">doSomething</span><span class=\"p\">({</span><span class=\"nx\">a</span><span class=\"p\">,</span> <span class=\"nx\">b</span><span class=\"p\">})</span> <span class=\"p\">{</span>\n        <span class=\"dl\">\"</span><span class=\"s2\">use strict</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n\n        <span class=\"c1\">// code</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">};</span>\n</code></pre></div></div>\n\n<p>You can still use <code class=\"highlighter-rouge\">\"use strict\"</code> globally, outside of a function, in order to have that function run in strict mode even if the function has non-simple parameters. For example:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// this is okay</span>\n<span class=\"dl\">\"</span><span class=\"s2\">use strict</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n\n<span class=\"kd\">function</span> <span class=\"nx\">doSomething</span><span class=\"p\">(</span><span class=\"nx\">a</span><span class=\"p\">,</span> <span class=\"nx\">b</span><span class=\"o\">=</span><span class=\"nx\">a</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"c1\">// code</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>In this case, the <code class=\"highlighter-rouge\">\"use strict\"</code> directive outside of the function is valid syntax. This is also not a concern if you’re using ECMAScript modules, which run all code in strict mode.</p>\n\n<h2 id=\"why-make-this-change\">Why make this change?</h2>\n\n<p>This change is important due to the way strict mode and non-simple parameter lists work. When strict mode was created in ECMAScript 5, destructuring and default parameter values did not exist, so there was no problem with parsing the parameter list and then seeing a “<code class=\"highlighter-rouge\">use strict</code>” directive. At that point, the <code class=\"highlighter-rouge\">\"use strict\"</code> could not affect the outcome of parsing the parameter list, it was only used to validate parameter identifiers (disallowing duplicates and checking for forbidden identifiers like <code class=\"highlighter-rouge\">eval</code> and <code class=\"highlighter-rouge\">arguments</code>). With the introduction of destructuring and default parameter values in ECMAScript 6, however, this was no longer the case because the specification indicated that parameter lists should be parsed in the same mode as the function body (which means the <code class=\"highlighter-rouge\">\"use strict\"</code> directive in the function body must trigger strict mode).</p>\n\n<p>The first thing to realize is that strict mode requires changes to both parsing and execution[2] of JavaScript code. As a very simple example, strict mode disallows the use of the old-style octal numeric literals (such as <code class=\"highlighter-rouge\">070</code>). If code is parsed in strict mode, then <code class=\"highlighter-rouge\">070</code> will throw a syntax error. With that in mind, what do you think the following code should do?</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// syntax error in ECMAScript 2016</span>\n<span class=\"kd\">function</span> <span class=\"nx\">doSomething</span><span class=\"p\">(</span><span class=\"nx\">value</span><span class=\"o\">=</span><span class=\"mi\">070</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"dl\">\"</span><span class=\"s2\">use strict</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n\n    <span class=\"k\">return</span> <span class=\"nx\">value</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>If you have a JavaScript parser attempting to parse this code, the parameter list is parsed before the function body. That means <code class=\"highlighter-rouge\">070</code> is parsed as valid and then <code class=\"highlighter-rouge\">\"use strict\"</code> is encountered in the function body, which tells the parser, “actually, you should have parsed the parameter list in strict mode.” At that point, the parser would have to backtrack and re-parse the parameter list in strict mode so a syntax error is thrown for <code class=\"highlighter-rouge\">070</code>. That might not seem like a big deal, but what if the default parameter value is more complex?</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// syntax error in ECMAScript 2016</span>\n<span class=\"kd\">function</span> <span class=\"nx\">doSomething</span><span class=\"p\">(</span><span class=\"nx\">value</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n   <span class=\"k\">return</span> <span class=\"nx\">doSomeCalculation</span><span class=\"p\">()</span> <span class=\"o\">+</span> <span class=\"mi\">070</span><span class=\"p\">;</span>\n<span class=\"p\">}()))</span> <span class=\"p\">{</span>\n    <span class=\"dl\">\"</span><span class=\"s2\">use strict</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n\n    <span class=\"k\">return</span> <span class=\"nx\">value</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>In this case, with a function used in a default parameter value, you have more of a problem. The number of tokens you’d have to unwind is greater and the you also have to set the function in the default value as running in strict mode. That’s a lot of complexity to ensure that the default parameter value expression is parsed correctly and understood to be running in strict mode.</p>\n\n<p>Destructured parameters cause similar problems because they can include default values. For example:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// syntax error in ECMAScript 2016</span>\n<span class=\"kd\">function</span> <span class=\"nx\">doSomething</span><span class=\"p\">({</span><span class=\"nx\">value</span><span class=\"o\">=</span><span class=\"mi\">070</span><span class=\"p\">})</span> <span class=\"p\">{</span>\n    <span class=\"dl\">\"</span><span class=\"s2\">use strict</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n\n    <span class=\"k\">return</span> <span class=\"nx\">value</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>Here, the destructured parameter <code class=\"highlighter-rouge\">value</code> has a default value that is disallowed in strict mode, causing the same problems as default parameter values.</p>\n\n<p>In the end, it appears TC-39 decided[3] to simply disallow function body <code class=\"highlighter-rouge\">\"use strict\"</code> in situations that were not present in ECMAScript 5 in order to avoid missing edge cases. That means functions with default parameter values, destructured parameters, or rest parameters cannot have <code class=\"highlighter-rouge\">\"use strict\"</code> in the function body. That includes situations where <code class=\"highlighter-rouge\">\"use strict\"</code> would have no effect, such as this:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">function</span> <span class=\"nx\">outer</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"dl\">\"</span><span class=\"s2\">use strict</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n\n    <span class=\"c1\">// syntax error in ECMAScript 2016</span>\n    <span class=\"kd\">function</span> <span class=\"nx\">doSomething</span><span class=\"p\">(</span><span class=\"nx\">value</span><span class=\"o\">=</span><span class=\"mi\">070</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"dl\">\"</span><span class=\"s2\">use strict</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n\n        <span class=\"k\">return</span> <span class=\"nx\">value</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>This example nests a function with non-simple parameters inside of another function that has <code class=\"highlighter-rouge\">\"use strict\"</code>. The <code class=\"highlighter-rouge\">doSomething()</code> function is automatically in strict mode but JavaScript engines will still throw a syntax error on the <code class=\"highlighter-rouge\">\"use strict\"</code> directive in <code class=\"highlighter-rouge\">doSomething()</code>’s function body.</p>\n\n<h2 id=\"workarounds\">Workarounds</h2>\n\n<p>This change is unlikely to affect many developers, which is likely why you weren’t aware of it. The <code class=\"highlighter-rouge\">\"use strict\"</code> directive is starting to become a historical artifact of JavaScript as ECMAScript modules and classes both automatically run in strict mode without a way to opt-out, meaning that <code class=\"highlighter-rouge\">\"use strict\"</code> is not needed in those situations. However, in the rare case that you need a function with non-simple parameters to run in strict mode, you can use an IIFE to create the function:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">const</span> <span class=\"nx\">doSomething</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"dl\">\"</span><span class=\"s2\">use strict</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n\n    <span class=\"k\">return</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">value</span><span class=\"o\">=</span><span class=\"mi\">42</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"nx\">value</span><span class=\"p\">;</span>\n    <span class=\"p\">};</span>\n<span class=\"p\">}());</span>\n</code></pre></div></div>\n\n<p>In this code, a function is created inside an IIFE that is running in strict mode. This allows the returned function to run in strict mode while using a default parameter value. Because the outer scope is running in strict mode, there is no problem parsing the default parameter value correctly and no need for an additional <code class=\"highlighter-rouge\">\"use strict\"</code> inside the function body.</p>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<p>This small change to ECMAScript 2016, disallowing function body <code class=\"highlighter-rouge\">\"use strict\"</code> for functions with non-simple parameter lists, highlights just how difficult evolving such a popular programming language can be. In this case, TC-39 decided to remove ambiguity by introducing a new syntax error that likely would have been part of ECMAScript 6 (2015) had this problem been surfaced earlier. Adding this syntax error was the most obvious path forward because it affects very little existing code (the specification change was made around the same time that JavaScript engines were implementing non-simple parameter lists) and likely wouldn’t affect much future code due to ECMAScript modules and classes running in strict mode.</p>\n\n<h2 id=\"references\">References</h2>\n\n<ol>\n  <li><a href="https://humanwhocodes.com/feeds/\&quot;http://www.ecma-international.org/ecma-262/7.0/#sec-function-definitions-static-semantics-issimpleparameterlist\"">Static Semantics: IsSimpleParameterList</a> (ecma-international.org)</li>\n  <li><a href="https://humanwhocodes.com/feeds/\&quot;https://www.nczonline.net/blog/2012/03/13/its-time-to-start-using-javascript-strict-mode/\&quot;">It’s time to start using JavaScript strict mode</a> (nczonline.net)</li>\n  <li><a href="https://humanwhocodes.com/feeds/\&quot;https://github.com/rwaldron/tc39-notes/blob/d0c651b358b361b0855cfe7af9ba0b76cab73949/es7/2015-07/july-29.md#611-the-scope-of-use-strict-with-respect-to-destructuring-in-parameter-lists\"">The scope of “use strict” with respect to destructuring in parameter lists</a></li>\n</ol>\n",
            "url": "https://humanwhocodes.com/blog/2016/10/the-ecmascript-2016-change-you-probably-dont-know/",
            
            
            
            "tags": ["JavaScript","ECMAScript 2016","Strict Mode"],
            
            "date_published": "2016-10-18T00:00:00+00:00",
            "date_modified": "2016-10-18T00:00:00+00:00",
            
                "author": 
                ""
                
            
        },
    
        {
            "id": "https://humanwhocodes.com/blog/2016/04/es6-module-loading-more-complicated-than-you-think/",
            "title": "ES6 module loading: More complicated than you think",
            "summary": "One of the most long-awaited features of ECMAScript 6 is the formal definition of modules as part of the language. For years, JavaScript developers have struggled with organizing their code and needing to decide between alternate ad-hoc module formats like RequireJS, AMD, and CommonJS. Formally defining modules as part of JavaScript will eliminate a lot of heartache in the future, but right now, there is still a lot of confusion about how modules work. The confusion exists partly because, as of my writing, there are no engines that can natively load ES6 modules. In the meantime, I’m hoping this post will clarify some of the confusion.",
            "content_text": "One of the most long-awaited features of ECMAScript 6 is the formal definition of modules as part of the language. For years, JavaScript developers have struggled with organizing their code and needing to decide between alternate ad-hoc module formats like RequireJS, AMD, and CommonJS. Formally defining modules as part of JavaScript will eliminate a lot of heartache in the future, but right now, there is still a lot of confusion about how modules work. The confusion exists partly because, as of my writing, there are no engines that can natively load ES6 modules. In the meantime, I’m hoping this post will clarify some of the confusion.\n\nWhat is a module?\n\nTo start, it’s important to understand that the specification defines two different types of JavaScript programs: scripts (what we’ve all been using since JavaScript was created) and modules (newly defined in ES6). While scripts behave the way everyone is used to, modules behave somewhat differently. Specifically modules:\n\n\n  Are always in strict mode with no option to opt-out\n  Have a top-level scope that is not the global scope\n  May import bindings from other modules using import\n  May specify bindings that should be exported using export\n\n\nThese differences look subtle but in fact make modules different enough that parsing and loading needs to be done differently than with scripts.\n\nParsing differences\n\nOne of the most frequent questions received on ESLint related to ES6 modules is this:\n\n\n  Why do I need to specify that a file is a module before it’s parsed? Can’t you just look for import or export?\n\n\nI’ve seen this question repeated all over the Internet as people struggle to understand why JavaScript engines and tools can’t autodetect that a file represents a module rather than a script. At first glance, it seems like detecting the presence of export or import should be enough to determine that a file contains a module, but in reality, that’s nowhere near enough.\n\nTrying to guess user intent is a dangerous and imprecise game. If you guess correctly, the world applauds you whereas guessing incorrectly has the potential to cause a great deal of damage.\n\nParsing challenges\n\nIn order to autodetect modules in JavaScript programs, you would first have to parse the entire file. Modules need not use import, and so the only positive signal that a file is a module might be the very last statement using an export. So, you cannot escape parsing the entire file in order to have a chance to determine whether or not it’s a module.\n\nHowever, modules are strict mode environments. Strict mode doesn’t just have runtime requirements, it also defines the following as syntax errors:\n\n\n  The with statement\n  Duplicate named arguments for functions\n  Octal numeric literals (such as 010)\n  Duplicate property names (in ES5 only, ES6 eliminates this error)\n  Use of implements, interface, let, package, private, protected, public, static, and yield as identifiers.\n\n\nAll of these are not syntax errors when running in nonstrict mode. If the only signal you have is an export in the last statement of the file, then you would actually have to re-parse the entire file in strict mode to be sure to catch all of these syntax errors. The first parse would have been wasted by running nonstrict mode.\n\nOf course, if you had to detect a module from file contents, you would be forced to always parse files as modules. Since module syntax is strict mode plus import and export, you’d need to default to that in order to allow for import and export to be used. If you were to parse in nonstrict mode, then import and export are a syntax error. You could alternately created a parsing mode that combined nonstrict mode with import and export, but that’s an unnatural mode whose result couldn’t be used, thus requiring a second pass once the correct mode was determined.\n\nWhen is a module a module?\n\nThe edge case that many miss in the discussion is that modules are not required to use import or export at all. You can have a module that doesn’t import anything and doesn’t export anything. It might, for example, just modify something in the global scope. For instance, maybe you want to output a message when window.onload fires in a browser and you define a module such as:\n\n// this is a valid module!\n\nwindow.addEventListener(\"load\", function() {\n    console.log(\"Window is loaded\");\n});\n\n\nThis module can then be loaded by another module or on its own. From looking at the source, there is no way to know that it’s a module.\n\nTo sum up: while the presence of import or export might indicate a module, the lack of import or export does not clearly indicate that the file is not a module. So there is no effective way to autodetect that a file is a module during parsing.\n\nLoading Differences\n\nWhile the parsing differences are a bit subtle for modules, the loading differences are not. When a module is loaded, import statements trigger the loading of the specified files. The imported files must be completed parsed and loaded (without error) in order for module execution to begin. In order to do this as quickly as possible, loading begins as import statement are being parsed, prior to parsing the rest of the file.\n\nOnce a dependency has been loaded, there’s an extra step of verifying that the imported bindings actually exist in the dependency. If you import foo from the module foo.js, the JavaScript engine needs to verify that foo is exported from foo.js before execution continues.\n\nHow loading will work\n\nAt this point, hopefully it’s clear why you need to specify that a file is a module before it is parsed and loaded. In browsers, you will load modules like this:\n\n&lt;script type=\"module\" src=\"foo.js\"&gt;&lt;/script&gt;\n\n\nThe &lt;script&gt; tag is the same as always, but the type is set to \"module\"[1]. This signals to the browser that the file should be loaded as a module. If that foo.js then imports other dependencies, those will be loaded dynamically.\n\nIn Node.js, there is not yet a decision on how ES6 modules will be loaded. The most recent recommendation is to use a special file extension, such as .jsm, to indicate that a file is an ES6 module so that Node.js knows how to load it correctly[2].\n\nConclusion\n\nThe differences between scripts and modules are subtle enough that it’s hard for developers to understand the restriction of declaring what a JavaScript file represents ahead of time. My hope is that this post clarifies some of the reasons why it’s not possible to autodetect modules from inspecting the source code and why tools such as ESLint ask you to specify the file type before executing. There will be a point in the future where ES6 modules are the dominant JavaScript file type and script files are left only on legacy applications, and at that point, it’s likely that tools will default to assuming that files are modules. In the meantime, we’re going through a difficult adolescence between scripts and modules where mixing the two is going to be a bit painful.\n\nUpdates\n\n\n  Fix (06-Apr-2016): The original version of this post incorrectly stated that import statements must appear at the top of the file. This was removed.\n\n\nReferences\n\n\n  The script Element (whatwg.org)\n  ES6 Module Detection in Node (github.com)\n\n",
            "content_html": "<p>One of the most long-awaited features of ECMAScript 6 is the formal definition of modules as part of the language. For years, JavaScript developers have struggled with organizing their code and needing to decide between alternate ad-hoc module formats like RequireJS, AMD, and CommonJS. Formally defining modules as part of JavaScript will eliminate a lot of heartache in the future, but right now, there is still a lot of confusion about how modules work. The confusion exists partly because, as of my writing, there are no engines that can natively load ES6 modules. In the meantime, I’m hoping this post will clarify some of the confusion.</p>\n\n<h2 id=\"what-is-a-module\">What is a module?</h2>\n\n<p>To start, it’s important to understand that the specification defines two different types of JavaScript programs: scripts (what we’ve all been using since JavaScript was created) and modules (newly defined in ES6). While scripts behave the way everyone is used to, modules behave somewhat differently. Specifically modules:</p>\n\n<ol>\n  <li>Are always in strict mode with no option to opt-out</li>\n  <li>Have a top-level scope that is not the global scope</li>\n  <li>May import bindings from other modules using <code class=\"highlighter-rouge\">import</code></li>\n  <li>May specify bindings that should be exported using <code class=\"highlighter-rouge\">export</code></li>\n</ol>\n\n<p>These differences look subtle but in fact make modules different enough that parsing and loading needs to be done differently than with scripts.</p>\n\n<h2 id=\"parsing-differences\">Parsing differences</h2>\n\n<p>One of the most frequent questions received on ESLint related to ES6 modules is this:</p>\n\n<blockquote>\n  <p>Why do I need to specify that a file is a module before it’s parsed? Can’t you just look for <code class=\"highlighter-rouge\">import</code> or <code class=\"highlighter-rouge\">export</code>?</p>\n</blockquote>\n\n<p>I’ve seen this question repeated all over the Internet as people struggle to understand why JavaScript engines and tools can’t autodetect that a file represents a module rather than a script. At first glance, it seems like detecting the presence of <code class=\"highlighter-rouge\">export</code> or <code class=\"highlighter-rouge\">import</code> should be enough to determine that a file contains a module, but in reality, that’s nowhere near enough.</p>\n\n<p>Trying to guess user intent is a dangerous and imprecise game. If you guess correctly, the world applauds you whereas guessing incorrectly has the potential to cause a great deal of damage.</p>\n\n<h3 id=\"parsing-challenges\">Parsing challenges</h3>\n\n<p>In order to autodetect modules in JavaScript programs, you would first have to parse the entire file. Modules need not use <code class=\"highlighter-rouge\">import</code>, and so the only positive signal that a file is a module might be the very last statement using an <code class=\"highlighter-rouge\">export</code>. So, you cannot escape parsing the entire file in order to have a chance to determine whether or not it’s a module.</p>\n\n<p>However, modules are strict mode environments. Strict mode doesn’t just have runtime requirements, it also defines the following as syntax errors:</p>\n\n<ol>\n  <li>The <code class=\"highlighter-rouge\">with</code> statement</li>\n  <li>Duplicate named arguments for functions</li>\n  <li>Octal numeric literals (such as <code class=\"highlighter-rouge\">010</code>)</li>\n  <li>Duplicate property names (in ES5 only, ES6 eliminates this error)</li>\n  <li>Use of <code class=\"highlighter-rouge\">implements</code>, <code class=\"highlighter-rouge\">interface</code>, <code class=\"highlighter-rouge\">let</code>, <code class=\"highlighter-rouge\">package</code>, <code class=\"highlighter-rouge\">private</code>, <code class=\"highlighter-rouge\">protected</code>, <code class=\"highlighter-rouge\">public</code>, <code class=\"highlighter-rouge\">static</code>, and <code class=\"highlighter-rouge\">yield</code> as identifiers.</li>\n</ol>\n\n<p>All of these are not syntax errors when running in nonstrict mode. If the only signal you have is an <code class=\"highlighter-rouge\">export</code> in the last statement of the file, then you would actually have to re-parse the entire file in strict mode to be sure to catch all of these syntax errors. The first parse would have been wasted by running nonstrict mode.</p>\n\n<p>Of course, if you had to detect a module from file contents, you would be forced to always parse files as modules. Since module syntax is strict mode plus <code class=\"highlighter-rouge\">import</code> and <code class=\"highlighter-rouge\">export</code>, you’d need to default to that in order to allow for <code class=\"highlighter-rouge\">import</code> and <code class=\"highlighter-rouge\">export</code> to be used. If you were to parse in nonstrict mode, then <code class=\"highlighter-rouge\">import</code> and <code class=\"highlighter-rouge\">export</code> are a syntax error. You could alternately created a parsing mode that combined nonstrict mode with <code class=\"highlighter-rouge\">import</code> and <code class=\"highlighter-rouge\">export</code>, but that’s an unnatural mode whose result couldn’t be used, thus requiring a second pass once the correct mode was determined.</p>\n\n<h3 id=\"when-is-a-module-a-module\">When is a module a module?</h3>\n\n<p>The edge case that many miss in the discussion is that modules are not required to use <code class=\"highlighter-rouge\">import</code> or <code class=\"highlighter-rouge\">export</code> at all. You can have a module that doesn’t import anything and doesn’t export anything. It might, for example, just modify something in the global scope. For instance, maybe you want to output a message when <code class=\"highlighter-rouge\">window.onload</code> fires in a browser and you define a module such as:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// this is a valid module!</span>\n\n<span class=\"nb\">window</span><span class=\"p\">.</span><span class=\"nx\">addEventListener</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">load</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">Window is loaded</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n<span class=\"p\">});</span>\n</code></pre></div></div>\n\n<p>This module can then be loaded by another module or on its own. From looking at the source, there is no way to know that it’s a module.</p>\n\n<p>To sum up: while the presence of <code class=\"highlighter-rouge\">import</code> or <code class=\"highlighter-rouge\">export</code> might indicate a module, the lack of <code class=\"highlighter-rouge\">import</code> or <code class=\"highlighter-rouge\">export</code> does not clearly indicate that the file is not a module. So there is no effective way to autodetect that a file is a module during parsing.</p>\n\n<h2 id=\"loading-differences\">Loading Differences</h2>\n\n<p>While the parsing differences are a bit subtle for modules, the loading differences are not. When a module is loaded, <code class=\"highlighter-rouge\">import</code> statements trigger the loading of the specified files. The imported files must be completed parsed and loaded (without error) in order for module execution to begin. In order to do this as quickly as possible, loading begins as <code class=\"highlighter-rouge\">import</code> statement are being parsed, prior to parsing the rest of the file.</p>\n\n<p>Once a dependency has been loaded, there’s an extra step of verifying that the imported bindings actually exist in the dependency. If you import <code class=\"highlighter-rouge\">foo</code> from the module <code class=\"highlighter-rouge\">foo.js</code>, the JavaScript engine needs to verify that <code class=\"highlighter-rouge\">foo</code> is exported from <code class=\"highlighter-rouge\">foo.js</code> before execution continues.</p>\n\n<h2 id=\"how-loading-will-work\">How loading will work</h2>\n\n<p>At this point, hopefully it’s clear why you need to specify that a file is a module before it is parsed and loaded. In browsers, you will load modules like this:</p>\n\n<div class=\"language-html highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;script </span><span class=\"na\">type=</span><span class=\"s\">\"module\"</span> <span class=\"na\">src=</span><span class=\"s\">\"foo.js\"</span><span class=\"nt\">&gt;&lt;/script&gt;</span>\n</code></pre></div></div>\n\n<p>The <code class=\"highlighter-rouge\">&lt;script&gt;</code> tag is the same as always, but the <code class=\"highlighter-rouge\">type</code> is set to <code class=\"highlighter-rouge\">\"module\"</code>[1]. This signals to the browser that the file should be loaded as a module. If that <code class=\"highlighter-rouge\">foo.js</code> then <code class=\"highlighter-rouge\">import</code>s other dependencies, those will be loaded dynamically.</p>\n\n<p>In Node.js, there is not yet a decision on how ES6 modules will be loaded. The most recent recommendation is to use a special file extension, such as <code class=\"highlighter-rouge\">.jsm</code>, to indicate that a file is an ES6 module so that Node.js knows how to load it correctly[2].</p>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<p>The differences between scripts and modules are subtle enough that it’s hard for developers to understand the restriction of declaring what a JavaScript file represents ahead of time. My hope is that this post clarifies some of the reasons why it’s not possible to autodetect modules from inspecting the source code and why tools such as ESLint ask you to specify the file type before executing. There will be a point in the future where ES6 modules are the dominant JavaScript file type and script files are left only on legacy applications, and at that point, it’s likely that tools will default to assuming that files are modules. In the meantime, we’re going through a difficult adolescence between scripts and modules where mixing the two is going to be a bit painful.</p>\n\n<h2 id=\"updates\">Updates</h2>\n\n<ul>\n  <li><strong>Fix (06-Apr-2016)</strong>: The original version of this post incorrectly stated that <code class=\"highlighter-rouge\">import</code> statements must appear at the top of the file. This was removed.</li>\n</ul>\n\n<h2 id=\"references\">References</h2>\n\n<ol>\n  <li><a href="https://humanwhocodes.com/feeds/\&quot;https://html.spec.whatwg.org/multipage/scripting.html#script\"">The script Element</a> (whatwg.org)</li>\n  <li><a href="https://humanwhocodes.com/feeds/\&quot;https://github.com/nodejs/node/wiki/ES6-Module-Detection-in-Node\&quot;">ES6 Module Detection in Node</a> (github.com)</li>\n</ol>\n",
            "url": "https://humanwhocodes.com/blog/2016/04/es6-module-loading-more-complicated-than-you-think/",
            
            
            
            "tags": ["JavaScript","ECMAScript 6","Modules"],
            
            "date_published": "2016-04-05T00:00:00+00:00",
            "date_modified": "2016-04-05T00:00:00+00:00",
            
                "author": 
                ""
                
            
        },
    
        {
            "id": "https://humanwhocodes.com/blog/2016/03/mimicking-npm-script-in-node-js/",
            "title": "Mimicking npm script in Node.js",
            "summary": "I’m a big fan of npm scripts[1] and have been using them in all of my projects instead of a standalone build system. The feature I like the most from npm scripts is the ability to run command line executables that are installed in your project’s node_modules/.bin directory. That allows you to, for example, install ESLint[2] locally in your project:",
            "content_text": "I’m a big fan of npm scripts[1] and have been using them in all of my projects instead of a standalone build system. The feature I like the most from npm scripts is the ability to run command line executables that are installed in your project’s node_modules/.bin directory. That allows you to, for example, install ESLint[2] locally in your project:\n\n$ npm i eslint --save-dev\n\n\nThen create a “lint” script in your package.json file that looks like this:\n\n{\n    \"name\": \"Test Project\",\n    \"devDependencies\": {\n        \"eslint\": \"^1.10.3\"\n    },\n    \"scripts\": {\n        \"lint\": \"eslint .\"\n    }\n}\n\n\nAnd after that, you can ESLint by typing:\n\n$ npm run lint\n\n\nThis works because the npm script is actually running node_modules/.bin/eslint. It’s a great trick, meaning you don’t have to jump through any extra hoops to use these binaries in your scripts. But how does npm do it?\n\nModifying PATH\n\nThe answer is that npm modifies the PATH environment variable so that it affects the lookup of executables. It does this only temporarily, so the change doesn’t affect your system as a whole; it is in effect only for the script. I had a need to do the same thing in a project I was working on, and so dug into how this is possible. The actual code in npm is buried pretty deep and uses the exec() asynchronous function to execute scripts. For my purposes, though, I wanted synchronous execution and I didn’t need to do most of what npm was doing (since obviously npm is far more complicated than simply running scripts with a modified PATH).\n\nThe goal is to run a string on the command line as if it were running directly in the console with the exception that the PATH environment variable includes the current working directory for Node.js.\n\nCreating a new environment\n\nThe first step is to create a clone of all environment variables. You want these so that the command will run with all the same information available on the system, and it’s a good idea to keep the original process.env around just in case you need it later:\n\nvar env = Object.assign({}, process.env);\n\n\nThe local env is the copy you can work with and modify without fear of affecting anything else. The next step is to modify the PATH variable so that it includes the correct node_modules/.bin directory. This needs to be added to the front of PATH so the search begins there before looking elsewhere. Slightly complicating matters is that Windows uses a semicolon to separate directories in PATH while Unix uses a colon, so you need to take that into account:\n\nvar SEPARATOR = process.platform === \"win32\" ? \";\" : \":\",\n    env = Object.assign({}, process.env);\n\nenv.PATH = path.resolve(\"./node_modules/.bin\") + SEPARATOR + env.PATH;\n\n\nThe env.PATH property is updated to place ./node_modules/.bin to the front of what it already contained (path.resolve() will resolve relative to the current working directory). Now the env object is ready for use.\n\nExecuting the script\n\nThe next step is to execute the script using the modified environment. This is done using execSync() for synchronous execution. The first argument is the command to run and the second argument is an object containing options for the execution environment. On that second argument, you need to set two properties: env, which is the environment settings, and cwd to set the current working directory (it defaults to undefined). So to run a script in the current working directory, you would do this:\n\nvar execSync = require(\"child_process\").execSync;\n\nvar SEPARATOR = process.platform === \"win32\" ? \";\" : \":\",\n    env = Object.assign({}, process.env);\n\nenv.PATH = path.resolve(\"./node_modules/.bin\") + SEPARATOR + env.PATH;\n\nfunction myExecSync(cmd) {\n    var output = execSync(cmd, {\n        cwd: process.cwd(),\n        env: env\n    });\n\n    console.log(output);\n}\n\n\nYou can then call myExecSync() and it will correctly find executables in the node_modules/.bin directory from the current working directory:\n\nmyExecSync(\"eslint .\");\n\n\nConclusion\n\nThis little trick has come in very useful in my projects, especially when I want to write scripts that run inside of Node.js files. Given that executables are installed locally when installing packages from npm, the ability to easily run those executables is a powerful addition to your scripting capabilities. I’m using this to write longer scripts inside of JavaScript files that are triggered from npm run, and in doing so, the scripts end up looking more like Makefiles or bash scripts (and that makes me happy).\n\nReferences\n\n\n  How npm handles the scripts field (npmjs.com)\n  ESLint (eslint.org)\n\n",
            "content_html": "<p>I’m a big fan of npm scripts[1] and have been using them in all of my projects instead of a standalone build system. The feature I like the most from npm scripts is the ability to run command line executables that are installed in your project’s <code class=\"highlighter-rouge\">node_modules/.bin</code> directory. That allows you to, for example, install ESLint[2] locally in your project:</p>\n\n<div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>$ npm i eslint --save-dev\n</code></pre></div></div>\n\n<p>Then create a “lint” script in your <code class=\"highlighter-rouge\">package.json</code> file that looks like this:</p>\n\n<div class=\"language-json highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"p\">{</span><span class=\"w\">\n    </span><span class=\"nl\">\"name\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"Test Project\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"nl\">\"devDependencies\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n        </span><span class=\"nl\">\"eslint\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"^1.10.3\"</span><span class=\"w\">\n    </span><span class=\"p\">},</span><span class=\"w\">\n    </span><span class=\"nl\">\"scripts\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n        </span><span class=\"nl\">\"lint\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"eslint .\"</span><span class=\"w\">\n    </span><span class=\"p\">}</span><span class=\"w\">\n</span><span class=\"p\">}</span><span class=\"w\">\n</span></code></pre></div></div>\n\n<p>And after that, you can ESLint by typing:</p>\n\n<div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>$ npm run lint\n</code></pre></div></div>\n\n<p>This works because the npm script is actually running <code class=\"highlighter-rouge\">node_modules/.bin/eslint</code>. It’s a great trick, meaning you don’t have to jump through any extra hoops to use these binaries in your scripts. But how does npm do it?</p>\n\n<h2 id=\"modifying-path\">Modifying PATH</h2>\n\n<p>The answer is that npm modifies the <code class=\"highlighter-rouge\">PATH</code> environment variable so that it affects the lookup of executables. It does this only temporarily, so the change doesn’t affect your system as a whole; it is in effect only for the script. I had a need to do the same thing in a project I was working on, and so dug into how this is possible. The actual code in npm is buried pretty deep and uses the <code class=\"highlighter-rouge\">exec()</code> asynchronous function to execute scripts. For my purposes, though, I wanted synchronous execution and I didn’t need to do most of what npm was doing (since obviously npm is far more complicated than simply running scripts with a modified <code class=\"highlighter-rouge\">PATH</code>).</p>\n\n<p>The goal is to run a string on the command line as if it were running directly in the console with the exception that the <code class=\"highlighter-rouge\">PATH</code> environment variable includes the current working directory for Node.js.</p>\n\n<h2 id=\"creating-a-new-environment\">Creating a new environment</h2>\n\n<p>The first step is to create a clone of all environment variables. You want these so that the command will run with all the same information available on the system, and it’s a good idea to keep the original <code class=\"highlighter-rouge\">process.env</code> around just in case you need it later:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">var</span> <span class=\"nx\">env</span> <span class=\"o\">=</span> <span class=\"nb\">Object</span><span class=\"p\">.</span><span class=\"nx\">assign</span><span class=\"p\">({},</span> <span class=\"nx\">process</span><span class=\"p\">.</span><span class=\"nx\">env</span><span class=\"p\">);</span>\n</code></pre></div></div>\n\n<p>The local <code class=\"highlighter-rouge\">env</code> is the copy you can work with and modify without fear of affecting anything else. The next step is to modify the <code class=\"highlighter-rouge\">PATH</code> variable so that it includes the correct <code class=\"highlighter-rouge\">node_modules/.bin</code> directory. This needs to be added to the front of <code class=\"highlighter-rouge\">PATH</code> so the search begins there before looking elsewhere. Slightly complicating matters is that Windows uses a semicolon to separate directories in <code class=\"highlighter-rouge\">PATH</code> while Unix uses a colon, so you need to take that into account:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">var</span> <span class=\"nx\">SEPARATOR</span> <span class=\"o\">=</span> <span class=\"nx\">process</span><span class=\"p\">.</span><span class=\"nx\">platform</span> <span class=\"o\">===</span> <span class=\"dl\">\"</span><span class=\"s2\">win32</span><span class=\"dl\">\"</span> <span class=\"p\">?</span> <span class=\"dl\">\"</span><span class=\"s2\">;</span><span class=\"dl\">\"</span> <span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">:</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n    <span class=\"nx\">env</span> <span class=\"o\">=</span> <span class=\"nb\">Object</span><span class=\"p\">.</span><span class=\"nx\">assign</span><span class=\"p\">({},</span> <span class=\"nx\">process</span><span class=\"p\">.</span><span class=\"nx\">env</span><span class=\"p\">);</span>\n\n<span class=\"nx\">env</span><span class=\"p\">.</span><span class=\"nx\">PATH</span> <span class=\"o\">=</span> <span class=\"nx\">path</span><span class=\"p\">.</span><span class=\"nx\">resolve</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">./node_modules/.bin</span><span class=\"dl\">\"</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"nx\">SEPARATOR</span> <span class=\"o\">+</span> <span class=\"nx\">env</span><span class=\"p\">.</span><span class=\"nx\">PATH</span><span class=\"p\">;</span>\n</code></pre></div></div>\n\n<p>The <code class=\"highlighter-rouge\">env.PATH</code> property is updated to place <code class=\"highlighter-rouge\">./node_modules/.bin</code> to the front of what it already contained (<code class=\"highlighter-rouge\">path.resolve()</code> will resolve relative to the current working directory). Now the <code class=\"highlighter-rouge\">env</code> object is ready for use.</p>\n\n<h2 id=\"executing-the-script\">Executing the script</h2>\n\n<p>The next step is to execute the script using the modified environment. This is done using <code class=\"highlighter-rouge\">execSync()</code> for synchronous execution. The first argument is the command to run and the second argument is an object containing options for the execution environment. On that second argument, you need to set two properties: <code class=\"highlighter-rouge\">env</code>, which is the environment settings, and <code class=\"highlighter-rouge\">cwd</code> to set the current working directory (it defaults to <code class=\"highlighter-rouge\">undefined</code>). So to run a script in the current working directory, you would do this:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">var</span> <span class=\"nx\">execSync</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">child_process</span><span class=\"dl\">\"</span><span class=\"p\">).</span><span class=\"nx\">execSync</span><span class=\"p\">;</span>\n\n<span class=\"kd\">var</span> <span class=\"nx\">SEPARATOR</span> <span class=\"o\">=</span> <span class=\"nx\">process</span><span class=\"p\">.</span><span class=\"nx\">platform</span> <span class=\"o\">===</span> <span class=\"dl\">\"</span><span class=\"s2\">win32</span><span class=\"dl\">\"</span> <span class=\"p\">?</span> <span class=\"dl\">\"</span><span class=\"s2\">;</span><span class=\"dl\">\"</span> <span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">:</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n    <span class=\"nx\">env</span> <span class=\"o\">=</span> <span class=\"nb\">Object</span><span class=\"p\">.</span><span class=\"nx\">assign</span><span class=\"p\">({},</span> <span class=\"nx\">process</span><span class=\"p\">.</span><span class=\"nx\">env</span><span class=\"p\">);</span>\n\n<span class=\"nx\">env</span><span class=\"p\">.</span><span class=\"nx\">PATH</span> <span class=\"o\">=</span> <span class=\"nx\">path</span><span class=\"p\">.</span><span class=\"nx\">resolve</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">./node_modules/.bin</span><span class=\"dl\">\"</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"nx\">SEPARATOR</span> <span class=\"o\">+</span> <span class=\"nx\">env</span><span class=\"p\">.</span><span class=\"nx\">PATH</span><span class=\"p\">;</span>\n\n<span class=\"kd\">function</span> <span class=\"nx\">myExecSync</span><span class=\"p\">(</span><span class=\"nx\">cmd</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">output</span> <span class=\"o\">=</span> <span class=\"nx\">execSync</span><span class=\"p\">(</span><span class=\"nx\">cmd</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n        <span class=\"na\">cwd</span><span class=\"p\">:</span> <span class=\"nx\">process</span><span class=\"p\">.</span><span class=\"nx\">cwd</span><span class=\"p\">(),</span>\n        <span class=\"na\">env</span><span class=\"p\">:</span> <span class=\"nx\">env</span>\n    <span class=\"p\">});</span>\n\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">output</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>You can then call <code class=\"highlighter-rouge\">myExecSync()</code> and it will correctly find executables in the <code class=\"highlighter-rouge\">node_modules/.bin</code> directory from the current working directory:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nx\">myExecSync</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">eslint .</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n</code></pre></div></div>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<p>This little trick has come in very useful in my projects, especially when I want to write scripts that run inside of Node.js files. Given that executables are installed locally when installing packages from npm, the ability to easily run those executables is a powerful addition to your scripting capabilities. I’m using this to write longer scripts inside of JavaScript files that are triggered from <code class=\"highlighter-rouge\">npm run</code>, and in doing so, the scripts end up looking more like Makefiles or bash scripts (and that makes me happy).</p>\n\n<h2 id=\"references\">References</h2>\n\n<ol>\n  <li><a href="https://humanwhocodes.com/feeds/\&quot;https://docs.npmjs.com/misc/scripts\&quot;">How npm handles the scripts field</a> (npmjs.com)</li>\n  <li><a href="https://humanwhocodes.com/feeds/\&quot;http://eslint.org\&quot;">ESLint</a> (eslint.org)</li>\n</ol>\n",
            "url": "https://humanwhocodes.com/blog/2016/03/mimicking-npm-script-in-node-js/",
            
            
            
            "tags": ["JavaScript","Node.js","npm"],
            
            "date_published": "2016-03-08T00:00:00+00:00",
            "date_modified": "2016-03-08T00:00:00+00:00",
            
                "author": 
                ""
                
            
        },
    
        {
            "id": "https://humanwhocodes.com/blog/2016/02/reflections-on-eslints-success/",
            "title": "Reflections on ESLint's success",
            "summary": "It’s hard for me to believe, but I first conceived and created ESLint1 in June 2013 and first announced it’s availability in July 20132. As frequent readers might recall, the primary goal of ESLint was to create a linter with rules that could be loaded at runtime. I had seen some problems in our JavaScript at work and really wanted some automation to ensure those mistakes weren’t repeated.            ESLint (eslint.org) &#8617;              Introducing ESLint (nczonline.net) &#8617;      ",
            "content_text": "It’s hard for me to believe, but I first conceived and created ESLint1 in June 2013 and first announced it’s availability in July 20132. As frequent readers might recall, the primary goal of ESLint was to create a linter with rules that could be loaded at runtime. I had seen some problems in our JavaScript at work and really wanted some automation to ensure those mistakes weren’t repeated.\n\nIn the two and a half years since ESLint was introduced, its popularity exploded. This past month, we surpassed 1.5 million npm downloads in 30 days, something I never thought possible back in the day when an average month of downloads was 600.\n\nAnd all of this happened while I’ve been extremely ill with Lyme disease and barely able to leave my house for the past two years. That meant I couldn’t go to conferences or meetups to speak about ESLint (the previous two years I was a conference regular). Yet somehow, ESLint gained traction and has continued to gain in popularity. I think it’s a good time to look back and try to understand why.\n\nPeople are writing more JavaScript\n\nOver the past three years, we’ve continued to see growth in the amount of JavaScript being sent to browsers. According to HTTP Archive3, the average page now has over 100KB more JavaScript than it had in 2013.\n\n\n\nAnother factor is the explosive popularity of Node.js. Whereas previously the amount of JavaScript written was limited to client-side usage, Node.js ensured that a whole new group of developers would be writing JavaScript. With JavaScript running in the browser and on the server, that would naturally lead to an increase in demand for JavaScript tooling. Since ESLint can be used for both browser and Node.js JavaScript, it was well-suited to address this demand.\n\nLinting has become more popular\n\nAs the demand for JavaScript tooling increased, so too did the demand for JavaScript linting. This logically makes sense because the more JavaScript you write, the more you’re going to need help keeping it functional and avoiding common mistakes. You can see this general trend by looking at the npm download numbers for JSHint, JSCS, and ESLint since mid-2013.\n\n\n\nJSCS and ESLint were created right around the same time, so it’s interesting to see the growth trajectories for each as compared to JSHint. JSHint has continued its domination of JavaScript linting popularity into the beginning of 2016. Both JSCS and ESLint continue to grow over time, as well. Perhaps the most interesting part of this data is that all three tools are continuing to grow their download counts over time, implying that there are more people downloading linters each month than there are people switching linters.\n\nSo ESLint is really just part of a larger trend towards more JavaScript linting by the development community.\n\nThe ECMAScript 6/Babel factor\n\nThe excitement around ECMAScript 6 has been growing steadily for the past four years, so much so that it made Babel a massively successful project. The ability to start using ECMAScript 6 syntax and features without waiting for official support in browsers and Node.js meant demand for a new class of JavaScript tools. There just wasn’t enough tooling for ECMAScript 6 code, and in this regard, JSHint fell pretty far behind.\n\nESLint, on the other hand, had a very big advantage: you could swap out the default parser for another one so long as it produced the same format as Esprima (or Espree). That meant those who wanted to use ECMAScript 6 could use the now-discontinued Facebook fork of Esprima with ES6 support immediately to get some basic linting for their code. Espree was also updated to support ES6 (mostly by pulling features from the Facebook Esprima fork). That made developers using ES6 quite happy.\n\nOf course, Babel didn’t stop at implementing ES6 features, going on to include experimental features. That meant there was demand for tools that could deal with not just the standard features, but anything that was in any stage of development for JavaScript. Here, ESLint’s pluggable parser capability also made a big difference because babel-eslint4 was created by the Babel team as a wrapper around Babel that ESLint could use.\n\nBefore long, ESLint was the recommended linter for anyone using ECMAScript 6 or Babel, and it was made possible by a decision to allow the default parser to be swapped out for a compatible one.\n\nToday, babel-eslint is used in roughly 41% of ESLint installs (based on npm download statistics).\n\nThe React factor\n\nIt’s impossible to talk about ESLint’s popularity without talking about React. A key part of React is the ability to embed JSX code inside of JavaScript, and that was something no other linter was capable of doing at first. ESLint not only implemented JSX as part of the default parser, but with pluggable parsers, you could use babel-eslint or Facebook’s Esprima fork to get JSX support. React users were starting to turn to ESLint because of this.\n\nThere were a lot of requests to create React-specific rules in ESLint itself, but as a policy, I never wanted library-specific rules as those would inevitably require a lot of maintenance. In December 2014, eslint-plugin-react5 was introduced with React-specific rules and really caught on quickly with React developers.\n\nThen, in February 2015, Dan Abramov wrote, “Lint like it’s 2015”6. In that post, he described how well ESLint worked with React, and had high praise:\n\n\n  If you haven’t heard of it, ESLint is the linter I always wanted JSHint to be.\n\n\nDan also walked people through setting up ESLint and how to use babel-eslint, providing some much-needed documentation for the process. It’s pretty clear to see that this was a big turning point for ESLint as the monthly download count nearly doubled from 89,000 in February 2015 to 161,000 in March 2015. That really seemed to kick off a period of rapid growth for ESLint that has continued to this day.\n\nToday, eslint-plugin-react is used in a bit more than 45% of ESLint installs (based on npm download statistics).\n\nExtensibility was key\n\nFrom the beginning, I had this idea that ESLint could be a small core utility at the center of a larger ecosystem. My goal was to make ESLint ageless by allowing enough extension points that my failure to deliver features would not stop ESLint from acquiring new capabilities. While ESLint hasn’t yet met that vision completely, it is extremely flexible:\n\n\n  You can add new rules at runtime, allowing anyone to write their own rules. I saw this as key if I wanted to avoid spending every day with a laundry list of random rules people wanted. Now, there’s nothing stopping anyone from writing an ESLint rule.\n  The pluggable parser means that ESLint can work with anything outputting the same format as Espree. As I’ve already discussed, this has been a big reason for ESLint’s popularity.\n  Shareable configurations all people to package up their configs and share them, making it easy to have multiple projects adhere to the same configuration (eslint-config-airbnb is used in 15% of ESLint installs).\n  Plugins allow people to easily package and share their rules, text processors, environments, and configurations with anyone.\n  A rational Node.js API that made it easy to create build tool plugins (for Grunt, Gulp, and more) as well as led to the creation of no-configuration linters like Standard and XO.\n\n\nI’m hoping we can add more extension points to ESLint as it continues to evolve.\n\nListening to the community\n\nOne of the things I tried very hard to do was really listen to the ESLint community. While I was pretty stubborn early on about my vision for ESLint, I came to realize that there is definitely a wisdom in crowds. The more you hear the same suggestions over and over, the more likely it’s a real pain point that should be addressed. I’m much better now about watching for these patterns, as the community has really come through with some great ideas that have led to ESLint’s success:\n\n\n  The pluggable parser feature - a direct request from Facebook so they could use their own fork of Esprima with ESLint.\n  JSX support - early on, I was very against including JSX support by default. But the request kept coming up, so I eventually agreed. And as mentioned earlier, that has been a key part of ESLint’s success.\n  Shareable configs - this came about due to the emergence of Standard and other wrappers around ESLint whose sole purpose was to run ESLint with a specific configuration. It seemed like the community really wanted an easy way to share configs, and so shareable configs were born.\n  Plugins - early on, the only way to load your own rules was from the filesystem using the --rulesdir command line option. Pretty soon, people started packaging up their rules into npm packages and publishing them. This was a bit of a painful process, and it was hard to use more than one package at a time, so we ended up adding plugins so that rules could easily be shared.\n\n\nIt’s pretty clear that the ESLint community has some fantastic ideas for how the project should grow, and there’s little doubt that ESLint’s success is directly to them.\n\nGrassroots support\n\nSince ESLint was created, I wrote exactly two blog posts about it. The first was the intro post on my personal blog2 and the second was a followup on Smashing Magazine7 last September. Other than that, the extent of my marketing for ESLint was limited to mention it on Twitter and managing the ESLint Twitter account. If I had been well enough to give talks, I’m sure I could have done a better job marketing ESLint, but since I wasn’t, I decided that I wouldn’t even try to promote it.\n\nI was pleasantly surprised when I started seeing other people giving talks and writing articles about ESLint. In the beginning, it was people that I didn’t know and had never heard of. Articles (such as Dan’s) were popping up and people were posting videos of conference and meetup talks about ESLint. The popularity grew organically as more content was posted online.\n\nAn interesting contrast is in the growth story of JSCS. Early on, JSCS got JSHint’s endorsement as a companion to JSHint. JSHint had decided to remove stylistic rules altogether and JSCS serves as a replacement for those rules. As such, the JSHint team was referring people to JSCS when questions arose. Having the support of the undeniable leader in the space is huge, and for most of the early days, JSCS usage far outpaced ESLint usage. At several points during that first year, I thought that JSCS would crush ESLint and I could go back to having my nights and weekends free. But that didn’t happen.\n\nThe strong grassroots support sustained ESLint and eventually helped it onto a tremendous growth spurt. Users were creating more users and more buzz, and ESLint was along for the ride.\n\nFocusing on usefulness not competition\n\nOne of the things I’m most proud of is the story that came along with ESLint. At no point did I make any claims that ESLint was better than anything else. I never asked people to switch from JSHint or JSCS. My main message was that ESLint was better for your project is you wanted to write custom rules. That was it. To this day, the ESLint README says (in the FAQ):\n\n\n  I’m not trying to convince you that ESLint is better than JSHint. The only thing I know is that ESLint is better than JSHint for what I’m doing. In the off chance you’re doing something similar, it might be better for you. Otherwise, keep using JSHint, I’m certainly not going to tell you to stop using it.\n\n\nThat’s been my position, and now the position of the team, all along. I still believe JSHint is a good tool and has a lot of advantages. JSCS, as well, is a good tool that has some real benefits. Many people use a combination of JSHint and JSCS and are quite happy, and for those people, I’d encourage them to continue doing so.\n\nThe focus of ESLint is really just to be as useful as possible and let developers decide if it’s right for them. All decisions are made based on how useful changes are to our community and not based on competition with other tools. There’s plenty of room in the world for multiple linting tools, there doesn’t have to be just one.\n\nPatience pays off\n\nI’ve mentioned before8 that there seems to be a frantic race to create popular open source projects, with a focus on popularity over everything else. ESLint is a good example of how long it takes for a project to organically grow into a success. For the first nearly two years of its existence, ESLint downloads were a distant third behind JSHint and JSCS. It took time for both ESLint and its community to mature. The “overnight” success of ESLint didn’t happen over night, it happened by continuing to improve the project based on usefulness and community feedback.\n\nA great team\n\nI’ve been truly blessed with a fantastic team of contributors to ESLint. As I’ve had less energy and time to work on ESLint, they have picked up a lot of the slack. The thing that amazes me constantly is that I’ve never met these people in real life, nor have I ever heard their voices, yet they’ve become a group of people I look forward to conversing with every day. Their undying passion and creativity has kept ESLint going as I’ve struggled with my health, and while I started ESLint alone, they are undoubtedly the reason it survived long enough to reach its current level of popularity.\n\nA huge thanks to Ilya Volodin, Brandon Mills, Gyandeep Singh, Mathias Schreck, Jamund Ferguson, Ian VanSchooten, Toru Nagashima, Burak Yiğit Kaya, and Alberto Rodríguez for all of your hard work.\n\nConclusion\n\nThere are a lot of factors that have led to the success of ESLint, and by sharing them, I’m hoping to give others a roadmap for what it takes to create a successful open source project. As with most worthwhile endeavors, a bit of luck coupled with the support of others and a clear vision for what I was trying to accomplish were all key parts of this story. I’m a big believer that if you focus on creating something useful, and you’re willing to put in the hard work, eventually the work will get the recognition it deserves.\n\nESLint is continuing to grow and change, and the team and community are growing and changing as well. I’m very excited to see where ESLint goes next.\n\nReferences\n\n\n  \n    \n      ESLint (eslint.org) &#8617;\n    \n    \n      Introducing ESLint (nczonline.net) &#8617; &#8617;2\n    \n    \n      HTTP Archive Trends 2013-2016 (httparchive.org) &#8617;\n    \n    \n      babel-eslint (github.com) &#8617;\n    \n    \n      eslint-plugin-react (github.com) &#8617;\n    \n    \n      Lint like it’s 2015 (medium.com) &#8617;\n    \n    \n      ESLint: The Next Generation JavaScript Linter (smashingmagazine.com) &#8617;\n    \n    \n      Why I’m not using your open source project (nczonline.net) &#8617;\n    \n  \n\n",
            "content_html": "<p>It’s hard for me to believe, but I first conceived and created ESLint<sup id=\"fnref:1\"><a href="https://humanwhocodes.com/feeds/\&quot;#fn:1\"" class=\"footnote\">1</a></sup> in June 2013 and first announced it’s availability in July 2013<sup id=\"fnref:2\"><a href="https://humanwhocodes.com/feeds/\&quot;#fn:2\"" class=\"footnote\">2</a></sup>. As frequent readers might recall, the primary goal of ESLint was to create a linter with rules that could be loaded at runtime. I had seen some problems in our JavaScript at work and really wanted some automation to ensure those mistakes weren’t repeated.</p>\n\n<p>In the two and a half years since ESLint was introduced, its popularity exploded. This past month, we surpassed 1.5 million npm downloads in 30 days, something I never thought possible back in the day when an average month of downloads was 600.</p>\n\n<p>And all of this happened while I’ve been extremely ill with Lyme disease and barely able to leave my house for the past two years. That meant I couldn’t go to conferences or meetups to speak about ESLint (the previous two years I was a conference regular). Yet somehow, ESLint gained traction and has continued to gain in popularity. I think it’s a good time to look back and try to understand why.</p>\n\n<h2 id=\"people-are-writing-more-javascript\">People are writing more JavaScript</h2>\n\n<p>Over the past three years, we’ve continued to see growth in the amount of JavaScript being sent to browsers. According to HTTP Archive<sup id=\"fnref:3\"><a href="https://humanwhocodes.com/feeds/\&quot;#fn:3\"" class=\"footnote\">3</a></sup>, the average page now has over 100KB more JavaScript than it had in 2013.</p>\n\n<p><img src="https://humanwhocodes.com/feeds/\&quot;https://www.nczonline.net/images/posts/blog-js-chart-2016.png\&quot;" alt=\"Chart - Increasing JavaScript Usage in Browsers 2013-2016\" /></p>\n\n<p>Another factor is the explosive popularity of Node.js. Whereas previously the amount of JavaScript written was limited to client-side usage, Node.js ensured that a whole new group of developers would be writing JavaScript. With JavaScript running in the browser and on the server, that would naturally lead to an increase in demand for JavaScript tooling. Since ESLint can be used for both browser and Node.js JavaScript, it was well-suited to address this demand.</p>\n\n<h2 id=\"linting-has-become-more-popular\">Linting has become more popular</h2>\n\n<p>As the demand for JavaScript tooling increased, so too did the demand for JavaScript linting. This logically makes sense because the more JavaScript you write, the more you’re going to need help keeping it functional and avoiding common mistakes. You can see this general trend by looking at the npm download numbers for JSHint, JSCS, and ESLint since mid-2013.</p>\n\n<p><img src="https://humanwhocodes.com/feeds/\&quot;https://www.nczonline.net/images/posts/blog-eslint-chart.png\&quot;" alt=\"Chart - Increasing downloads for all JavaScript linters\" /></p>\n\n<p>JSCS and ESLint were created right around the same time, so it’s interesting to see the growth trajectories for each as compared to JSHint. JSHint has continued its domination of JavaScript linting popularity into the beginning of 2016. Both JSCS and ESLint continue to grow over time, as well. Perhaps the most interesting part of this data is that all three tools are continuing to grow their download counts over time, implying that there are more people downloading linters each month than there are people switching linters.</p>\n\n<p>So ESLint is really just part of a larger trend towards more JavaScript linting by the development community.</p>\n\n<h2 id=\"the-ecmascript-6babel-factor\">The ECMAScript 6/Babel factor</h2>\n\n<p>The excitement around ECMAScript 6 has been growing steadily for the past four years, so much so that it made Babel a massively successful project. The ability to start using ECMAScript 6 syntax and features without waiting for official support in browsers and Node.js meant demand for a new class of JavaScript tools. There just wasn’t enough tooling for ECMAScript 6 code, and in this regard, JSHint fell pretty far behind.</p>\n\n<p>ESLint, on the other hand, had a very big advantage: you could swap out the default parser for another one so long as it produced the same format as Esprima (or Espree). That meant those who wanted to use ECMAScript 6 could use the now-discontinued Facebook fork of Esprima with ES6 support immediately to get some basic linting for their code. Espree was also updated to support ES6 (mostly by pulling features from the Facebook Esprima fork). That made developers using ES6 quite happy.</p>\n\n<p>Of course, Babel didn’t stop at implementing ES6 features, going on to include experimental features. That meant there was demand for tools that could deal with not just the standard features, but anything that was in any stage of development for JavaScript. Here, ESLint’s pluggable parser capability also made a big difference because <code class=\"highlighter-rouge\">babel-eslint</code><sup id=\"fnref:4\"><a href="https://humanwhocodes.com/feeds/\&quot;#fn:4\"" class=\"footnote\">4</a></sup> was created by the Babel team as a wrapper around Babel that ESLint could use.</p>\n\n<p>Before long, ESLint was the recommended linter for anyone using ECMAScript 6 or Babel, and it was made possible by a decision to allow the default parser to be swapped out for a compatible one.</p>\n\n<p>Today, <code class=\"highlighter-rouge\">babel-eslint</code> is used in roughly 41% of ESLint installs (based on npm download statistics).</p>\n\n<h2 id=\"the-react-factor\">The React factor</h2>\n\n<p>It’s impossible to talk about ESLint’s popularity without talking about React. A key part of React is the ability to embed JSX code inside of JavaScript, and that was something no other linter was capable of doing at first. ESLint not only implemented JSX as part of the default parser, but with pluggable parsers, you could use babel-eslint or Facebook’s Esprima fork to get JSX support. React users were starting to turn to ESLint because of this.</p>\n\n<p>There were a lot of requests to create React-specific rules in ESLint itself, but as a policy, I never wanted library-specific rules as those would inevitably require a lot of maintenance. In December 2014, <code class=\"highlighter-rouge\">eslint-plugin-react</code><sup id=\"fnref:5\"><a href="https://humanwhocodes.com/feeds/\&quot;#fn:5\"" class=\"footnote\">5</a></sup> was introduced with React-specific rules and really caught on quickly with React developers.</p>\n\n<p>Then, in February 2015, Dan Abramov wrote, “Lint like it’s 2015”<sup id=\"fnref:6\"><a href="https://humanwhocodes.com/feeds/\&quot;#fn:6\"" class=\"footnote\">6</a></sup>. In that post, he described how well ESLint worked with React, and had high praise:</p>\n\n<blockquote>\n  <p>If you haven’t heard of it, ESLint is the linter I always wanted JSHint to be.</p>\n</blockquote>\n\n<p>Dan also walked people through setting up ESLint and how to use babel-eslint, providing some much-needed documentation for the process. It’s pretty clear to see that this was a big turning point for ESLint as the monthly download count nearly doubled from 89,000 in February 2015 to 161,000 in March 2015. That really seemed to kick off a period of rapid growth for ESLint that has continued to this day.</p>\n\n<p>Today, <code class=\"highlighter-rouge\">eslint-plugin-react</code> is used in a bit more than 45% of ESLint installs (based on npm download statistics).</p>\n\n<h2 id=\"extensibility-was-key\">Extensibility was key</h2>\n\n<p>From the beginning, I had this idea that ESLint could be a small core utility at the center of a larger ecosystem. My goal was to make ESLint ageless by allowing enough extension points that my failure to deliver features would not stop ESLint from acquiring new capabilities. While ESLint hasn’t yet met that vision completely, it is extremely flexible:</p>\n\n<ul>\n  <li>You can add new rules at runtime, allowing anyone to write their own rules. I saw this as key if I wanted to avoid spending every day with a laundry list of random rules people wanted. Now, there’s nothing stopping anyone from writing an ESLint rule.</li>\n  <li>The pluggable parser means that ESLint can work with anything outputting the same format as Espree. As I’ve already discussed, this has been a big reason for ESLint’s popularity.</li>\n  <li>Shareable configurations all people to package up their configs and share them, making it easy to have multiple projects adhere to the same configuration (eslint-config-airbnb is used in 15% of ESLint installs).</li>\n  <li>Plugins allow people to easily package and share their rules, text processors, environments, and configurations with anyone.</li>\n  <li>A rational Node.js API that made it easy to create build tool plugins (for Grunt, Gulp, and more) as well as led to the creation of no-configuration linters like Standard and XO.</li>\n</ul>\n\n<p>I’m hoping we can add more extension points to ESLint as it continues to evolve.</p>\n\n<h2 id=\"listening-to-the-community\">Listening to the community</h2>\n\n<p>One of the things I tried very hard to do was really listen to the ESLint community. While I was pretty stubborn early on about my vision for ESLint, I came to realize that there is definitely a wisdom in crowds. The more you hear the same suggestions over and over, the more likely it’s a real pain point that should be addressed. I’m much better now about watching for these patterns, as the community has really come through with some great ideas that have led to ESLint’s success:</p>\n\n<ol>\n  <li><strong>The pluggable parser feature</strong> - a direct request from Facebook so they could use their own fork of Esprima with ESLint.</li>\n  <li><strong>JSX support</strong> - early on, I was very against including JSX support by default. But the request kept coming up, so I eventually agreed. And as mentioned earlier, that has been a key part of ESLint’s success.</li>\n  <li><strong>Shareable configs</strong> - this came about due to the emergence of Standard and other wrappers around ESLint whose sole purpose was to run ESLint with a specific configuration. It seemed like the community really wanted an easy way to share configs, and so shareable configs were born.</li>\n  <li><strong>Plugins</strong> - early on, the only way to load your own rules was from the filesystem using the <code class=\"highlighter-rouge\">--rulesdir</code> command line option. Pretty soon, people started packaging up their rules into npm packages and publishing them. This was a bit of a painful process, and it was hard to use more than one package at a time, so we ended up adding plugins so that rules could easily be shared.</li>\n</ol>\n\n<p>It’s pretty clear that the ESLint community has some fantastic ideas for how the project should grow, and there’s little doubt that ESLint’s success is directly to them.</p>\n\n<h2 id=\"grassroots-support\">Grassroots support</h2>\n\n<p>Since ESLint was created, I wrote exactly two blog posts about it. The first was the intro post on my personal blog<sup id=\"fnref:2:1\"><a href="https://humanwhocodes.com/feeds/\&quot;#fn:2\"" class=\"footnote\">2</a></sup> and the second was a followup on Smashing Magazine<sup id=\"fnref:7\"><a href="https://humanwhocodes.com/feeds/\&quot;#fn:7\"" class=\"footnote\">7</a></sup> last September. Other than that, the extent of my marketing for ESLint was limited to mention it on Twitter and managing the ESLint Twitter account. If I had been well enough to give talks, I’m sure I could have done a better job marketing ESLint, but since I wasn’t, I decided that I wouldn’t even try to promote it.</p>\n\n<p>I was pleasantly surprised when I started seeing other people giving talks and writing articles about ESLint. In the beginning, it was people that I didn’t know and had never heard of. Articles (such as Dan’s) were popping up and people were posting videos of conference and meetup talks about ESLint. The popularity grew organically as more content was posted online.</p>\n\n<p>An interesting contrast is in the growth story of JSCS. Early on, JSCS got JSHint’s endorsement as a companion to JSHint. JSHint had decided to remove stylistic rules altogether and JSCS serves as a replacement for those rules. As such, the JSHint team was referring people to JSCS when questions arose. Having the support of the undeniable leader in the space is huge, and for most of the early days, JSCS usage far outpaced ESLint usage. At several points during that first year, I thought that JSCS would crush ESLint and I could go back to having my nights and weekends free. But that didn’t happen.</p>\n\n<p>The strong grassroots support sustained ESLint and eventually helped it onto a tremendous growth spurt. Users were creating more users and more buzz, and ESLint was along for the ride.</p>\n\n<h2 id=\"focusing-on-usefulness-not-competition\">Focusing on usefulness not competition</h2>\n\n<p>One of the things I’m most proud of is the story that came along with ESLint. At no point did I make any claims that ESLint was better than anything else. I never asked people to switch from JSHint or JSCS. My main message was that ESLint was better for your project is you wanted to write custom rules. That was it. To this day, the ESLint README says (in the FAQ):</p>\n\n<blockquote>\n  <p>I’m not trying to convince you that ESLint is better than JSHint. The only thing I know is that ESLint is better than JSHint for what I’m doing. In the off chance you’re doing something similar, it might be better for you. Otherwise, keep using JSHint, I’m certainly not going to tell you to stop using it.</p>\n</blockquote>\n\n<p>That’s been my position, and now the position of the team, all along. I still believe JSHint is a good tool and has a lot of advantages. JSCS, as well, is a good tool that has some real benefits. Many people use a combination of JSHint and JSCS and are quite happy, and for those people, I’d encourage them to continue doing so.</p>\n\n<p>The focus of ESLint is really just to be as useful as possible and let developers decide if it’s right for them. All decisions are made based on how useful changes are to our community and not based on competition with other tools. There’s plenty of room in the world for multiple linting tools, there doesn’t have to be just one.</p>\n\n<h2 id=\"patience-pays-off\">Patience pays off</h2>\n\n<p>I’ve mentioned before<sup id=\"fnref:8\"><a href="https://humanwhocodes.com/feeds/\&quot;#fn:8\"" class=\"footnote\">8</a></sup> that there seems to be a frantic race to create popular open source projects, with a focus on popularity over everything else. ESLint is a good example of how long it takes for a project to organically grow into a success. For the first nearly two years of its existence, ESLint downloads were a distant third behind JSHint and JSCS. It took time for both ESLint and its community to mature. The “overnight” success of ESLint didn’t happen over night, it happened by continuing to improve the project based on usefulness and community feedback.</p>\n\n<h2 id=\"a-great-team\">A great team</h2>\n\n<p>I’ve been truly blessed with a fantastic team of contributors to ESLint. As I’ve had less energy and time to work on ESLint, they have picked up a lot of the slack. The thing that amazes me constantly is that I’ve never met these people in real life, nor have I ever heard their voices, yet they’ve become a group of people I look forward to conversing with every day. Their undying passion and creativity has kept ESLint going as I’ve struggled with my health, and while I started ESLint alone, they are undoubtedly the reason it survived long enough to reach its current level of popularity.</p>\n\n<p>A huge thanks to Ilya Volodin, Brandon Mills, Gyandeep Singh, Mathias Schreck, Jamund Ferguson, Ian VanSchooten, Toru Nagashima, Burak Yiğit Kaya, and Alberto Rodríguez for all of your hard work.</p>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<p>There are a lot of factors that have led to the success of ESLint, and by sharing them, I’m hoping to give others a roadmap for what it takes to create a successful open source project. As with most worthwhile endeavors, a bit of luck coupled with the support of others and a clear vision for what I was trying to accomplish were all key parts of this story. I’m a big believer that if you focus on creating something useful, and you’re willing to put in the hard work, eventually the work will get the recognition it deserves.</p>\n\n<p>ESLint is continuing to grow and change, and the team and community are growing and changing as well. I’m very excited to see where ESLint goes next.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n  <ol>\n    <li id=\"fn:1\">\n      <p><a href="https://humanwhocodes.com/feeds/\&quot;http://eslint.org\&quot;">ESLint</a> (eslint.org) <a href="https://humanwhocodes.com/feeds/\&quot;#fnref:1\"" class=\"reversefootnote\">&#8617;</a></p>\n    </li>\n    <li id=\"fn:2\">\n      <p><a href="https://humanwhocodes.com/feeds/\&quot;https://www.nczonline.net/blog/2013/07/16/introducing-eslint/\&quot;">Introducing ESLint</a> (nczonline.net) <a href="https://humanwhocodes.com/feeds/\&quot;#fnref:2\"" class=\"reversefootnote\">&#8617;</a> <a href="https://humanwhocodes.com/feeds/\&quot;#fnref:2:1\"" class=\"reversefootnote\">&#8617;<sup>2</sup></a></p>\n    </li>\n    <li id=\"fn:3\">\n      <p><a href="https://humanwhocodes.com/feeds/\&quot;http://httparchive.org/trends.php?s=All&amp;minlabel=Jul+15+2013&amp;maxlabel=Jan+15+2016#bytesJS&amp;reqJS\"">HTTP Archive Trends 2013-2016</a> (httparchive.org) <a href="https://humanwhocodes.com/feeds/\&quot;#fnref:3\"" class=\"reversefootnote\">&#8617;</a></p>\n    </li>\n    <li id=\"fn:4\">\n      <p><a href="https://humanwhocodes.com/feeds/\&quot;https://github.com/babel/babel-eslint\&quot;">babel-eslint</a> (github.com) <a href="https://humanwhocodes.com/feeds/\&quot;#fnref:4\"" class=\"reversefootnote\">&#8617;</a></p>\n    </li>\n    <li id=\"fn:5\">\n      <p><a href="https://humanwhocodes.com/feeds/\&quot;https://github.com/yannickcr/eslint-plugin-react\&quot;">eslint-plugin-react</a> (github.com) <a href="https://humanwhocodes.com/feeds/\&quot;#fnref:5\"" class=\"reversefootnote\">&#8617;</a></p>\n    </li>\n    <li id=\"fn:6\">\n      <p><a href="https://humanwhocodes.com/feeds/\&quot;https://medium.com/@dan_abramov/lint-like-it-s-2015-6987d44c5b48#.giue3dxsd\"">Lint like it’s 2015</a> (medium.com) <a href="https://humanwhocodes.com/feeds/\&quot;#fnref:6\"" class=\"reversefootnote\">&#8617;</a></p>\n    </li>\n    <li id=\"fn:7\">\n      <p><a href="https://humanwhocodes.com/feeds/\&quot;https://www.smashingmagazine.com/2015/09/eslint-the-next-generation-javascript-linter/\&quot;">ESLint: The Next Generation JavaScript Linter</a> (smashingmagazine.com) <a href="https://humanwhocodes.com/feeds/\&quot;#fnref:7\"" class=\"reversefootnote\">&#8617;</a></p>\n    </li>\n    <li id=\"fn:8\">\n      <p><a href="https://humanwhocodes.com/feeds/\&quot;https://www.nczonline.net/blog/2015/12/why-im-not-using-your-open-source-project/\&quot;">Why I’m not using your open source project</a> (nczonline.net) <a href="https://humanwhocodes.com/feeds/\&quot;#fnref:8\"" class=\"reversefootnote\">&#8617;</a></p>\n    </li>\n  </ol>\n</div>\n",
            "url": "https://humanwhocodes.com/blog/2016/02/reflections-on-eslints-success/",
            
            
            
            "tags": ["JavaScript","ESLint","JSHint","JSCS","Linters"],
            
            "date_published": "2016-02-09T00:00:00+00:00",
            "date_modified": "2016-02-09T00:00:00+00:00",
            
                "author": 
                ""
                
            
        },
    
        {
            "id": "https://humanwhocodes.com/blog/2016/01/react-and-the-economics-of-dynamic-web-interfaces/",
            "title": "React and the economics of dynamic web interfaces",
            "summary": "I’ve been doing web development since 2000, and in that time I’ve seen eras marked by libraries and frameworks come and go. The Ajax era began around the same time as the jQuery era began, the Backbone era began several years later, and the React era really began about two years ago. Each of these eras brought with it a new realization about the way we can build dynamic web interfaces based on the tools available. jQuery made it clear that browser abstractions and CSS querying were important to developers, Backbone introduced the concept of client-side architecture to many, and React enables the creation of UI components instead of templates.",
            "content_text": "I’ve been doing web development since 2000, and in that time I’ve seen eras marked by libraries and frameworks come and go. The Ajax era began around the same time as the jQuery era began, the Backbone era began several years later, and the React era really began about two years ago. Each of these eras brought with it a new realization about the way we can build dynamic web interfaces based on the tools available. jQuery made it clear that browser abstractions and CSS querying were important to developers, Backbone introduced the concept of client-side architecture to many, and React enables the creation of UI components instead of templates.\n\nThere are plenty of blog posts, talks, and videos touting how React works and why it’s good for web development. There’s been a lot of discussion around the virtual DOM, embedding HTML into JavaScript with JSX, organizing the UI into components. These are all interesting technical pieces of React, however, I don’t believe the technical aspects alone account for its popularity. After researching a bit more, I realized why React is so powerful: it fundamentally changes an equation we’ve all been working with for years, and an idea can be much more powerful than the technology implementing it.\n\nThe economics of dynamic web interfaces\n\nEver since the Document Object Model (DOM) was introduced and widely adopted in web browsers, web developers have been met with the same advice: the DOM is slow. Avoid DOM updates. Repaint and reflow will get you. In short, there was a tangible cost to dynamically updating a web page, and that cost is broken down into:\n\n\n  Performance - making changes to the DOM is slow due to repaint and reflow\n  Efficiency - you can end up creating memory leaks by losing track of node references\n  Complexity - make sure you’re detaching and reattaching event handlers in the correct spots\n\n\nWhen you stop and look at it this way, the cost of updating the DOM is high enough that the value you get from that cost needs to be sufficiently high to justify the cost. Or, you can try to lower the cost such that the value doesn’t have to be as high to justify it. So we developed a whole series of approaches to try and lower that cost:\n\n\n  Make only small changes. Large changes are slow, so if you can stick to small changes, it will be less slow.\n  For big changes, detach the DOM node from the document, make your changes, and then reattach the DOM node. This will avoid repaint and reflow.\n  Use event delegation to listen for events at a high level so you won’t accidentally remove a node that has an important event handler.\n\n\nEach of these approaches chips away at the cost of updating the DOM but doesn’t do anything to fundamentally change the equation. In this world, you would never dream of issuing a command to re-render the entire page multiple times as it would undoubtedly cause a poor user experience. And that’s exactly what React changes.\n\nReact changes the equation\n\nAs you’re undoubtedly aware, React solves a lot of these problems. It manages your event handlers for you, ensuring they’re attached and detached at the correct time and on the correct nodes; it creates and destroys DOM structures efficiently; it uses virtual DOM diffing to determine which parts of a component have changed and only updates those parts. All of these technical solutions change the old equation: DOM updates are now fast.\n\n(Yes, there is some debate[1] as to whether React is as fast as people claim or not. That’s really not important for this discussion, as it’s the idea of DOM updates being fast that is important).\n\nChanging the equation has a ripple effect through how we develop web applications. This occurred to me first when looking at React Router[2]. The basic premise of React Router is that when the URL changes, it’s intercepted by the History API’s[3] state mechanism, and then the entire view is re-rendered. Before React, you would never think of dynamically re-rendering an entire page at one time, it would be too slow. The complexity of ensuring that the page worked correctly was high, and while some would do it, it would undoubtedly be the source of bugs. So we’d just stick to re-rendering smaller portions of the page.\n\nBut with React, you don’t think twice about re-rendering the entire page because, in all likelihood, you won’t be re-rendering everything. You’ll just be re-rendering the pieces that need change. The cost of each render remains relatively consistent and is based only on the parts of the page that have changed, so there’s little difference between manually re-rendering just the part of the page that has changed and re-rendering the entire page. Those are effectively the same operations.\n\nReact has, ironically, allowed us to once again think about writing web applications as a series of pages rather than a monolithic blob of JavaScript code. It’s no wonder that developers have become so engaged with React and React Router: it’s the same mental model as traditional server-only applications. A page is rendered, some changes are requested, then a page is rendered with those changes. The only difference is that this can all happen client-side.\n\nConclusion\n\nI’m still learning about React, and while the technical details are interesting, the way it has changed the dynamic web interface equation is really impressive to me. I ended up asking myself questions like, “what would you build if there was no cost to client-side rendering?” My mind took off in multiple directions at the same time and I came to realize just how game-changing React is. The most powerful thing any tool can do is fundamentally change the economics of the situation that it works in, and React has done that for client-side development.\n\nReferences\n\n\n  React + Performance = ? (aerotwist.com)\n  React Router (github.com)\n  History API (developer.mozilla.org)\n\n",
            "content_html": "<p>I’ve been doing web development since 2000, and in that time I’ve seen eras marked by libraries and frameworks come and go. The Ajax era began around the same time as the jQuery era began, the Backbone era began several years later, and the React era really began about two years ago. Each of these eras brought with it a new realization about the way we can build dynamic web interfaces based on the tools available. jQuery made it clear that browser abstractions and CSS querying were important to developers, Backbone introduced the concept of client-side architecture to many, and React enables the creation of UI components instead of templates.</p>\n\n<p>There are plenty of blog posts, talks, and videos touting how React works and why it’s good for web development. There’s been a lot of discussion around the virtual DOM, embedding HTML into JavaScript with JSX, organizing the UI into components. These are all interesting technical pieces of React, however, I don’t believe the technical aspects alone account for its popularity. After researching a bit more, I realized why React is so powerful: it fundamentally changes an equation we’ve all been working with for years, and an idea can be much more powerful than the technology implementing it.</p>\n\n<h2 id=\"the-economics-of-dynamic-web-interfaces\">The economics of dynamic web interfaces</h2>\n\n<p>Ever since the Document Object Model (DOM) was introduced and widely adopted in web browsers, web developers have been met with the same advice: the DOM is slow. Avoid DOM updates. Repaint and reflow will get you. In short, there was a tangible cost to dynamically updating a web page, and that cost is broken down into:</p>\n\n<ol>\n  <li><strong>Performance</strong> - making changes to the DOM is slow due to repaint and reflow</li>\n  <li><strong>Efficiency</strong> - you can end up creating memory leaks by losing track of node references</li>\n  <li><strong>Complexity</strong> - make sure you’re detaching and reattaching event handlers in the correct spots</li>\n</ol>\n\n<p>When you stop and look at it this way, the cost of updating the DOM is high enough that the value you get from that cost needs to be sufficiently high to justify the cost. Or, you can try to lower the cost such that the value doesn’t have to be as high to justify it. So we developed a whole series of approaches to try and lower that cost:</p>\n\n<ul>\n  <li>Make only small changes. Large changes are slow, so if you can stick to small changes, it will be less slow.</li>\n  <li>For big changes, detach the DOM node from the document, make your changes, and then reattach the DOM node. This will avoid repaint and reflow.</li>\n  <li>Use event delegation to listen for events at a high level so you won’t accidentally remove a node that has an important event handler.</li>\n</ul>\n\n<p>Each of these approaches chips away at the cost of updating the DOM but doesn’t do anything to fundamentally change the equation. In this world, you would never dream of issuing a command to re-render the entire page multiple times as it would undoubtedly cause a poor user experience. And that’s exactly what React changes.</p>\n\n<h2 id=\"react-changes-the-equation\">React changes the equation</h2>\n\n<p>As you’re undoubtedly aware, React solves a lot of these problems. It manages your event handlers for you, ensuring they’re attached and detached at the correct time and on the correct nodes; it creates and destroys DOM structures efficiently; it uses virtual DOM diffing to determine which parts of a component have changed and only updates those parts. All of these technical solutions change the old equation: DOM updates are now fast.</p>\n\n<p>(Yes, there is some debate[1] as to whether React is as fast as people claim or not. That’s really not important for this discussion, as it’s the <em>idea</em> of DOM updates being fast that is important).</p>\n\n<p>Changing the equation has a ripple effect through how we develop web applications. This occurred to me first when looking at React Router[2]. The basic premise of React Router is that when the URL changes, it’s intercepted by the History API’s[3] state mechanism, and then the entire view is re-rendered. Before React, you would never think of dynamically re-rendering an entire page at one time, it would be too slow. The complexity of ensuring that the page worked correctly was high, and while some would do it, it would undoubtedly be the source of bugs. So we’d just stick to re-rendering smaller portions of the page.</p>\n\n<p>But with React, you don’t think twice about re-rendering the entire page because, in all likelihood, you won’t be re-rendering <em>everything</em>. You’ll just be re-rendering the pieces that need change. The cost of each render remains relatively consistent and is based only on the parts of the page that have changed, so there’s little difference between manually re-rendering just the part of the page that has changed and re-rendering the entire page. Those are effectively the same operations.</p>\n\n<p>React has, ironically, allowed us to once again think about writing web applications as a series of pages rather than a monolithic blob of JavaScript code. It’s no wonder that developers have become so engaged with React and React Router: it’s the same mental model as traditional server-only applications. A page is rendered, some changes are requested, then a page is rendered with those changes. The only difference is that this can all happen client-side.</p>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<p>I’m still learning about React, and while the technical details are interesting, the way it has changed the dynamic web interface equation is really impressive to me. I ended up asking myself questions like, “what would you build if there was no cost to client-side rendering?” My mind took off in multiple directions at the same time and I came to realize just how game-changing React is. The most powerful thing any tool can do is fundamentally change the economics of the situation that it works in, and React has done that for client-side development.</p>\n\n<h2 id=\"references\">References</h2>\n\n<ol>\n  <li><a href="https://humanwhocodes.com/feeds/\&quot;https://aerotwist.com/blog/react-plus-performance-equals-what/\&quot;">React + Performance = ?</a> (aerotwist.com)</li>\n  <li><a href="https://humanwhocodes.com/feeds/\&quot;https://github.com/rackt/react-router\&quot;">React Router</a> (github.com)</li>\n  <li><a href="https://humanwhocodes.com/feeds/\&quot;https://developer.mozilla.org/en-US/docs/Web/API/History_API\&quot;">History API</a> (developer.mozilla.org)</li>\n</ol>\n",
            "url": "https://humanwhocodes.com/blog/2016/01/react-and-the-economics-of-dynamic-web-interfaces/",
            
            
            
            "tags": ["JavaScript","React","jQuery","Backbone","Performance"],
            
            "date_published": "2016-01-26T00:00:00+00:00",
            "date_modified": "2016-01-26T00:00:00+00:00",
            
                "author": 
                ""
                
            
        },
    
        {
            "id": "https://humanwhocodes.com/blog/2015/12/why-im-not-using-your-open-source-project/",
            "title": "Why I'm not using your open source project",
            "summary": "When you think of open source software, you might think of a few specific projects depending on your area of interest. If you work on web applications, the term “open source” might conjure up visions of Apache or Node.js; if you’re into big data, then perhaps Hadoop comes to mind; if you care a lot about security, you might think of OpenSSL; if you’re a front-end developer, then maybe jQuery and React pop into your head. In all cases, you’re thinking about those projects that have succeeded and, to some degree, achieved a level of ubiquity in their respective arenas. It’s with this success in mind that a lot of open source authors venture out, sharing their code with the hopes of reaching a similar level of success and ubiquity.",
            "content_text": "When you think of open source software, you might think of a few specific projects depending on your area of interest. If you work on web applications, the term “open source” might conjure up visions of Apache or Node.js; if you’re into big data, then perhaps Hadoop comes to mind; if you care a lot about security, you might think of OpenSSL; if you’re a front-end developer, then maybe jQuery and React pop into your head. In all cases, you’re thinking about those projects that have succeeded and, to some degree, achieved a level of ubiquity in their respective arenas. It’s with this success in mind that a lot of open source authors venture out, sharing their code with the hopes of reaching a similar level of success and ubiquity.\n\nThere’s a peculiar mix of altruism and egotism that goes into releasing an open source project. On the one hand, you might be solving a problem that others are struggling with, and sharing your solution will save them a lot of time. On the other, the near-fantastic rock star status of those who have created successful open source projects (think John Resig, Ryan Dahl, and Linus Torvalds) drives people to overshare in the hopes of also achieving such status. This has resulted in a glut of open source projects being released into the wild and their creators venturing out on marketing campaigns to attract users.\n\nYou need to be aware of this trend and the reality of open source today: most open source projects are crap, and you need to be careful which ones you use.\n\nNote: For the purposes of this post, the term “use” refers to including the project in your application.\n\nBackground\n\nAs the maintainer of a reasonably popular open source project (ESLint[1]), and an architect at Box, I make a lot of decisions around which open source projects should be used in some widely-used applications. I end up investigating some open source project roughly once a week, and most of the time, end up pretty disappointed with what I find. I want to use open source code as much as possible, but I can’t do it at the expense of maintainability, security, or a whole host of other concerns. Replacing a working custom-built solution with an open source one sounds like an easy win, but in reality, could cause a lot of problems if the wrong open source project is used.\n\nThis post contains the top issues I find in open source projects that cause me to reject their usage.\n\nYour project doesn’t have a license\n\nThis might seem basic, but there are a significant number of open source projects that are published without a license. Simply saying “this is open source” doesn’t make it so, nor does sharing your code publicly on GitHub or BitBucket automatically mean it can be used. Any code that doesn’t explicitly have a license specified is considered “all rights reserved” by the author (this is standard copyright law in the United States[2]). That means you don’t have any legal right to use, reproduce, distribute, or otherwise use the code without the consent of the author.\n\nIf the project seems promising and passes the other checks I use (see below), then I might contact the author and ask for a license to be added. I absolutely won’t use a project that doesn’t have its license terms explicitly defined in the source code repository, so I also will not accept just an email from the author granting me a license.\n\nTakeaway: When you publish your project, make sure you have specified a license. Include a LICENSE file in the repository and mention the license in your README.\n\nYour project is GPL/LGPL licensed\n\nMany credit GPL with the rise in popularity of open source as well as the success of Linux. For those unaware, the GPL has a clause that allows anyone to use the project in its compiled form with no repercussions but if you modify the source code or include it in another project then you must open source that as well. The exact text is as follows[3]:\n\n\n  You must cause any work that you distribute or publish, that in whole or in part contains or is derived from the Program or any part thereof, to be licensed as a whole at no charge to all third parties under the terms of this License.\n\n\nSo when you license code as GPL, that license becomes viral whenever you distribute it, which means including the code in your own open source project. That is a showstopper for businesses wishing to incorporate code from these projects. (You can still safely use the code locally, such as running Linux on a server or using a build-time tool. It’s just including the code in your application that can be problematic.)\n\nThe LGPL[4] slightly modifies the terms of the GPL such that you can link to the project so long as the application doesn’t contain any actual code from the project itself. Here’s the relevant clause:\n\n\n  A program that contains no derivative of any portion of the Library, but is designed to work with the Library by being compiled or linked with it, is called a “work that uses the Library”. Such a work, in isolation, is not a derivative work of the Library, and therefore falls outside the scope of this License.\n\n\nThat means your open source project can link to a LGPL library without triggering the viral clause of the GPL, making it safe to use in business.\n\nHowever, most of the code I deal with is not compiled. JavaScript, Python, PHP, CSS, etc., are a significant gray area because there is no distinction between the source code and the distributed artifact - they are one in the same. If I use a GPL or LGPL JavaScript library that is sent to the browser as part of my application, does that count as distribution? I’ve asked a couple of lawyers about this and the general response I’ve received is, “this is definitely a gray area that hasn’t been decided by the courts.” Perhaps someday someone will bring such a case to the courts and we can know for sure, but in the meantime, I just don’t use GPL or LGPL projects.\n\nTakeaway: If you can choose a more permissive license for your project than GPL or LGPL, please do.\n\nYou aren’t maintaining the code\n\nIt seems that a lot of people see open sourcing something as the pot of gold at the end of the rainbow. They worked hard on some code and the payoff is fame and appreciation from an adoring crowd. But how many of those projects will be around in six months? A year? Is the project something you’re committed to maintaining, or was it just a passing fancy? Why would I want to use that project? It was interesting to you this weekend, but if I come to rely on it, can I count on you continuing to update it?\n\nWhen evaluating a project, I typically look at:\n\n\n  When was the last commit?\n  Are there responses to the most recent issues?\n  When was the version released?\n  Are pull requests being merged at all?\n\n\nThese all tell me how well the project is being maintained. If the most recent commit is a year ago, then I’m pretty sure no one is maintaining it. The larger the project, the more this means the project is likely abandoned. Further, it likely means the author hasn’t really thought about the project in a while and might not even remember all of how it works (both bad signs). The smaller the project, the shorter the timeframe I consider (a project with one author and zero commits in three months is likely abandoned).\n\nSimilarly, the activity in issues and pull requests says a lot. Is the author engaging with people at all? Open to accepting feedback and patches? And are those turned around into new versions? If I’m going to rely on something, I need to know that either the author will fix problems or my patches will be accepted when I find problems.\n\nPeriodically I’ll get people telling me that they’ll maintain something if I use it. That’s a nice though, but saying you’ll maintain something is very different from actually doing it. I prefer to see a track record of maintenance happening regardless of my involvement.\n\nTakeaway: If you’re unsure that you want to work on this project for more than a year, think twice before encouraging people to adopt it. Don’t lead them down a dead end. Build up a pattern of maintaining your code and let that speak for itself.\n\nYou don’t have documentation or tests\n\nI group documentation and tests together because they are similar: documentation describes how the end user should use the project and tests describe how the project should technically work. If a project is missing either of these or both, then I don’t consider it worth my time to investigate. A lack of documentation means I need to dig through the code to figure out how to use it and a lack of tests means there’s no way to tell when something breaks. Both situations are dire if you intend to rely on the functionality in a product.\n\nTakeaway: Make sure you have documentation and tests for at least the core parts of the project.\n\nYou aren’t using the project\n\nThis is an interesting occurrence in the world of open source: people who don’t use the projects they create. Sometimes, this the result of an open source project that began as a weekend hobby project and the author doesn’t want to leave the source code to die on their computer. Instead, they open source it with the hope of “letting it live,” like releasing an animal into the wild. I frequently see people announcing such projects on their Twitter stream, proudly proclaiming that this project they spent 48 hours on is now ready for use. They themselves aren’t using it in any product or in any way that could be considered “production,” but they would like you to do so.\n\nWeekend projects might be fun to play with, but relying on them for something important is placing a huge bet on an unknown quantity. I generally prefer to use projects that others are already using. The reason is simple: the more production-like places the project is used, the more someone is interested in maintaining it.\n\nIf you yourself, the author, aren’t using the project in some production environment then you are essentially asking me to take a risk that you’ve been unwilling to take. I didn’t even attempt to use ESLint at Box until it had been in existence and use on my own personal projects for eight months. Even then, I ended up spending a lot of time chasing down bugs and fixing compatibility issues. ESLint got better not just because it was open source, but because I was putting it through a lot in my day-to-day work.\n\nTakeaway: You should always be your project’s first user. Make sure you’ve created something that’s useful for yourself first, then ask friends to try it out.\n\nIn closing\n\nI think open source is wonderful for many reasons, but not all open source projects are created the same. “Free” isn’t the same as “good,” and projects that don’t measure up (based on the criteria) in this article should be handled with care. As I said in the introduction, the majority of open source projects are crap, so picking out the good ones is a tough job. When you succeed, you’re able to accelerate and stabilize your code base; when you fail, you can cause immeasurable harm to that same code base.\n\nThis isn’t to dissuade anyone from open sourcing their work - please continue to do so. Just realize that there is a significant bar for open source projects that are reliable enough to use in a product. If you want your project to succeed, you should be aiming for that bar. If you’re just sharing so your code can live on, be sure to say so in your README. There’s plenty of room in the open source ecosystem for both categories of projects, we just really need people to be better about pointing out which is which.\n\nUpdate(2015-Dec-15): Clarified language around GPL and LGPL license. Also added note that “use” means including in your application to further clarify the concerns.\n\nReferences\n\n\n  ESLint (github.com)\n  Copyright is Automatic (nolo.com)\n  GPL 2.0 (opensource.org)\n\n",
            "content_html": "<p>When you think of open source software, you might think of a few specific projects depending on your area of interest. If you work on web applications, the term “open source” might conjure up visions of Apache or Node.js; if you’re into big data, then perhaps Hadoop comes to mind; if you care a lot about security, you might think of OpenSSL; if you’re a front-end developer, then maybe jQuery and React pop into your head. In all cases, you’re thinking about those projects that have succeeded and, to some degree, achieved a level of ubiquity in their respective arenas. It’s with this success in mind that a lot of open source authors venture out, sharing their code with the hopes of reaching a similar level of success and ubiquity.</p>\n\n<p>There’s a peculiar mix of altruism and egotism that goes into releasing an open source project. On the one hand, you might be solving a problem that others are struggling with, and sharing your solution will save them a lot of time. On the other, the near-fantastic rock star status of those who have created successful open source projects (think John Resig, Ryan Dahl, and Linus Torvalds) drives people to overshare in the hopes of also achieving such status. This has resulted in a glut of open source projects being released into the wild and their creators venturing out on marketing campaigns to attract users.</p>\n\n<p>You need to be aware of this trend and the reality of open source today: most open source projects are crap, and you need to be careful which ones you use.</p>\n\n<p><strong>Note:</strong> For the purposes of this post, the term “use” refers to including the project in your application.</p>\n\n<h2 id=\"background\">Background</h2>\n\n<p>As the maintainer of a reasonably popular open source project (ESLint[1]), and an architect at Box, I make a lot of decisions around which open source projects should be used in some widely-used applications. I end up investigating some open source project roughly once a week, and most of the time, end up pretty disappointed with what I find. I want to use open source code as much as possible, but I can’t do it at the expense of maintainability, security, or a whole host of other concerns. Replacing a working custom-built solution with an open source one sounds like an easy win, but in reality, could cause a lot of problems if the wrong open source project is used.</p>\n\n<p>This post contains the top issues I find in open source projects that cause me to reject their usage.</p>\n\n<h2 id=\"your-project-doesnt-have-a-license\">Your project doesn’t have a license</h2>\n\n<p>This might seem basic, but there are a significant number of open source projects that are published without a license. Simply saying “this is open source” doesn’t make it so, nor does sharing your code publicly on GitHub or BitBucket automatically mean it can be used. Any code that doesn’t explicitly have a license specified is considered “all rights reserved” by the author (this is standard copyright law in the United States[2]). That means you don’t have any legal right to use, reproduce, distribute, or otherwise use the code without the consent of the author.</p>\n\n<p>If the project seems promising and passes the other checks I use (see below), then I might contact the author and ask for a license to be added. I absolutely won’t use a project that doesn’t have its license terms explicitly defined in the source code repository, so I also will not accept just an email from the author granting me a license.</p>\n\n<p><strong>Takeaway:</strong> When you publish your project, make sure you have specified a license. Include a <code class=\"highlighter-rouge\">LICENSE</code> file in the repository and mention the license in your <code class=\"highlighter-rouge\">README</code>.</p>\n\n<h2 id=\"your-project-is-gpllgpl-licensed\">Your project is GPL/LGPL licensed</h2>\n\n<p>Many credit GPL with the rise in popularity of open source as well as the success of Linux. For those unaware, the GPL has a clause that allows anyone to use the project in its compiled form with no repercussions but if you modify the source code or include it in another project then you must open source that as well. The exact text is as follows[3]:</p>\n\n<blockquote>\n  <p>You must cause any work that you distribute or publish, that in whole or in part contains or is derived from the Program or any part thereof, to be licensed as a whole at no charge to all third parties under the terms of this License.</p>\n</blockquote>\n\n<p>So when you license code as GPL, that license becomes viral whenever you distribute it, which means including the code in your own open source project. That is a showstopper for businesses wishing to incorporate code from these projects. (You can still safely use the code locally, such as running Linux on a server or using a build-time tool. It’s just including the code in your application that can be problematic.)</p>\n\n<p>The LGPL[4] slightly modifies the terms of the GPL such that you can link to the project so long as the application doesn’t contain any actual code from the project itself. Here’s the relevant clause:</p>\n\n<blockquote>\n  <p>A program that contains no derivative of any portion of the Library, but is designed to work with the Library by being compiled or linked with it, is called a “work that uses the Library”. Such a work, in isolation, is not a derivative work of the Library, and therefore falls outside the scope of this License.</p>\n</blockquote>\n\n<p>That means your open source project can link to a LGPL library without triggering the viral clause of the GPL, making it safe to use in business.</p>\n\n<p>However, most of the code I deal with is not compiled. JavaScript, Python, PHP, CSS, etc., are a significant gray area because there is no distinction between the source code and the distributed artifact - they are one in the same. If I use a GPL or LGPL JavaScript library that is sent to the browser as part of my application, does that count as distribution? I’ve asked a couple of lawyers about this and the general response I’ve received is, “this is definitely a gray area that hasn’t been decided by the courts.” Perhaps someday someone will bring such a case to the courts and we can know for sure, but in the meantime, I just don’t use GPL or LGPL projects.</p>\n\n<p><strong>Takeaway:</strong> If you can choose a more permissive license for your project than GPL or LGPL, please do.</p>\n\n<h2 id=\"you-arent-maintaining-the-code\">You aren’t maintaining the code</h2>\n\n<p>It seems that a lot of people see open sourcing something as the pot of gold at the end of the rainbow. They worked hard on some code and the payoff is fame and appreciation from an adoring crowd. But how many of those projects will be around in six months? A year? Is the project something you’re committed to maintaining, or was it just a passing fancy? Why would I want to use that project? It was interesting to you this weekend, but if I come to rely on it, can I count on you continuing to update it?</p>\n\n<p>When evaluating a project, I typically look at:</p>\n\n<ol>\n  <li>When was the last commit?</li>\n  <li>Are there responses to the most recent issues?</li>\n  <li>When was the version released?</li>\n  <li>Are pull requests being merged at all?</li>\n</ol>\n\n<p>These all tell me how well the project is being maintained. If the most recent commit is a year ago, then I’m pretty sure no one is maintaining it. The larger the project, the more this means the project is likely abandoned. Further, it likely means the author hasn’t really thought about the project in a while and might not even remember all of how it works (both bad signs). The smaller the project, the shorter the timeframe I consider (a project with one author and zero commits in three months is likely abandoned).</p>\n\n<p>Similarly, the activity in issues and pull requests says a lot. Is the author engaging with people at all? Open to accepting feedback and patches? And are those turned around into new versions? If I’m going to rely on something, I need to know that either the author will fix problems or my patches will be accepted when I find problems.</p>\n\n<p>Periodically I’ll get people telling me that they’ll maintain something if I use it. That’s a nice though, but saying you’ll maintain something is very different from actually doing it. I prefer to see a track record of maintenance happening regardless of my involvement.</p>\n\n<p><strong>Takeaway:</strong> If you’re unsure that you want to work on this project for more than a year, think twice before encouraging people to adopt it. Don’t lead them down a dead end. Build up a pattern of maintaining your code and let that speak for itself.</p>\n\n<h2 id=\"you-dont-have-documentation-or-tests\">You don’t have documentation or tests</h2>\n\n<p>I group documentation and tests together because they are similar: documentation describes how the end user should use the project and tests describe how the project should technically work. If a project is missing either of these or both, then I don’t consider it worth my time to investigate. A lack of documentation means I need to dig through the code to figure out how to use it and a lack of tests means there’s no way to tell when something breaks. Both situations are dire if you intend to rely on the functionality in a product.</p>\n\n<p><strong>Takeaway:</strong> Make sure you have documentation and tests for at least the core parts of the project.</p>\n\n<h2 id=\"you-arent-using-the-project\">You aren’t using the project</h2>\n\n<p>This is an interesting occurrence in the world of open source: people who don’t use the projects they create. Sometimes, this the result of an open source project that began as a weekend hobby project and the author doesn’t want to leave the source code to die on their computer. Instead, they open source it with the hope of “letting it live,” like releasing an animal into the wild. I frequently see people announcing such projects on their Twitter stream, proudly proclaiming that this project they spent 48 hours on is now ready for use. They themselves aren’t using it in any product or in any way that could be considered “production,” but they would like you to do so.</p>\n\n<p>Weekend projects might be fun to play with, but relying on them for something important is placing a huge bet on an unknown quantity. I generally prefer to use projects that others are already using. The reason is simple: the more production-like places the project is used, the more someone is interested in maintaining it.</p>\n\n<p>If you yourself, the author, aren’t using the project in some production environment then you are essentially asking me to take a risk that you’ve been unwilling to take. I didn’t even attempt to use ESLint at Box until it had been in existence and use on my own personal projects for eight months. Even then, I ended up spending a lot of time chasing down bugs and fixing compatibility issues. ESLint got better not just because it was open source, but because I was putting it through a lot in my day-to-day work.</p>\n\n<p><strong>Takeaway:</strong> You should always be your project’s first user. Make sure you’ve created something that’s useful for yourself first, then ask friends to try it out.</p>\n\n<h2 id=\"in-closing\">In closing</h2>\n\n<p>I think open source is wonderful for many reasons, but not all open source projects are created the same. “Free” isn’t the same as “good,” and projects that don’t measure up (based on the criteria) in this article should be handled with care. As I said in the introduction, the majority of open source projects are crap, so picking out the good ones is a tough job. When you succeed, you’re able to accelerate and stabilize your code base; when you fail, you can cause immeasurable harm to that same code base.</p>\n\n<p>This isn’t to dissuade anyone from open sourcing their work - please continue to do so. Just realize that there is a significant bar for open source projects that are reliable enough to use in a product. If you want your project to succeed, you should be aiming for that bar. If you’re just sharing so your code can live on, be sure to say so in your README. There’s plenty of room in the open source ecosystem for both categories of projects, we just really need people to be better about pointing out which is which.</p>\n\n<p><strong>Update(2015-Dec-15):</strong> Clarified language around GPL and LGPL license. Also added note that “use” means including in your application to further clarify the concerns.</p>\n\n<h2 id=\"references\">References</h2>\n\n<ol>\n  <li><a href="https://humanwhocodes.com/feeds/\&quot;https://github.com/eslint/eslint\&quot;">ESLint</a> (github.com)</li>\n  <li><a href="https://humanwhocodes.com/feeds/\&quot;http://www.nolo.com/legal-encyclopedia/copyright-automatic.html\&quot;">Copyright is Automatic</a> (nolo.com)</li>\n  <li><a href="https://humanwhocodes.com/feeds/\&quot;https://opensource.org/licenses/GPL-2.0\&quot;">GPL 2.0</a> (opensource.org)</li>\n</ol>\n",
            "url": "https://humanwhocodes.com/blog/2015/12/why-im-not-using-your-open-source-project/",
            
            
            
            "tags": ["Open Source","Maintainability","Software Design"],
            
            "date_published": "2015-12-15T00:00:00+00:00",
            "date_modified": "2015-12-15T00:00:00+00:00",
            
                "author": 
                ""
                
            
        },
    
        {
            "id": "https://humanwhocodes.com/blog/2015/11/performance-implication-object-defineproperty/",
            "title": "Hidden performance implications of Object.defineProperty()",
            "summary": "I’ve recently been working on a project to port Espree[1], the parser that powers ESLint[2], to use Acorn[3]. In so doing, I ran into an interesting performance problem related Object.defineProperty(). It seems that any call to Object.defineProperty() has a nontrivial negative affect on performance in V8 (both Node.js and Chrome). An investigation led to some interesting results.",
            "content_text": "I’ve recently been working on a project to port Espree[1], the parser that powers ESLint[2], to use Acorn[3]. In so doing, I ran into an interesting performance problem related Object.defineProperty(). It seems that any call to Object.defineProperty() has a nontrivial negative affect on performance in V8 (both Node.js and Chrome). An investigation led to some interesting results.\n\nThe problem\n\nI noticed the problem the first time I ran ESLint’s performance test, which showed a 500ms slowdown using the Acorn-powered Espree. Using the current version of Espree (v2.2.5), the ESLint performance test always completed in about 2500ms (you can run this yourself by cloining the ESLint repository and running npm run perf). When I switched to use Acorn-powered Espree, that time ballooned to just over 3000ms. A 500ms increase is much too large of a change and would undoubtedly affect ESLint users in a significant way, so I had to figure out what was taking so long.\n\nThe investigation\n\nTo do that, I used ESLint’s profiling command (npm run profile) to run ESLint through Chrome’s profiler. When I did that, something immediately jumped out at me.\n\n\n\nAs you can see, the function esprimaFinishNode() was taking up over 33% of the run time. This function augments the generated AST nodes from Acorn so that they look more like Esprima AST nodes. It took me only a minute to realize that the only out-of-place operation in that function involved Object.defineProperty().\n\nAcorn adds nonstandard start and end properties to each AST node in order to track their position. These properties can’t be removed because Acorn uses them internally to make decision about other nodes. So instead of removing them, Espree was setting them to be nonenumerable using Object.defineProperty(), like this:\n\nObject.defineProperty(node, \"start\", { enumerable: false });\nObject.defineProperty(node, \"end\", { enumerable: false });\n\n\nBy making these properties nonenumerable, the output of JSON serialization would match that from Esprima and anyone using for-in loop would be unaffected. Unfortunately, this was the very thing that caused the performance problem. When I commented out those two lines, the profile run looked very different:\n\n\n\nAll of a sudden, esprimaFinishNode() was no longer where the most time was spent, accounting for less than 5% (owning less than 3%). The different was the two calls to Object.defineProperty().\n\nDigging in deeper\n\nI really wanted to make start and end nonenumerable, so I tried several alternatives to using Object.defineProperty() in esprimaFinishNode().\n\nThe first thing I did was use Object.defineProperties() to define both properties instead of two separate calls to Object.defineProperty(). My thinking was that perhaps each call to Object.defineProperty() was incurring a performance penalty so using one function call instead of two could cut that down. This made no change at all, and so I concluded the reason for the slowdown was not the number of times Object.defineProperty() was called, but rather, the fact that it was called at all.\n\nRemembering some of the information I read about V8 optimization[4], I thought this slowdown might be the result of the object changing shape after it was defined. Perhaps change the attributes of properties was enough to change the shape of the object in V8, and that was causing a less optimal path to be taken. I decided to this theory.\n\nThe first test was the original code, which loosely looked like this:\n\n// Slowest: ~3000ms\nvar node = new Node();\n\nObject.defineProperty(node, \"start\", { enumerable: false });\nObject.defineProperty(node, \"end\", { enumerable: false });\n\n\nAs I mentioned before, this was about 3000ms in the ESLint performance test. The first thing I tried was to move Object.defineProperty() into the Node constructor (which is used to create new AST nodes). I thought that perhaps if I could better define the shape inside the constructor, I’d avoid the late penalties of changing the shape long after its creation. So the second test looked something like this:\n\n// A bit faster: ~2800ms\nfunction Node() {\n    this.start = 0;\n    this.end = 0;\n\n    Object.defineProperty(node, \"start\", { enumerable: false });\n    Object.defineProperty(node, \"end\", { enumerable: false });\n}\n\n\nThis did result in a performance improvement, dropping the ESLint performance test from 3000ms to around 2800ms. Still slower than the original 2500ms, but moving in the right direction.\n\nNext, I wondered if creating the property and then making it enumerable would be slower than just using Object.defineProperty() to both create it and make it enumerable. Thus, I took another stab at it:\n\n// Faster: ~2650ms\nfunction Node() {\n\n    Object.defineProperties(this, {\n        start: { enumerable: false, value: pos, writable: true, configurable: true },\n        end: { enumerable: false, value: pos, writable: true, configurable: true }\n    });\n}\n\n\nThis version brought the ESLint performance test down even further, to around 2650ms. The easiest way to get it back down to 2500ms? Just make the properties enumerable:\n\n// Fastest: ~2500ms\nfunction Node() {\n    this.start = 0;\n    this.end = 0;\n}\n\n\nYes, it turns out not using Object.defineProperty() at all is still the most performant approach.\n\nTakeaways\n\nWhat was most surprising to me is that there was basically no truly efficient way to make properties nonenumerable, especially when compared against simply assigning a new property onto this directly. This investigation showed that if you must use Object.defineProperty(), it’s better to do so inside of a constructor than outside. However, where performance is a consideration, it seems best to avoid using Object.defineProperty() at all.\n\nI’m thankful that I had the ESLint performance test, which runs ESLint on a fairly large JavaScript file, to be able to narrow this issue down. I’m not sure an isolated benchmark would have revealed the extent to which this was a problem for ESLint.\n\nReferences\n\n\n  Espree (github.com)\n  ESLint (github.com)\n  Acorn (github.com)\n  What’s up with monomorphism?\n\n",
            "content_html": "<p>I’ve recently been working on a project to port Espree[1], the parser that powers ESLint[2], to use Acorn[3]. In so doing, I ran into an interesting performance problem related <code class=\"highlighter-rouge\">Object.defineProperty()</code>. It seems that any call to <code class=\"highlighter-rouge\">Object.defineProperty()</code> has a nontrivial negative affect on performance in V8 (both Node.js and Chrome). An investigation led to some interesting results.</p>\n\n<h2 id=\"the-problem\">The problem</h2>\n\n<p>I noticed the problem the first time I ran ESLint’s performance test, which showed a 500ms slowdown using the Acorn-powered Espree. Using the current version of Espree (v2.2.5), the ESLint performance test always completed in about 2500ms (you can run this yourself by cloining the ESLint repository and running <code class=\"highlighter-rouge\">npm run perf</code>). When I switched to use Acorn-powered Espree, that time ballooned to just over 3000ms. A 500ms increase is much too large of a change and would undoubtedly affect ESLint users in a significant way, so I had to figure out what was taking so long.</p>\n\n<h2 id=\"the-investigation\">The investigation</h2>\n\n<p>To do that, I used ESLint’s profiling command (<code class=\"highlighter-rouge\">npm run profile</code>) to run ESLint through Chrome’s profiler. When I did that, something immediately jumped out at me.</p>\n\n<p><img src="https://humanwhocodes.com/feeds/\&quot;https://www.nczonline.net/images/posts/profiler1.png\&quot;" alt=\"Initial Profiler Results\" /></p>\n\n<p>As you can see, the function <code class=\"highlighter-rouge\">esprimaFinishNode()</code> was taking up over 33% of the run time. This function augments the generated AST nodes from Acorn so that they look more like Esprima AST nodes. It took me only a minute to realize that the only out-of-place operation in that function involved <code class=\"highlighter-rouge\">Object.defineProperty()</code>.</p>\n\n<p>Acorn adds nonstandard <code class=\"highlighter-rouge\">start</code> and <code class=\"highlighter-rouge\">end</code> properties to each AST node in order to track their position. These properties can’t be removed because Acorn uses them internally to make decision about other nodes. So instead of removing them, Espree was setting them to be nonenumerable using <code class=\"highlighter-rouge\">Object.defineProperty()</code>, like this:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">Object</span><span class=\"p\">.</span><span class=\"nx\">defineProperty</span><span class=\"p\">(</span><span class=\"nx\">node</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">start</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"p\">{</span> <span class=\"na\">enumerable</span><span class=\"p\">:</span> <span class=\"kc\">false</span> <span class=\"p\">});</span>\n<span class=\"nb\">Object</span><span class=\"p\">.</span><span class=\"nx\">defineProperty</span><span class=\"p\">(</span><span class=\"nx\">node</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">end</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"p\">{</span> <span class=\"na\">enumerable</span><span class=\"p\">:</span> <span class=\"kc\">false</span> <span class=\"p\">});</span>\n</code></pre></div></div>\n\n<p>By making these properties nonenumerable, the output of JSON serialization would match that from Esprima and anyone using <code class=\"highlighter-rouge\">for-in</code> loop would be unaffected. Unfortunately, this was the very thing that caused the performance problem. When I commented out those two lines, the profile run looked very different:</p>\n\n<p><img src="https://humanwhocodes.com/feeds/\&quot;https://www.nczonline.net/images/posts/profiler2.png\&quot;" alt=\"Second Profiler Results\" /></p>\n\n<p>All of a sudden, <code class=\"highlighter-rouge\">esprimaFinishNode()</code> was no longer where the most time was spent, accounting for less than 5% (owning less than 3%). The different was the two calls to <code class=\"highlighter-rouge\">Object.defineProperty()</code>.</p>\n\n<h2 id=\"digging-in-deeper\">Digging in deeper</h2>\n\n<p>I really wanted to make <code class=\"highlighter-rouge\">start</code> and <code class=\"highlighter-rouge\">end</code> nonenumerable, so I tried several alternatives to using <code class=\"highlighter-rouge\">Object.defineProperty()</code> in <code class=\"highlighter-rouge\">esprimaFinishNode()</code>.</p>\n\n<p>The first thing I did was use <code class=\"highlighter-rouge\">Object.defineProperties()</code> to define both properties instead of two separate calls to <code class=\"highlighter-rouge\">Object.defineProperty()</code>. My thinking was that perhaps each call to <code class=\"highlighter-rouge\">Object.defineProperty()</code> was incurring a performance penalty so using one function call instead of two could cut that down. This made no change at all, and so I concluded the reason for the slowdown was not the number of times <code class=\"highlighter-rouge\">Object.defineProperty()</code> was called, but rather, the fact that it was called at all.</p>\n\n<p>Remembering some of the information I read about V8 optimization[4], I thought this slowdown might be the result of the object changing shape after it was defined. Perhaps change the attributes of properties was enough to change the shape of the object in V8, and that was causing a less optimal path to be taken. I decided to this theory.</p>\n\n<p>The first test was the original code, which loosely looked like this:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// Slowest: ~3000ms</span>\n<span class=\"kd\">var</span> <span class=\"nx\">node</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">Node</span><span class=\"p\">();</span>\n\n<span class=\"nb\">Object</span><span class=\"p\">.</span><span class=\"nx\">defineProperty</span><span class=\"p\">(</span><span class=\"nx\">node</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">start</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"p\">{</span> <span class=\"na\">enumerable</span><span class=\"p\">:</span> <span class=\"kc\">false</span> <span class=\"p\">});</span>\n<span class=\"nb\">Object</span><span class=\"p\">.</span><span class=\"nx\">defineProperty</span><span class=\"p\">(</span><span class=\"nx\">node</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">end</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"p\">{</span> <span class=\"na\">enumerable</span><span class=\"p\">:</span> <span class=\"kc\">false</span> <span class=\"p\">});</span>\n</code></pre></div></div>\n\n<p>As I mentioned before, this was about 3000ms in the ESLint performance test. The first thing I tried was to move <code class=\"highlighter-rouge\">Object.defineProperty()</code> into the <code class=\"highlighter-rouge\">Node</code> constructor (which is used to create new AST nodes). I thought that perhaps if I could better define the shape inside the constructor, I’d avoid the late penalties of changing the shape long after its creation. So the second test looked something like this:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// A bit faster: ~2800ms</span>\n<span class=\"kd\">function</span> <span class=\"nx\">Node</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">start</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">end</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n\n    <span class=\"nb\">Object</span><span class=\"p\">.</span><span class=\"nx\">defineProperty</span><span class=\"p\">(</span><span class=\"nx\">node</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">start</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"p\">{</span> <span class=\"na\">enumerable</span><span class=\"p\">:</span> <span class=\"kc\">false</span> <span class=\"p\">});</span>\n    <span class=\"nb\">Object</span><span class=\"p\">.</span><span class=\"nx\">defineProperty</span><span class=\"p\">(</span><span class=\"nx\">node</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">end</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"p\">{</span> <span class=\"na\">enumerable</span><span class=\"p\">:</span> <span class=\"kc\">false</span> <span class=\"p\">});</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>This did result in a performance improvement, dropping the ESLint performance test from 3000ms to around 2800ms. Still slower than the original 2500ms, but moving in the right direction.</p>\n\n<p>Next, I wondered if creating the property and then making it enumerable would be slower than just using <code class=\"highlighter-rouge\">Object.defineProperty()</code> to both create it and make it enumerable. Thus, I took another stab at it:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// Faster: ~2650ms</span>\n<span class=\"kd\">function</span> <span class=\"nx\">Node</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n\n    <span class=\"nb\">Object</span><span class=\"p\">.</span><span class=\"nx\">defineProperties</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n        <span class=\"na\">start</span><span class=\"p\">:</span> <span class=\"p\">{</span> <span class=\"na\">enumerable</span><span class=\"p\">:</span> <span class=\"kc\">false</span><span class=\"p\">,</span> <span class=\"na\">value</span><span class=\"p\">:</span> <span class=\"nx\">pos</span><span class=\"p\">,</span> <span class=\"na\">writable</span><span class=\"p\">:</span> <span class=\"kc\">true</span><span class=\"p\">,</span> <span class=\"na\">configurable</span><span class=\"p\">:</span> <span class=\"kc\">true</span> <span class=\"p\">},</span>\n        <span class=\"na\">end</span><span class=\"p\">:</span> <span class=\"p\">{</span> <span class=\"na\">enumerable</span><span class=\"p\">:</span> <span class=\"kc\">false</span><span class=\"p\">,</span> <span class=\"na\">value</span><span class=\"p\">:</span> <span class=\"nx\">pos</span><span class=\"p\">,</span> <span class=\"na\">writable</span><span class=\"p\">:</span> <span class=\"kc\">true</span><span class=\"p\">,</span> <span class=\"na\">configurable</span><span class=\"p\">:</span> <span class=\"kc\">true</span> <span class=\"p\">}</span>\n    <span class=\"p\">});</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>This version brought the ESLint performance test down even further, to around 2650ms. The easiest way to get it back down to 2500ms? Just make the properties enumerable:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// Fastest: ~2500ms</span>\n<span class=\"kd\">function</span> <span class=\"nx\">Node</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">start</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">end</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>Yes, it turns out not using <code class=\"highlighter-rouge\">Object.defineProperty()</code> at all is still the most performant approach.</p>\n\n<h2 id=\"takeaways\">Takeaways</h2>\n\n<p>What was most surprising to me is that there was basically no truly efficient way to make properties nonenumerable, especially when compared against simply assigning a new property onto <code class=\"highlighter-rouge\">this</code> directly. This investigation showed that if you must use <code class=\"highlighter-rouge\">Object.defineProperty()</code>, it’s better to do so inside of a constructor than outside. However, where performance is a consideration, it seems best to avoid using <code class=\"highlighter-rouge\">Object.defineProperty()</code> at all.</p>\n\n<p>I’m thankful that I had the ESLint performance test, which runs ESLint on a fairly large JavaScript file, to be able to narrow this issue down. I’m not sure an isolated benchmark would have revealed the extent to which this was a problem for ESLint.</p>\n\n<h2 id=\"references\">References</h2>\n\n<ol>\n  <li><a href="https://humanwhocodes.com/feeds/\&quot;https://github.com/eslint/espree\&quot;">Espree</a> (github.com)</li>\n  <li><a href="https://humanwhocodes.com/feeds/\&quot;https://github.com/eslint/eslint\&quot;">ESLint</a> (github.com)</li>\n  <li><a href="https://humanwhocodes.com/feeds/\&quot;https://github.com/ternjs/acorn\&quot;">Acorn</a> (github.com)</li>\n  <li><a href="https://humanwhocodes.com/feeds/\&quot;http://mrale.ph/blog/2015/01/11/whats-up-with-monomorphism.html\&quot;">What’s up with monomorphism?</a></li>\n</ol>\n",
            "url": "https://humanwhocodes.com/blog/2015/11/performance-implication-object-defineproperty/",
            
            
            
            "tags": ["Performance","ECMAScript 5","JavaScript"],
            
            "date_published": "2015-11-17T00:00:00+00:00",
            "date_modified": "2015-11-17T00:00:00+00:00",
            
                "author": 
                ""
                
            
        },
    
        {
            "id": "https://humanwhocodes.com/blog/2015/10/ecmascript-6-destructuring-gotcha/",
            "title": "ECMAScript 6 destructuring gotcha",
            "summary": "With all of the new syntax in ECMAScript 6, you’re bound to periodically find something that is confusing (likely as you’re hunting down an error). Recently, I’ve seen an uptick in the reporting of a specific type of error as it relates to destructuring assignment[1] using object patterns.",
            "content_text": "With all of the new syntax in ECMAScript 6, you’re bound to periodically find something that is confusing (likely as you’re hunting down an error). Recently, I’ve seen an uptick in the reporting of a specific type of error as it relates to destructuring assignment[1] using object patterns.\n\nDestructuring basics\n\nBefore you can understand the problem, it’s helpful to look at a few examples of destructuring. Here’s a simple one:\n\nvar node = {\n    type: \"Identifier\",\n    value: \"foo\"\n};\n\nvar { type } = node;\nconsole.log(type);      // \"Identifier\"\n\n\nIn this example, the variable type is created and assigned to be the value of node.type using destructuring. You can also grab the value property if you want:\n\nvar node = {\n    type: \"Identifier\",\n    value: \"foo\"\n};\n\nvar { type, value } = node;\nconsole.log(type);      // \"Identifier\"\nconsole.log(value);     // \"foo\"\n\n\nDestructuring lets you extract specific properties from an object. On the surface, this is pretty simple and self-explanatory.\n\nDifferent variable names\n\nYou can also create variables that have different names than the properties whose values they are assigned. For example:\n\nvar node = {\n    type: \"Identifier\",\n    value: \"foo\"\n};\n\nvar { type: myType } = node;\nconsole.log(myType);      // \"Identifier\"\nconsole.log(type);        // error: type is not defined\n\n\nHere, the variable created is called myType and receives the value of node.type. This syntax is a bit confusing, as it’s the opposite of the name-value pair syntax of object literals. There is no variable type in this example.\n\nDefault values\n\nAdding more complexity, you can assign a default value for any destructured property using an equals sign. This can make the destructuring looks a bit complicated, for example:\n\nvar node = {\n    type: \"Identifier\",\n    value: \"foo\"\n};\n\nvar anotherNode = {};\n\nvar { type: myType = \"Unknown\" } = anotherNode;\nconsole.log(myType);      // \"Unknown\"\n\n\nThis example creates a local variable myType that is assigned the value of node.type is it exists. If node.type doesn’t exist, then myType is assigned the value \"Unknown\".\n\nNested destructuring\n\nYou can further the complexity by nesting destructuring. That means you can retrieve values from objects inside of objects, such as:\n\nvar node = {\n    type: \"Identifier\",\n    value: \"foo\",\n    loc: {\n        start: {\n            line: 1,\n            column: 5\n        },\n        end: {\n            line: 1,\n            column: 8\n        }\n    }\n};\n\nvar { loc: { start: { line }} } = node;\nconsole.log(line);      // 1\nconsole.log(loc);       // error: loc is undefined\n\n\nIn this example, only the local variable line is created with a value of 1. The loc and start inside of the object pattern simply serve as location information to find line.\n\nThe gotcha\n\nHere’s where things get confusing. Now that you’ve had this crash course in destructuring, what is the expected behavior in the following code?\n\nvar node = {\n    type: \"Identifier\",\n    value: \"foo\",\n    loc: {\n        start: {\n            line: 1,\n            column: 5\n        },\n        end: {\n            line: 1,\n            column: 8\n        }\n    }\n};\n\nvar { loc: {} } = node;\nconsole.log(loc);       // ?\n\n\nYou may be surprised to know that console.log(loc) actually throws an error because loc is undefined. Why is that? Because the curly braces to the right of loc: indicate that loc is merely location information for what comes to the right of it. However, there is nothing to the right of it, so there are no new variables created.\n\nThis is confusing because it looks like an object literal whose loc property is assigned an empty object, but in fact, that is not the case.\n\nIt’s quite possible the intent of this code is to assign an empty object when loc isn’t present, and in that case, you need to use an equals sign:\n\nvar node = {\n    type: \"Identifier\",\n    value: \"foo\",\n    loc: {\n        start: {\n            line: 1,\n            column: 5\n        },\n        end: {\n            line: 1,\n            column: 8\n        }\n    }\n};\n\nvar { loc = {} } = node;\nconsole.log(loc);       // [Object object]\n\n\nHere, loc always ends up as an object regardless of whether node.loc exists.\n\nSummary\n\nNested destructuring can be pretty confusing, especially when you mix in default values. In all cases identifier: {} in a destructured assignment is a mistake: it has zero effect. It’s more likely that you meant to assign a default value to variable. ESLint just added the new-empty-pattern rule[2] to check for this problem, so I’d recommend turning that on immediately if you are using destructuring in your code.\n\nReferences\n\n\n  Destructuring by me (leanpub.com)\n  Disallow empty destructuring patterns\n\n",
            "content_html": "<p>With all of the new syntax in ECMAScript 6, you’re bound to periodically find something that is confusing (likely as you’re hunting down an error). Recently, I’ve seen an uptick in the reporting of a specific type of error as it relates to destructuring assignment[1] using object patterns.</p>\n\n<h2 id=\"destructuring-basics\">Destructuring basics</h2>\n\n<p>Before you can understand the problem, it’s helpful to look at a few examples of destructuring. Here’s a simple one:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">var</span> <span class=\"nx\">node</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"na\">type</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">Identifier</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n    <span class=\"na\">value</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">foo</span><span class=\"dl\">\"</span>\n<span class=\"p\">};</span>\n\n<span class=\"kd\">var</span> <span class=\"p\">{</span> <span class=\"nx\">type</span> <span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"nx\">node</span><span class=\"p\">;</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">type</span><span class=\"p\">);</span>      <span class=\"c1\">// \"Identifier\"</span>\n</code></pre></div></div>\n\n<p>In this example, the variable <code class=\"highlighter-rouge\">type</code> is created and assigned to be the value of <code class=\"highlighter-rouge\">node.type</code> using destructuring. You can also grab the <code class=\"highlighter-rouge\">value</code> property if you want:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">var</span> <span class=\"nx\">node</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"na\">type</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">Identifier</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n    <span class=\"na\">value</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">foo</span><span class=\"dl\">\"</span>\n<span class=\"p\">};</span>\n\n<span class=\"kd\">var</span> <span class=\"p\">{</span> <span class=\"nx\">type</span><span class=\"p\">,</span> <span class=\"nx\">value</span> <span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"nx\">node</span><span class=\"p\">;</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">type</span><span class=\"p\">);</span>      <span class=\"c1\">// \"Identifier\"</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">value</span><span class=\"p\">);</span>     <span class=\"c1\">// \"foo\"</span>\n</code></pre></div></div>\n\n<p>Destructuring lets you extract specific properties from an object. On the surface, this is pretty simple and self-explanatory.</p>\n\n<h2 id=\"different-variable-names\">Different variable names</h2>\n\n<p>You can also create variables that have different names than the properties whose values they are assigned. For example:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">var</span> <span class=\"nx\">node</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"na\">type</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">Identifier</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n    <span class=\"na\">value</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">foo</span><span class=\"dl\">\"</span>\n<span class=\"p\">};</span>\n\n<span class=\"kd\">var</span> <span class=\"p\">{</span> <span class=\"na\">type</span><span class=\"p\">:</span> <span class=\"nx\">myType</span> <span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"nx\">node</span><span class=\"p\">;</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">myType</span><span class=\"p\">);</span>      <span class=\"c1\">// \"Identifier\"</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">type</span><span class=\"p\">);</span>        <span class=\"c1\">// error: type is not defined</span>\n</code></pre></div></div>\n\n<p>Here, the variable created is called <code class=\"highlighter-rouge\">myType</code> and receives the value of <code class=\"highlighter-rouge\">node.type</code>. This syntax is a bit confusing, as it’s the opposite of the name-value pair syntax of object literals. There is no variable <code class=\"highlighter-rouge\">type</code> in this example.</p>\n\n<h2 id=\"default-values\">Default values</h2>\n\n<p>Adding more complexity, you can assign a default value for any destructured property using an equals sign. This can make the destructuring looks a bit complicated, for example:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">var</span> <span class=\"nx\">node</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"na\">type</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">Identifier</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n    <span class=\"na\">value</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">foo</span><span class=\"dl\">\"</span>\n<span class=\"p\">};</span>\n\n<span class=\"kd\">var</span> <span class=\"nx\">anotherNode</span> <span class=\"o\">=</span> <span class=\"p\">{};</span>\n\n<span class=\"kd\">var</span> <span class=\"p\">{</span> <span class=\"na\">type</span><span class=\"p\">:</span> <span class=\"nx\">myType</span> <span class=\"o\">=</span> <span class=\"dl\">\"</span><span class=\"s2\">Unknown</span><span class=\"dl\">\"</span> <span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"nx\">anotherNode</span><span class=\"p\">;</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">myType</span><span class=\"p\">);</span>      <span class=\"c1\">// \"Unknown\"</span>\n</code></pre></div></div>\n\n<p>This example creates a local variable <code class=\"highlighter-rouge\">myType</code> that is assigned the value of <code class=\"highlighter-rouge\">node.type</code> is it exists. If <code class=\"highlighter-rouge\">node.type</code> doesn’t exist, then <code class=\"highlighter-rouge\">myType</code> is assigned the value <code class=\"highlighter-rouge\">\"Unknown\"</code>.</p>\n\n<h2 id=\"nested-destructuring\">Nested destructuring</h2>\n\n<p>You can further the complexity by nesting destructuring. That means you can retrieve values from objects inside of objects, such as:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">var</span> <span class=\"nx\">node</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"na\">type</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">Identifier</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n    <span class=\"na\">value</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">foo</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n    <span class=\"na\">loc</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"na\">start</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n            <span class=\"na\">line</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n            <span class=\"na\">column</span><span class=\"p\">:</span> <span class=\"mi\">5</span>\n        <span class=\"p\">},</span>\n        <span class=\"na\">end</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n            <span class=\"na\">line</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n            <span class=\"na\">column</span><span class=\"p\">:</span> <span class=\"mi\">8</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">};</span>\n\n<span class=\"kd\">var</span> <span class=\"p\">{</span> <span class=\"na\">loc</span><span class=\"p\">:</span> <span class=\"p\">{</span> <span class=\"na\">start</span><span class=\"p\">:</span> <span class=\"p\">{</span> <span class=\"nx\">line</span> <span class=\"p\">}}</span> <span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"nx\">node</span><span class=\"p\">;</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">line</span><span class=\"p\">);</span>      <span class=\"c1\">// 1</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">loc</span><span class=\"p\">);</span>       <span class=\"c1\">// error: loc is undefined</span>\n</code></pre></div></div>\n\n<p>In this example, only the local variable <code class=\"highlighter-rouge\">line</code> is created with a value of <code class=\"highlighter-rouge\">1</code>. The <code class=\"highlighter-rouge\">loc</code> and <code class=\"highlighter-rouge\">start</code> inside of the object pattern simply serve as location information to find <code class=\"highlighter-rouge\">line</code>.</p>\n\n<h2 id=\"the-gotcha\">The gotcha</h2>\n\n<p>Here’s where things get confusing. Now that you’ve had this crash course in destructuring, what is the expected behavior in the following code?</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">var</span> <span class=\"nx\">node</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"na\">type</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">Identifier</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n    <span class=\"na\">value</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">foo</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n    <span class=\"na\">loc</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"na\">start</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n            <span class=\"na\">line</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n            <span class=\"na\">column</span><span class=\"p\">:</span> <span class=\"mi\">5</span>\n        <span class=\"p\">},</span>\n        <span class=\"na\">end</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n            <span class=\"na\">line</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n            <span class=\"na\">column</span><span class=\"p\">:</span> <span class=\"mi\">8</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">};</span>\n\n<span class=\"kd\">var</span> <span class=\"p\">{</span> <span class=\"na\">loc</span><span class=\"p\">:</span> <span class=\"p\">{}</span> <span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"nx\">node</span><span class=\"p\">;</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">loc</span><span class=\"p\">);</span>       <span class=\"c1\">// ?</span>\n</code></pre></div></div>\n\n<p>You may be surprised to know that <code class=\"highlighter-rouge\">console.log(loc)</code> actually throws an error because <code class=\"highlighter-rouge\">loc</code> is undefined. Why is that? Because the curly braces to the right of <code class=\"highlighter-rouge\">loc:</code> indicate that <code class=\"highlighter-rouge\">loc</code> is merely location information for what comes to the right of it. However, there is nothing to the right of it, so there are no new variables created.</p>\n\n<p>This is confusing because it looks like an object literal whose <code class=\"highlighter-rouge\">loc</code> property is assigned an empty object, but in fact, that is not the case.</p>\n\n<p>It’s quite possible the intent of this code is to assign an empty object when <code class=\"highlighter-rouge\">loc</code> isn’t present, and in that case, you need to use an equals sign:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">var</span> <span class=\"nx\">node</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"na\">type</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">Identifier</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n    <span class=\"na\">value</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">foo</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n    <span class=\"na\">loc</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"na\">start</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n            <span class=\"na\">line</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n            <span class=\"na\">column</span><span class=\"p\">:</span> <span class=\"mi\">5</span>\n        <span class=\"p\">},</span>\n        <span class=\"na\">end</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n            <span class=\"na\">line</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n            <span class=\"na\">column</span><span class=\"p\">:</span> <span class=\"mi\">8</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">};</span>\n\n<span class=\"kd\">var</span> <span class=\"p\">{</span> <span class=\"nx\">loc</span> <span class=\"o\">=</span> <span class=\"p\">{}</span> <span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"nx\">node</span><span class=\"p\">;</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">loc</span><span class=\"p\">);</span>       <span class=\"c1\">// [Object object]</span>\n</code></pre></div></div>\n\n<p>Here, <code class=\"highlighter-rouge\">loc</code> always ends up as an object regardless of whether <code class=\"highlighter-rouge\">node.loc</code> exists.</p>\n\n<h2 id=\"summary\">Summary</h2>\n\n<p>Nested destructuring can be pretty confusing, especially when you mix in default values. In all cases <code class=\"highlighter-rouge\">identifier: {}</code> in a destructured assignment is a mistake: it has zero effect. It’s more likely that you meant to assign a default value to variable. ESLint just added the <code class=\"highlighter-rouge\">new-empty-pattern</code> rule[2] to check for this problem, so I’d recommend turning that on immediately if you are using destructuring in your code.</p>\n\n<h2 id=\"references\">References</h2>\n\n<ol>\n  <li><a href="https://humanwhocodes.com/feeds/\&quot;https://leanpub.com/understandinges6/read#leanpub-auto-destructuring\"">Destructuring</a> by me (leanpub.com)</li>\n  <li><a href="https://humanwhocodes.com/feeds/\&quot;http://eslint.org/docs/rules/no-empty-pattern\&quot;">Disallow empty destructuring patterns</a></li>\n</ol>\n",
            "url": "https://humanwhocodes.com/blog/2015/10/ecmascript-6-destructuring-gotcha/",
            
            
            
            "tags": ["ECMAScript 6","Destructuring"],
            
            "date_published": "2015-10-20T00:00:00+00:00",
            "date_modified": "2015-10-20T00:00:00+00:00",
            
                "author": 
                ""
                
            
        },
    
        {
            "id": "https://humanwhocodes.com/blog/2015/10/triggering-jenkins-builds-by-url/",
            "title": "Triggering Jenkins builds by URL",
            "summary": "As you might have read not too long ago, I recently moved my site from Wordpress to Jekyll[1]. In so doing, I ended up using Jenkins[2] to periodically build and upload my site to S3. Having a Jenkins instance running turns out to be quite useful for all sorts of tasks and so I’ve been trying to take advantage of it to automate more of my routine tasks.",
            "content_text": "As you might have read not too long ago, I recently moved my site from Wordpress to Jekyll[1]. In so doing, I ended up using Jenkins[2] to periodically build and upload my site to S3. Having a Jenkins instance running turns out to be quite useful for all sorts of tasks and so I’ve been trying to take advantage of it to automate more of my routine tasks.\n\nThe goals\n\nRecently, I received some useful feedback from readers of my newsletter:\n\n\n  The default URL for archived newsletters looks suspicious. Here’s an example: http://us11.campaign-archive2.com/?u=06398d19c8d37d8d6ba9d9cf7&amp;id=7ab9b1fc75. Yeah, that looks pretty scary to anyone who knows anything about web security. I decided I’d try to figure out a way to generate an archive on my site.\n  Some folks wanted to subscribe via RSS instead of email. While Mailchimp does provide an RSS feed, it’s of everything you send to a particular list. That means both my blog posts and newsletter updates are merged into the same feed, so I didn’t have a feed of just newsletter updates. It seemed like having a feed could also help me with generating an archive page, so I decided this would be a nice first step.\n\n\nMailchimp supports webhooks, so it will post to any URL you want when it sends out an email. I wanted that to trigger generation of the archive page on my site so it would be available as soon as the email was sent. Jenkins allows you to trigger a build by posting to a URL, but it took me a little while to figure out exactly how to get this to work correctly.\n\nNote: This assumes you’re using Jenkins’ own user database for user management rather than LDAP or another directory service.\n\nStep 1: Setting up a new user\n\nTrigger a build via URL means that the Jenkins endpoint is open to anyone who can hit the server. Naturally, that means you want to ensure you’ve secured this endpoint as much as possible and the first step is to create a user with limited access to Jenkins. To create a new user:\n\n\n  Click on Manage Jenkins\n  Click on Manage Users\n  Click on Create User\n  Fill in the information for your user (I’ll assume you’ve called this user “auto”)\n  Click the Sign Up button\n\n\nThis will take you back to the user list.\n\nStep 2: Enable the URL job trigger\n\nGo to the job that you want to trigger and click Configure to edit the job. Under Build Triggers, check the box next to “Trigger Builds Remotely”. You’ll be asked to provide a secure token for validation. This should not in any way be related to the “auto” user, so don’t reuse the password. You might want to generate a new key using a tool like the Random Key Generator[3]. Click Save to save the job information.\n\n;\n\nStep 3: Enable permission for “auto”\n\nIn order to allow “auto” to trigger the build, the user needs to have the following permissions set:\n\n\n  Overall - Read\n  Job - Build\n  Job - Read\n  Job - Workspace\n\n\nTo configure these permissions:\n\n\n  Click on Manage Jenkins\n  Click on Configure Global Security\n  Assuming you’re using matrix-based security: add “auto” to the list and check off the boxes for the necessary permissions\n  Click Save\n\n\nIf you are not using matrix-based security, then this step is likely not necessary. Just make sure the “auto” user has the correct permissions.\n\nStep 4: Create the URL\n\nIn order to make an external call using the “auto” user, you’ll need to use an API token. From the user list, click on the “configure” icon (the wrench and screw driver) next to the “auto” user.\n\n;\n\nUnderneath the user’s full name and description is a section labeled “API Token”. Click on the “Show API Token” button. This will reveal the API token you need to provide when triggering a job by URL.\n\n;\n\nWith this information, you can now create a URL that looks like this:\n\nhttp://auto:8702d1cb53a83f8748d9433ebca494fb@your-jenkins.com/job/JobName/build?token=iFBDOBhNhaxL4T9ass93HRXun2JF161Z\n\n\nNote that “JobName” should be replaced with the job name you’re triggering. The correctly escaped version of this URL is shown when you set the authentication token (step 2).\n\nThis URL has three key pieces of information:\n\n\n  The username “auto”\n  The API token (after the colon)\n  The authentication token\n\n\nAll three must be correct, and the permissions for the user must be correct in Jenkins, in order for this URL to trigger the job. In order to trigger the job, you must send a POST request. You can test it out using cURL:\n\ncurl -X POST http://auto:8702d1cb53a83f8748d9433ebca494fb@your-jenkins.com/job/JobName/build?token=iFBDOBhNhaxL4T9ass93HRXun2JF161Z\n\n\nOnce you send the request, log in to Jenkins and verify that the job is running. You can then use this URL for most webhooks.\n\nConclusion\n\nI now have a job triggered remotely whenever Mailchimp sends an email. The script downloads the newsletter RSS feed, filters out blog posts, and generates an HTML archive page on my site. The most time-consuming part of the process was going setting up Jenkins to build via URL, as the resources I found online all had pieces of information missing. I hope that this post helps others make progress faster.\n\nReferences\n\n\n  From Wordpress to Jekyll: My new blog setup by me (nczonline.net)\n  Jenkins (jenkins-ci.org)\n  Random Key Generator (randomkeygen.com)\n\n",
            "content_html": "<p>As you might have read not too long ago, I recently moved my site from Wordpress to Jekyll[1]. In so doing, I ended up using Jenkins[2] to periodically build and upload my site to S3. Having a Jenkins instance running turns out to be quite useful for all sorts of tasks and so I’ve been trying to take advantage of it to automate more of my routine tasks.</p>\n\n<h2 id=\"the-goals\">The goals</h2>\n\n<p>Recently, I received some useful feedback from readers of my newsletter:</p>\n\n<ol>\n  <li>The default URL for archived newsletters looks suspicious. Here’s an example: <a href="https://humanwhocodes.com/feeds/\&quot;http://us11.campaign-archive2.com/?u=06398d19c8d37d8d6ba9d9cf7&amp;id=7ab9b1fc75\&quot;">http://us11.campaign-archive2.com/?u=06398d19c8d37d8d6ba9d9cf7&amp;id=7ab9b1fc75</a>. Yeah, that looks pretty scary to anyone who knows anything about web security. I decided I’d try to figure out a way to generate an archive on my site.</li>\n  <li>Some folks wanted to subscribe via RSS instead of email. While Mailchimp does provide an RSS feed, it’s of everything you send to a particular list. That means both my blog posts and newsletter updates are merged into the same feed, so I didn’t have a feed of just newsletter updates. It seemed like having a feed could also help me with generating an archive page, so I decided this would be a nice first step.</li>\n</ol>\n\n<p>Mailchimp supports webhooks, so it will post to any URL you want when it sends out an email. I wanted that to trigger generation of the archive page on my site so it would be available as soon as the email was sent. Jenkins allows you to trigger a build by posting to a URL, but it took me a little while to figure out exactly how to get this to work correctly.</p>\n\n<p><strong>Note:</strong> This assumes you’re using Jenkins’ own user database for user management rather than LDAP or another directory service.</p>\n\n<h2 id=\"step-1-setting-up-a-new-user\">Step 1: Setting up a new user</h2>\n\n<p>Trigger a build via URL means that the Jenkins endpoint is open to anyone who can hit the server. Naturally, that means you want to ensure you’ve secured this endpoint as much as possible and the first step is to create a user with limited access to Jenkins. To create a new user:</p>\n\n<ol>\n  <li>Click on <strong>Manage Jenkins</strong></li>\n  <li>Click on <strong>Manage Users</strong></li>\n  <li>Click on <strong>Create User</strong></li>\n  <li>Fill in the information for your user (I’ll assume you’ve called this user “auto”)</li>\n  <li>Click the <strong>Sign Up</strong> button</li>\n</ol>\n\n<p>This will take you back to the user list.</p>\n\n<h2 id=\"step-2-enable-the-url-job-trigger\">Step 2: Enable the URL job trigger</h2>\n\n<p>Go to the job that you want to trigger and click Configure to edit the job. Under Build Triggers, check the box next to “Trigger Builds Remotely”. You’ll be asked to provide a secure token for validation. This should not in any way be related to the “auto” user, so don’t reuse the password. You might want to generate a new key using a tool like the Random Key Generator[3]. Click Save to save the job information.</p>\n\n<p><img src="https://humanwhocodes.com/feeds/\&quot;https://humanwhocodes.com/images/posts/blog-jenkins-triggers.png\&quot;" alt=\"Jenkins User List\" />;</p>\n\n<h2 id=\"step-3-enable-permission-for-auto\">Step 3: Enable permission for “auto”</h2>\n\n<p>In order to allow “auto” to trigger the build, the user needs to have the following permissions set:</p>\n\n<ul>\n  <li>Overall - Read</li>\n  <li>Job - Build</li>\n  <li>Job - Read</li>\n  <li>Job - Workspace</li>\n</ul>\n\n<p>To configure these permissions:</p>\n\n<ol>\n  <li>Click on <strong>Manage Jenkins</strong></li>\n  <li>Click on <strong>Configure Global Security</strong></li>\n  <li>Assuming you’re using matrix-based security: add “auto” to the list and check off the boxes for the necessary permissions</li>\n  <li>Click <strong>Save</strong></li>\n</ol>\n\n<p>If you are not using matrix-based security, then this step is likely not necessary. Just make sure the “auto” user has the correct permissions.</p>\n\n<h2 id=\"step-4-create-the-url\">Step 4: Create the URL</h2>\n\n<p>In order to make an external call using the “auto” user, you’ll need to use an API token. From the user list, click on the “configure” icon (the wrench and screw driver) next to the “auto” user.</p>\n\n<p><img src="https://humanwhocodes.com/feeds/\&quot;https://humanwhocodes.com/images/posts/blog-jenkins-users.png\&quot;" alt=\"Jenkins User List\" />;</p>\n\n<p>Underneath the user’s full name and description is a section labeled “API Token”. Click on the “Show API Token” button. This will reveal the API token you need to provide when triggering a job by URL.</p>\n\n<p><img src="https://humanwhocodes.com/feeds/\&quot;https://humanwhocodes.com/images/posts/blog-jenkins-user-token.png\&quot;" alt=\"Jenkins User Token\" />;</p>\n\n<p>With this information, you can now create a URL that looks like this:</p>\n\n<div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>http://auto:8702d1cb53a83f8748d9433ebca494fb@your-jenkins.com/job/JobName/build?token=iFBDOBhNhaxL4T9ass93HRXun2JF161Z\n</code></pre></div></div>\n\n<p>Note that “JobName” should be replaced with the job name you’re triggering. The correctly escaped version of this URL is shown when you set the authentication token (step 2).</p>\n\n<p>This URL has three key pieces of information:</p>\n\n<ol>\n  <li>The username “auto”</li>\n  <li>The API token (after the colon)</li>\n  <li>The authentication token</li>\n</ol>\n\n<p>All three must be correct, and the permissions for the user must be correct in Jenkins, in order for this URL to trigger the job. In order to trigger the job, you must send a POST request. You can test it out using cURL:</p>\n\n<div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>curl -X POST http://auto:8702d1cb53a83f8748d9433ebca494fb@your-jenkins.com/job/JobName/build?token=iFBDOBhNhaxL4T9ass93HRXun2JF161Z\n</code></pre></div></div>\n\n<p>Once you send the request, log in to Jenkins and verify that the job is running. You can then use this URL for most webhooks.</p>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<p>I now have a job triggered remotely whenever Mailchimp sends an email. The script downloads the newsletter RSS feed, filters out blog posts, and generates an HTML archive page on my site. The most time-consuming part of the process was going setting up Jenkins to build via URL, as the resources I found online all had pieces of information missing. I hope that this post helps others make progress faster.</p>\n\n<h2 id=\"references\">References</h2>\n\n<ol>\n  <li><a href="https://humanwhocodes.com/feeds/\&quot;https://www.nczonline.net/blog/2015/08/wordpress-jekyll-my-new-blog-setup/\&quot;">From Wordpress to Jekyll: My new blog setup</a> by me (nczonline.net)</li>\n  <li><a href="https://humanwhocodes.com/feeds/\&quot;https://jenkins-ci.org/\&quot;">Jenkins</a> (jenkins-ci.org)</li>\n  <li><a href="https://humanwhocodes.com/feeds/\&quot;http://randomkeygen.com/\&quot;">Random Key Generator</a> (randomkeygen.com)</li>\n</ol>\n",
            "url": "https://humanwhocodes.com/blog/2015/10/triggering-jenkins-builds-by-url/",
            
            
            
            "tags": ["Jenkins","Automation","Builds"],
            
            "date_published": "2015-10-06T00:00:00+00:00",
            "date_modified": "2015-10-06T00:00:00+00:00",
            
                "author": 
                ""
                
            
        },
    
        {
            "id": "https://humanwhocodes.com/blog/2015/09/my-favorite-interview-question/",
            "title": "My favorite interview question",
            "summary": "Interviewing and hiring are more difficult tasks than they may seem. The cost of hiring the wrong person is quite high, yet companies that are hiring often want help sooner rather than later and so sometimes don’t want to wait for a good candidate to come along. I operate on the mindset that the damage done by filling a position with a bad fit is far greater than the damage of not having enough people to do work, and so I believe in optimizing to find the right person for the job.",
            "content_text": "Interviewing and hiring are more difficult tasks than they may seem. The cost of hiring the wrong person is quite high, yet companies that are hiring often want help sooner rather than later and so sometimes don’t want to wait for a good candidate to come along. I operate on the mindset that the damage done by filling a position with a bad fit is far greater than the damage of not having enough people to do work, and so I believe in optimizing to find the right person for the job.\n\nWith that goal in mind, I have a favorite interview question that has helped me make a lot of hiring decisions over the years. I’m sure a few of you are thinking, “oh no, he’s going to give away a good interview question and that will make it useless.” Not so. I believe that a good interview process is one that is effective even when candidates know the questions ahead of time. I’m sharing this question specifically because I think it will help everyone, candidate and interviewer alike, by shifting focus to career aspirations.\n\nThe question\n\nI rarely ask the question in the exact same way, but it usually takes this form:\n\n\n  Suppose you could design your dream job that you’ll be starting on Monday. It’s at your ideal company with your ideal job title and salary. All you have to do is tell them what you want to do at your job and you can have it. What does your job entail?\n\n\nThe question looks fairly simple at first glance, but there are some subtleties that help you dig in on important details.\n\n“Starting on Monday”\n\nThe phrase “starting Monday” places the job in a specific time. It’s clear that we’re not talking about a position you will one day aspire to, nor are we talking about a dream job that can’t actually exist. If a job is to start on Monday, you don’t have time to learn new skills or gain experience. You are what you are, professionally, and you need to come up with a job that you can effectively perform next week.\n\nIdeal company, title, and salary\n\nI immediately exclude discussion of company, title, and salary, because these are the things people think they want but can’t really affect my decision. Obviously the company is completely out of my control unless it’s my current employer (I also don’t want people sucking up to me by saying that my current employer is their dream job). I don’t want to get into a discussion about titles because they are mostly meaningless; I’m not interested in what you want people to call you, I want to know what you’re passionate about working on. And salary is, depending on the person, of variable importance and doesn’t tell me much about the person. Yes, I would also like to have a $1 million salary per year, but that’s not helpful in my evaluation of a candidate.\n\nSo by stating that these three things, company, title, and salary, are already taken care of, it frees candidates to think about what really matters to them.\n\nDiscussion\n\nAs should be obvious, this is not meant to have a one-sentence answer. Instead, I use it as a conversation starter to dig and find out what drives this person. Follow up questions and reacting to what they are saying helps me to figure out just how well this person would fit for the position. When trying this on your own, I’d encourage you to develop your own follow questions to dig deeper into the candidate’s ideal job.\n\nGetting stuck\n\nSometimes the scope of this question is too big for people to grasp and they get stuck. The enormity of defining any job they want can be overwhelming to certain people, and if that happens, I ask some followup questions to send them down the right path:\n\n\n  Let’s start very simple: do you want to be writing code all day? If not, what else would you like to be doing?\n  Would you be working alone or on a team? If on a team, what role would you play on that team?\n  Is there a programming language you’d like to be spending most of your time in? What percentage of time would you need in that programming language to be happy?\n  Let’s turn this around: what would you absolutely not want to do?\n  Is there something you’d like to spend time learning on your new job?\n\n\nThese questions are designed to get the candidate back on track (I never let people opt-out of the question). By helping to narrow down the job description to a few options, most candidates are able to continue down this path once they start.\n\nRealistic self-view\n\nThe first thing I try to figure out is if this person’s job description matches their skills. If a 22 year old tells me they want to be CEO of Google next week, for example, it looks like either their perspective on their skills is flawed or they didn’t really grasp what I was asking. In that case, I say something like, “remember, you’re starting this job on Monday. Are you ready to be CEO of Google on Monday?” If they say yes, then I’ll probably entertain myself by asking how they’d run the company while mentally moving on to the next candidate.\n\nIC vs. manager\n\nI’ve periodically interviewed people for an individual contributor (IC) position and asked this question only to find that they really wanted to be a manager. Sometimes it’s someone applying for a manager position who, underneath it all, really wants to be an IC. This is a really important data point to have because tend to get unhappy when in a position they’re not picturing, and unhappy workers create problems (some small, some large). So if I have any hint that they may not be applying for the right role, I ask them to clarify, “so this ideal job would be in management?” Or, “this ideal job has no management responsibilities?”\n\nLeader vs. follower\n\nA slightly different take on IC vs. manager is whether someone is a leader or a follower. Here’s the tricky part: leaders are more likely to tell you they feel they can and followers will almost never tell you they prefer to follow. Of course, you also can’t really ask them directly because no one wants to be thought of as a follower so everyone will say they are a leader. I’ve found it best to just listen to what people say and make a determination. The key phrases I look for in determining if someone is a leader are:\n\n\n  I like to help other people\n  I feel like I have a lot of experience to share\n  I don’t mind/I love mentoring others\n\n\nBy the way, if you’re thinking you can trick someone into think you’re a leader by using these phrases, you’re wrong. They are just indicators to dig deeper, you’re not going to trick someone who knows what they’re doing.\n\nImportant: Both leaders and followers are important for a healthy team. Equally important is making sure you match people with the correct roles. Putting a follower into a leadership position is incredibly damaging to everyone, likewise forcing a leader into a follower position will lead to unhappiness. The goal here isn’t to weed out followers, it’s to make sure you’re matching people to positions effectively.\n\nTime spent\n\nAt some point during the discussion I usually ask people to break down how much of their time they’d like to spend on any particular task. Do they want a 50/50 split between coding work and management work? Do they want to spend 70% of their time designing and architecting and only 30% doing actual coding? Are they a manager who wants to spend 10% of their time coding to “stay in the game?” These are all important to understand to get a full understanding of the person.\n\nConcluding\n\nAt the end of this question, I repeat back what the candidate told me. Something like:\n\n\n  Okay, so let me see if I have this correct. In your ideal job, you’d be spending 75% of the day writing code (JavaScript, if possible) and 25% of your day meeting with others to discuss technology and code. You’d prefer to be on a team of about 5 people and you’d like to be mentored by someone with more experience than you. Is that right?\n\n\nIf I get it wrong, I ask them to correct me so I have a good understanding. Once I have their answer correct, then I explain to them why I asked this question. Usually along the lines of:\n\n\n  The reason I ask this question to people is because I believe it’s important to match people up to the correct position. I wanted to get to know you and your career goals to make sure we have a good fit for you. What I’d like to do now is tell you what I’m looking for and we can decide together if it seems like we have a fit. Does that sound okay?\n\n\nAt that point, I describe what the job they’re applying for is like. I talk about the areas in which it is different from what they described and the areas in which it matches. Then, I offer my perspective on whether there’s a fit and I ask them for theirs. This usually ends up in one of several paths:\n\n\n  It sounds to me like this isn’t a great match for what you’re looking for. Do you agree?\n  From what you’ve described, this seems like a job that mostly matches what you’re looking for. What do you think?\n  It seems like this job is exactly what you’re looking for. Do you agree?\n\n\nWhen there’s a good fit, the candidate feels better about continuing in the process because of this exercise. They understand that I’m not saying this is a great position for them to try to blindly sell them, but that I really understand what they’re looking for and can honestly say I think it’s a good fit.\n\nI’ve never once had an argument with someone when I suggested it seemed like we didn’t have a good match. In most cases, the candidates have thanked me for the exercise because it helped them really narrow in on what they’re passionate about and what type of job they should be looking for. A couple times I’ve encouraged the candidate to apply to a different job at the company that seems more suited for what they’re looking for. In all cases, candidates have told me they enjoyed answering the question.\n\nSummary\n\nI think getting to know a candidate is almost (almost!) more important than evaluating their skills. I’ve seen a lot of damage caused by hiring people into the wrong position due to mismatched expectations, and I’d like to avoid that at all costs. I also want candidates to know that I’m not trying to sell them something I don’t have, nor am I making false promises about their chances of success when hired. Instead, I’m offering a complete view into the job they’re applying for and, hopefully, a clearer view of their own goals and preferences.\n\nI can honestly say this is the question I enjoy asking the most because reveal a lot about themselves. I think the key takeaway is that, regardless of the outcome, they feel listened to and that they were given a chance to really express how they see themselves fitting into an organization.\n\nUltimately, I feel that I have a responsibility to both my employer and the candidate to make sure we hire people that are good matches for the positions we have. The answers I receive from this question tell me very quickly how good of a match there is, at which point I feel better about spending more time digging into their credentials and skills. If I could only ask one interview question to every candidate, this would be the one.\n",
            "content_html": "<p>Interviewing and hiring are more difficult tasks than they may seem. The cost of hiring the wrong person is quite high, yet companies that are hiring often want help sooner rather than later and so sometimes don’t want to wait for a good candidate to come along. I operate on the mindset that the damage done by filling a position with a bad fit is far greater than the damage of not having enough people to do work, and so I believe in optimizing to find the right person for the job.</p>\n\n<p>With that goal in mind, I have a favorite interview question that has helped me make a lot of hiring decisions over the years. I’m sure a few of you are thinking, “oh no, he’s going to give away a good interview question and that will make it useless.” Not so. I believe that a good interview process is one that is effective even when candidates know the questions ahead of time. I’m sharing this question specifically because I think it will help everyone, candidate and interviewer alike, by shifting focus to career aspirations.</p>\n\n<h2 id=\"the-question\">The question</h2>\n\n<p>I rarely ask the question in the exact same way, but it usually takes this form:</p>\n\n<blockquote>\n  <p>Suppose you could design your dream job that you’ll be starting on Monday. It’s at your ideal company with your ideal job title and salary. All you have to do is tell them what you want to do at your job and you can have it. What does your job entail?</p>\n</blockquote>\n\n<p>The question looks fairly simple at first glance, but there are some subtleties that help you dig in on important details.</p>\n\n<h3 id=\"starting-on-monday\">“Starting on Monday”</h3>\n\n<p>The phrase “starting Monday” places the job in a specific time. It’s clear that we’re not talking about a position you will one day aspire to, nor are we talking about a dream job that can’t actually exist. If a job is to start on Monday, you don’t have time to learn new skills or gain experience. You are what you are, professionally, and you need to come up with a job that you can effectively perform next week.</p>\n\n<h3 id=\"ideal-company-title-and-salary\">Ideal company, title, and salary</h3>\n\n<p>I immediately exclude discussion of company, title, and salary, because these are the things people <em>think</em> they want but can’t really affect my decision. Obviously the company is completely out of my control unless it’s my current employer (I also don’t want people sucking up to me by saying that my current employer is their dream job). I don’t want to get into a discussion about titles because they are mostly meaningless; I’m not interested in what you want people to call you, I want to know what you’re passionate about working on. And salary is, depending on the person, of variable importance and doesn’t tell me much about the person. Yes, I would also like to have a $1 million salary per year, but that’s not helpful in my evaluation of a candidate.</p>\n\n<p>So by stating that these three things, company, title, and salary, are already taken care of, it frees candidates to think about what really matters to them.</p>\n\n<h2 id=\"discussion\">Discussion</h2>\n\n<p>As should be obvious, this is not meant to have a one-sentence answer. Instead, I use it as a conversation starter to dig and find out what drives this person. Follow up questions and reacting to what they are saying helps me to figure out just how well this person would fit for the position. When trying this on your own, I’d encourage you to develop your own follow questions to dig deeper into the candidate’s ideal job.</p>\n\n<h3 id=\"getting-stuck\">Getting stuck</h3>\n\n<p>Sometimes the scope of this question is too big for people to grasp and they get stuck. The enormity of defining any job they want can be overwhelming to certain people, and if that happens, I ask some followup questions to send them down the right path:</p>\n\n<ul>\n  <li>Let’s start very simple: do you want to be writing code all day? If not, what else would you like to be doing?</li>\n  <li>Would you be working alone or on a team? If on a team, what role would you play on that team?</li>\n  <li>Is there a programming language you’d like to be spending most of your time in? What percentage of time would you need in that programming language to be happy?</li>\n  <li>Let’s turn this around: what would you absolutely not want to do?</li>\n  <li>Is there something you’d like to spend time learning on your new job?</li>\n</ul>\n\n<p>These questions are designed to get the candidate back on track (I never let people opt-out of the question). By helping to narrow down the job description to a few options, most candidates are able to continue down this path once they start.</p>\n\n<h3 id=\"realistic-self-view\">Realistic self-view</h3>\n\n<p>The first thing I try to figure out is if this person’s job description matches their skills. If a 22 year old tells me they want to be CEO of Google next week, for example, it looks like either their perspective on their skills is flawed or they didn’t really grasp what I was asking. In that case, I say something like, “remember, you’re starting this job on Monday. Are you ready to be CEO of Google on Monday?” If they say yes, then I’ll probably entertain myself by asking how they’d run the company while mentally moving on to the next candidate.</p>\n\n<h3 id=\"ic-vs-manager\">IC vs. manager</h3>\n\n<p>I’ve periodically interviewed people for an individual contributor (IC) position and asked this question only to find that they really wanted to be a manager. Sometimes it’s someone applying for a manager position who, underneath it all, really wants to be an IC. This is a really important data point to have because tend to get unhappy when in a position they’re not picturing, and unhappy workers create problems (some small, some large). So if I have any hint that they may not be applying for the right role, I ask them to clarify, “so this ideal job would be in management?” Or, “this ideal job has no management responsibilities?”</p>\n\n<h3 id=\"leader-vs-follower\">Leader vs. follower</h3>\n\n<p>A slightly different take on IC vs. manager is whether someone is a leader or a follower. Here’s the tricky part: leaders are more likely to tell you they feel they can and followers will almost never tell you they prefer to follow. Of course, you also can’t really ask them directly because no one wants to be thought of as a follower so everyone will say they are a leader. I’ve found it best to just listen to what people say and make a determination. The key phrases I look for in determining if someone is a leader are:</p>\n\n<ul>\n  <li>I like to help other people</li>\n  <li>I feel like I have a lot of experience to share</li>\n  <li>I don’t mind/I love mentoring others</li>\n</ul>\n\n<p>By the way, if you’re thinking you can trick someone into think you’re a leader by using these phrases, you’re wrong. They are just indicators to dig deeper, you’re not going to trick someone who knows what they’re doing.</p>\n\n<p><strong>Important:</strong> Both leaders and followers are important for a healthy team. Equally important is making sure you match people with the correct roles. Putting a follower into a leadership position is incredibly damaging to everyone, likewise forcing a leader into a follower position will lead to unhappiness. The goal here isn’t to weed out followers, it’s to make sure you’re matching people to positions effectively.</p>\n\n<h3 id=\"time-spent\">Time spent</h3>\n\n<p>At some point during the discussion I usually ask people to break down how much of their time they’d like to spend on any particular task. Do they want a 50/50 split between coding work and management work? Do they want to spend 70% of their time designing and architecting and only 30% doing actual coding? Are they a manager who wants to spend 10% of their time coding to “stay in the game?” These are all important to understand to get a full understanding of the person.</p>\n\n<h2 id=\"concluding\">Concluding</h2>\n\n<p>At the end of this question, I repeat back what the candidate told me. Something like:</p>\n\n<blockquote>\n  <p>Okay, so let me see if I have this correct. In your ideal job, you’d be spending 75% of the day writing code (JavaScript, if possible) and 25% of your day meeting with others to discuss technology and code. You’d prefer to be on a team of about 5 people and you’d like to be mentored by someone with more experience than you. Is that right?</p>\n</blockquote>\n\n<p>If I get it wrong, I ask them to correct me so I have a good understanding. Once I have their answer correct, then I explain to them why I asked this question. Usually along the lines of:</p>\n\n<blockquote>\n  <p>The reason I ask this question to people is because I believe it’s important to match people up to the correct position. I wanted to get to know you and your career goals to make sure we have a good fit for you. What I’d like to do now is tell you what I’m looking for and we can decide together if it seems like we have a fit. Does that sound okay?</p>\n</blockquote>\n\n<p>At that point, I describe what the job they’re applying for is like. I talk about the areas in which it is different from what they described and the areas in which it matches. Then, I offer my perspective on whether there’s a fit and I ask them for theirs. This usually ends up in one of several paths:</p>\n\n<ol>\n  <li>It sounds to me like this isn’t a great match for what you’re looking for. Do you agree?</li>\n  <li>From what you’ve described, this seems like a job that mostly matches what you’re looking for. What do you think?</li>\n  <li>It seems like this job is exactly what you’re looking for. Do you agree?</li>\n</ol>\n\n<p>When there’s a good fit, the candidate feels better about continuing in the process because of this exercise. They understand that I’m not saying this is a great position for them to try to blindly sell them, but that I really understand what they’re looking for and can honestly say I think it’s a good fit.</p>\n\n<p>I’ve never once had an argument with someone when I suggested it seemed like we didn’t have a good match. In most cases, the candidates have thanked me for the exercise because it helped them really narrow in on what they’re passionate about and what type of job they should be looking for. A couple times I’ve encouraged the candidate to apply to a different job at the company that seems more suited for what they’re looking for. In all cases, candidates have told me they enjoyed answering the question.</p>\n\n<h2 id=\"summary\">Summary</h2>\n\n<p>I think getting to know a candidate is almost (almost!) more important than evaluating their skills. I’ve seen a lot of damage caused by hiring people into the wrong position due to mismatched expectations, and I’d like to avoid that at all costs. I also want candidates to know that I’m not trying to sell them something I don’t have, nor am I making false promises about their chances of success when hired. Instead, I’m offering a complete view into the job they’re applying for and, hopefully, a clearer view of their own goals and preferences.</p>\n\n<p>I can honestly say this is the question I enjoy asking the most because reveal a lot about themselves. I think the key takeaway is that, regardless of the outcome, they feel listened to and that they were given a chance to really express how they see themselves fitting into an organization.</p>\n\n<p>Ultimately, I feel that I have a responsibility to both my employer and the candidate to make sure we hire people that are good matches for the positions we have. The answers I receive from this question tell me very quickly how good of a match there is, at which point I feel better about spending more time digging into their credentials and skills. If I could only ask one interview question to every candidate, this would be the one.</p>\n",
            "url": "https://humanwhocodes.com/blog/2015/09/my-favorite-interview-question/",
            
            
            
            "tags": ["Interviews","Hiring"],
            
            "date_published": "2015-09-22T00:00:00+00:00",
            "date_modified": "2015-09-22T00:00:00+00:00",
            
                "author": 
                ""
                
            
        },
    
        {
            "id": "https://humanwhocodes.com/blog/2015/09/is-the-web-platform-getting-too-big/",
            "title": "Is the web platform getting too big?",
            "summary": "Peter-Paul Koch recently wrote a blog post entitled, “Stop pushing the web forward” [1], in which he argued for a one-year moratorium on adding new features to the web platform. By new features, he means new APIs and capabilities in HTML, CSS, and JavaScript, arguing:",
            "content_text": "Peter-Paul Koch recently wrote a blog post entitled, “Stop pushing the web forward” [1], in which he argued for a one-year moratorium on adding new features to the web platform. By new features, he means new APIs and capabilities in HTML, CSS, and JavaScript, arguing:\n\n\n  We’re pushing the web forward to emulate native more and more, but we can’t out-native native. We are weighed down by the millstone of an ever-expanding set of tools that polyfill everything we don’t understand - and that’s most of a browser’s features nowadays. This is not the future that I want to push the web forward to.\n\n\nThe one-year moratorium, he argued, would give us all time to catch up on all the new features that have already been added. This, he continued, is really important because the pace at which new features are added is difficult for developers to deal with.\n\nA lot of the responses to his post were disappointingly dismissive to the point of being rude (he was frequently publicly called a “grumpy old man” to rationalize his perceives wrongness), and I thought that was a shame because I think PPK hit on an issue that we’re all facing: innovation fatigue.\n\nInnovation fatigue\n\nWhen I speak with more junior engineers, one of the most frequent questions I am asked looks like this:\n\n\n  How do you keep up with everything? Things are changing so fast, I feel like I’m always missing something, and then I get frustrated and think I should quit because everyone else seems to be on top of all the new stuff.\n\n\nMy response is usually something along the lines of this:\n\n\n  I don’t. It’s impossible to keep up with everything new that’s coming out. Your goal should be only to be aware of things at a high-level until you need them. Skim over headlines or links shared by people on Twitter so you’re aware of what’s going on, but don’t waste time trying to master everything. Wait until you need it.\n\n\nTruth be told, I hate giving this advice. I remember a time when I felt like I knew everything about every browser (there were only two!). My first book, Professional JavaScript [2], I intended to contain everything you’d need to know about JavaScript and browser-based APIs. For the most part, I succeeded…until the third edition. That’s when I realized that there was no way I could include everything anymore. And that made me sad.\n\nSo I think PPK was also channeling a bit of this sentiment in his post. As someone who spent an enormous amount of his personal time testing and documenting browser features and bugs, he must share my frustrations that the web isn’t completely knowable by one person anymore. In fact, he said as much in his followup post [3]:\n\n\n  …part of my resistance to this idea is that I remember the old days when I could actually enumerate the features of each of the three browsers. (OLD days, I said.)\n\n\nI’ll admit it was nice to know everything for a while, though we were probably all too naive to realize that this wasn’t a sustainable model. All occupations have an associated body of knowledge that practitioners dip into when they need to complete certain tasks. Visit any lawyer’s or accountant’s office and you’ll find shelves filled with books that they use for reference. In the tech world, talk to any Java developer about how to deal with an exploding number of options for completing the same task, and you’ll see that web developers have had it easy for a long time.\n\nA moratorium?\n\nI’m willing to bet that PPK didn’t think his blog post would result in an actual moratorium, but it is worth looking at what happened during the forced moratorium that occurred when Internet Explorer 6 ruled the web. Once IE6 had effectively crushed Netscape, the Internet Explorer team was disbanded. Microsoft had won the web and there was no more work to do. At that point in time, IE6 was all the web there was and that meant no more new features.\n\nThe period of 2001-2006, five years of stagnation, actually turned out to be a good thing. As Douglas Crockford has mentioned in several of his talks, the stagnation gave developers some time to catch up to what already existed. To that point, the innovation had been rapid and the incompatible changes in Internet Explorer and Netscape meant you always had to learn two different ways of doing the same thing. It was exhausting and frustrating to make pages and applications that worked across both browsers because there just wasn’t enough information about what to use in which situations. When all of a sudden there were no more features being added, we all could take a breather.\n\nYou’ll note that the first edition of Professional JavaScript came out in 2005, towards the end of the stagnation period. I spent most of 2003 and 2004 writing that book, and felt like it encapsulated every important piece of JavaScript information that existed in the world. I wasn’t alone, either, as blogs began to pop up and people started publishing their experiments with JavaScript and their understanding of how it worked.\n\nThat stagnation period is what gave Mozilla time to catch up with Firefox, it’s what led to the Ajax revolution, and it’s what ultimately unseated Microsoft as king of the web. So it’s not a big jump to say that stagnation alone isn’t a bad thing for the web. Maybe this stagnation period was an exception, but we can’t know that for sure.\n\nIs the web losing?\n\nSo what if we started a moratorium now? The main opponents to PPK’s suggestion predict dire consequences in the form of lament that is now all too familiar to me: if we stop innovating, the web will lose. I’ve heard this refrain in many different forms over the years, “we need the web to win” or “we don’t want the web to lose.” What game are we playing? Who are the opponents? What are we doing that they aren’t doing?\n\nWhen you ask these questions enough, inevitably someone answers: native will destroy the web if we stop innovating. Now, I have no data suggesting that this isn’t true, but I also have no data suggesting that it is. I’m also not convinced that this is really a native vs. web battle where there can only be one winner. However, if you hold this position, then I can understand why you’d fear a moratorium: stopping means falling behind while the opponent continues to innovate.\n\nI’m not sure if such battle is ongoing, or if some are imagining a foe and a battle in order to push for new features. To me, the thought that native will overtake the web seems like a theoretical impossibility, especially as we see more native capabilities that are mirroring what’s found in the web (i.e., React Native) and how hybrid mobile apps don’t seem to be going away anytime soon.\n\nIs native doing some cool stuff that would be great to have in web applications? Absolutely. But I hardly see this as a one-way street. More and more, it seems like native is trying to emulate the web development experience because it’s faster, there’s a built-in set of people with HTML, CSS, and JavaScript knowledge, and there are some great tools.\n\nSo, I’m not convinced the web is losing to anything, and I’m not convinced that between native and the web that there can be only one. I harken back to what Steve Jobs said when he returned to Apple in 1997:\n\n\n  If we want to move forward and see Apple healthy and prospering again, we have to let go of this notion that for Apple to win, Microsoft has to lose.\n\n\nI feel the same about the web and native.\n\n(If you have any research related to this topic, please post a link in the comments. I haven’t been able to find any numbers to back up either that there’s a war between the web and native or that one or the other is winning.)\n\nConclusion\n\nI really appreciated PPK’s willingness to stick his neck out and say something controversial to get people thinking and talking. In my heart, I’d love to see a moratorium, but that’s mostly a selfish desire to stop trying to keep up with every new thing as it comes out. That’s a path I’ve paved for myself and asking the world to change so I can stop walking that path isn’t rational or realistic. Yet, I understand where PPK is coming from, as it’s a sentiment that many developers share.\n\nThe rapid pace of web platform development is dizzying and it can, at times, be overwhelming. Imagine just starting out in the industry and discovering that you can never get ahead of the learning. Every six weeks (when new browsers are released), we need to augment how we do our work in some way. That’s a pretty crazy roller coaster that I’m sure we’d all like a break from.\n\nYet at the same time, the innovation that we’re experiencing means that solutions to our complex problems are more close than they are far away. We no longer have to go through years of experimentation, trying to find ways to work around the limitations of the browser. In some cases, if we can just wait a few months, the solution will be there.\n\nIn the meantime, I’ll echo a point PPK made in his second article: what we really need is a single source of truth for the ongoing development of the web platform. I had hoped that webplatform.org [4] would fill this role, but it’s not even close. What we really need is a home for the status of all web platform features, including standards work, browser implementations, and progress. If we could achieve this as a community, we could help the next generation of web developers tremendously. Instead of going to Edge’s status page, Chrome’s status page, searching GitHub, etc., we could go to one place and get all the information we need. That is a future worth fighting for.\n\nReferences\n\n\n  Stop pushing the web forward by Peter-Paul Koch (quirksmode.org)\n  Professional JavaScript for Web Developers by me (amazon.com)\n  Stop pushing redux by Peter-Paul Koch (quirksmode.org)\n  WebPlatform.org\n\n",
            "content_html": "<p>Peter-Paul Koch recently wrote a blog post entitled, “Stop pushing the web forward” [1], in which he argued for a one-year moratorium on adding new features to the web platform. By new features, he means new APIs and capabilities in HTML, CSS, and JavaScript, arguing:</p>\n\n<blockquote>\n  <p>We’re pushing the web forward to emulate native more and more, but we can’t out-native native. We are weighed down by the millstone of an ever-expanding set of tools that polyfill everything we don’t understand - and that’s most of a browser’s features nowadays. This is not the future that I want to push the web forward to.</p>\n</blockquote>\n\n<p>The one-year moratorium, he argued, would give us all time to catch up on all the new features that have already been added. This, he continued, is really important because the pace at which new features are added is difficult for developers to deal with.</p>\n\n<p>A lot of the responses to his post were disappointingly dismissive to the point of being rude (he was frequently publicly called a “grumpy old man” to rationalize his perceives wrongness), and I thought that was a shame because I think PPK hit on an issue that we’re all facing: innovation fatigue.</p>\n\n<h2 id=\"innovation-fatigue\">Innovation fatigue</h2>\n\n<p>When I speak with more junior engineers, one of the most frequent questions I am asked looks like this:</p>\n\n<blockquote>\n  <p>How do you keep up with everything? Things are changing so fast, I feel like I’m always missing something, and then I get frustrated and think I should quit because everyone else seems to be on top of all the new stuff.</p>\n</blockquote>\n\n<p>My response is usually something along the lines of this:</p>\n\n<blockquote>\n  <p>I don’t. It’s impossible to keep up with everything new that’s coming out. Your goal should be only to be aware of things at a high-level until you need them. Skim over headlines or links shared by people on Twitter so you’re aware of what’s going on, but don’t waste time trying to master everything. Wait until you need it.</p>\n</blockquote>\n\n<p>Truth be told, I hate giving this advice. I remember a time when I felt like I knew everything about every browser (there were only two!). My first book, <em>Professional JavaScript</em> [2], I intended to contain everything you’d need to know about JavaScript and browser-based APIs. For the most part, I succeeded…until the third edition. That’s when I realized that there was no way I could include everything anymore. And that made me sad.</p>\n\n<p>So I think PPK was also channeling a bit of this sentiment in his post. As someone who spent an enormous amount of his personal time testing and documenting browser features and bugs, he must share my frustrations that the web isn’t completely knowable by one person anymore. In fact, he said as much in his followup post [3]:</p>\n\n<blockquote>\n  <p>…part of my resistance to this idea is that I remember the old days when I could actually enumerate the features of each of the three browsers. (OLD days, I said.)</p>\n</blockquote>\n\n<p>I’ll admit it was nice to know everything for a while, though we were probably all too naive to realize that this wasn’t a sustainable model. All occupations have an associated body of knowledge that practitioners dip into when they need to complete certain tasks. Visit any lawyer’s or accountant’s office and you’ll find shelves filled with books that they use for reference. In the tech world, talk to any Java developer about how to deal with an exploding number of options for completing the same task, and you’ll see that web developers have had it easy for a long time.</p>\n\n<h2 id=\"a-moratorium\">A moratorium?</h2>\n\n<p>I’m willing to bet that PPK didn’t think his blog post would result in an actual moratorium, but it is worth looking at what happened during the forced moratorium that occurred when Internet Explorer 6 ruled the web. Once IE6 had effectively crushed Netscape, the Internet Explorer team was disbanded. Microsoft had won the web and there was no more work to do. At that point in time, IE6 was all the web there was and that meant no more new features.</p>\n\n<p>The period of 2001-2006, five years of stagnation, actually turned out to be a good thing. As Douglas Crockford has mentioned in several of his talks, the stagnation gave developers some time to catch up to what already existed. To that point, the innovation had been rapid and the incompatible changes in Internet Explorer and Netscape meant you always had to learn two different ways of doing the same thing. It was exhausting and frustrating to make pages and applications that worked across both browsers because there just wasn’t enough information about what to use in which situations. When all of a sudden there were no more features being added, we all could take a breather.</p>\n\n<p>You’ll note that the first edition of <em>Professional JavaScript</em> came out in 2005, towards the end of the stagnation period. I spent most of 2003 and 2004 writing that book, and felt like it encapsulated every important piece of JavaScript information that existed in the world. I wasn’t alone, either, as blogs began to pop up and people started publishing their experiments with JavaScript and their understanding of how it worked.</p>\n\n<p>That stagnation period is what gave Mozilla time to catch up with Firefox, it’s what led to the Ajax revolution, and it’s what ultimately unseated Microsoft as king of the web. So it’s not a big jump to say that stagnation alone isn’t a bad thing for the web. Maybe this stagnation period was an exception, but we can’t know that for sure.</p>\n\n<h2 id=\"is-the-web-losing\">Is the web losing?</h2>\n\n<p>So what if we started a moratorium now? The main opponents to PPK’s suggestion predict dire consequences in the form of lament that is now all too familiar to me: if we stop innovating, the web will lose. I’ve heard this refrain in many different forms over the years, “we need the web to win” or “we don’t want the web to lose.” What game are we playing? Who are the opponents? What are we doing that they aren’t doing?</p>\n\n<p>When you ask these questions enough, inevitably someone answers: native will destroy the web if we stop innovating. Now, I have no data suggesting that this isn’t true, but I also have no data suggesting that it is. I’m also not convinced that this is really a native vs. web battle where there can only be one winner. However, if you hold this position, then I can understand why you’d fear a moratorium: stopping means falling behind while the opponent continues to innovate.</p>\n\n<p>I’m not sure if such battle is ongoing, or if some are imagining a foe and a battle in order to push for new features. To me, the thought that native will overtake the web seems like a theoretical impossibility, especially as we see more native capabilities that are mirroring what’s found in the web (i.e., React Native) and how hybrid mobile apps don’t seem to be going away anytime soon.</p>\n\n<p>Is native doing some cool stuff that would be great to have in web applications? Absolutely. But I hardly see this as a one-way street. More and more, it seems like native is trying to emulate the web development experience because it’s faster, there’s a built-in set of people with HTML, CSS, and JavaScript knowledge, and there are some great tools.</p>\n\n<p>So, I’m not convinced the web is losing to anything, and I’m not convinced that between native and the web that there can be only one. I harken back to what Steve Jobs said when he returned to Apple in 1997:</p>\n\n<blockquote>\n  <p>If we want to move forward and see Apple healthy and prospering again, we have to let go of this notion that for Apple to win, Microsoft has to lose.</p>\n</blockquote>\n\n<p>I feel the same about the web and native.</p>\n\n<p>(If you have any research related to this topic, please post a link in the comments. I haven’t been able to find any numbers to back up either that there’s a war between the web and native or that one or the other is winning.)</p>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<p>I really appreciated PPK’s willingness to stick his neck out and say something controversial to get people thinking and talking. In my heart, I’d love to see a moratorium, but that’s mostly a selfish desire to stop trying to keep up with every new thing as it comes out. That’s a path I’ve paved for myself and asking the world to change so I can stop walking that path isn’t rational or realistic. Yet, I understand where PPK is coming from, as it’s a sentiment that many developers share.</p>\n\n<p>The rapid pace of web platform development is dizzying and it can, at times, be overwhelming. Imagine just starting out in the industry and discovering that you can never get ahead of the learning. Every six weeks (when new browsers are released), we need to augment how we do our work in some way. That’s a pretty crazy roller coaster that I’m sure we’d all like a break from.</p>\n\n<p>Yet at the same time, the innovation that we’re experiencing means that solutions to our complex problems are more close than they are far away. We no longer have to go through years of experimentation, trying to find ways to work around the limitations of the browser. In some cases, if we can just wait a few months, the solution will be there.</p>\n\n<p>In the meantime, I’ll echo a point PPK made in his second article: what we really need is a single source of truth for the ongoing development of the web platform. I had hoped that webplatform.org [4] would fill this role, but it’s not even close. What we really need is a home for the status of all web platform features, including standards work, browser implementations, and progress. If we could achieve this as a community, we could help the next generation of web developers tremendously. Instead of going to Edge’s status page, Chrome’s status page, searching GitHub, etc., we could go to one place and get all the information we need. That is a future worth fighting for.</p>\n\n<h2 id=\"references\">References</h2>\n\n<ol>\n  <li><a href="https://humanwhocodes.com/feeds/\&quot;http://www.quirksmode.org/blog/archives/2015/07/stop_pushing_th.html\&quot;">Stop pushing the web forward</a> by Peter-Paul Koch (quirksmode.org)</li>\n  <li><a href="https://humanwhocodes.com/feeds/\&quot;http://www.amazon.com/Professional-JavaScript-Developers-Nicholas-Zakas/dp/1118026691/ref=sr_1_13?tag=nczonline-20\&quot;">Professional JavaScript for Web Developers</a> by me (amazon.com)</li>\n  <li><a href="https://humanwhocodes.com/feeds/\&quot;http://www.quirksmode.org/blog/archives/2015/08/stop_pushing_re.html\&quot;">Stop pushing redux</a> by Peter-Paul Koch (quirksmode.org)</li>\n  <li><a href="https://humanwhocodes.com/feeds/\&quot;https://www.webplatform.org/\&quot;">WebPlatform.org</a></li>\n</ol>\n",
            "url": "https://humanwhocodes.com/blog/2015/09/is-the-web-platform-getting-too-big/",
            
            
            
            "tags": ["Web","Internet","API","Platform"],
            
            "date_published": "2015-09-08T00:49:57+00:00",
            "date_modified": "2015-09-08T00:49:57+00:00",
            
                "author": 
                ""
                
            
        }
    
    ]
}